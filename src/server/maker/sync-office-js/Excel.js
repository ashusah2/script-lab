var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Excel;
(function (Excel) {
    function lowerCaseFirst(str) {
        return str[0].toLowerCase() + str.slice(1);
    }
    var iconSets = ["ThreeArrows",
        "ThreeArrowsGray",
        "ThreeFlags",
        "ThreeTrafficLights1",
        "ThreeTrafficLights2",
        "ThreeSigns",
        "ThreeSymbols",
        "ThreeSymbols2",
        "FourArrows",
        "FourArrowsGray",
        "FourRedToBlack",
        "FourRating",
        "FourTrafficLights",
        "FiveArrows",
        "FiveArrowsGray",
        "FiveRating",
        "FiveQuarters",
        "ThreeStars",
        "ThreeTriangles",
        "FiveBoxes"];
    var iconNames = [["RedDownArrow", "YellowSideArrow", "GreenUpArrow"],
        ["GrayDownArrow", "GraySideArrow", "GrayUpArrow"],
        ["RedFlag", "YellowFlag", "GreenFlag"],
        ["RedCircleWithBorder", "YellowCircle", "GreenCircle"],
        ["RedTrafficLight", "YellowTrafficLight", "GreenTrafficLight"],
        ["RedDiamond", "YellowTriangle", "GreenCircle"],
        ["RedCrossSymbol", "YellowExclamationSymbol", "GreenCheckSymbol"],
        ["RedCross", "YellowExclamation", "GreenCheck"],
        ["RedDownArrow", "YellowDownInclineArrow", "YellowUpInclineArrow", "GreenUpArrow"],
        ["GrayDownArrow", "GrayDownInclineArrow", "GrayUpInclineArrow", "GrayUpArrow"],
        ["BlackCircle", "GrayCircle", "PinkCircle", "RedCircle"],
        ["OneBar", "TwoBars", "ThreeBars", "FourBars"],
        ["BlackCircleWithBorder", "RedCircleWithBorder", "YellowCircle", "GreenCircle"],
        ["RedDownArrow", "YellowDownInclineArrow", "YellowSideArrow", "YellowUpInclineArrow", "GreenUpArrow"],
        ["GrayDownArrow", "GrayDownInclineArrow", "GraySideArrow", "GrayUpInclineArrow", "GrayUpArrow"],
        ["NoBars", "OneBar", "TwoBars", "ThreeBars", "FourBars"],
        ["WhiteCircleAllWhiteQuarters", "CircleWithThreeWhiteQuarters", "CircleWithTwoWhiteQuarters", "CircleWithOneWhiteQuarter", "BlackCircle"],
        ["SilverStar", "HalfGoldStar", "GoldStar"],
        ["RedDownTriangle", "YellowDash", "GreenUpTriangle"],
        ["NoFilledBoxes", "OneFilledBox", "TwoFilledBoxes", "ThreeFilledBoxes", "FourFilledBoxes"],];
    Excel.icons = {};
    iconSets.map(function (title, i) {
        var camelTitle = lowerCaseFirst(title);
        Excel.icons[camelTitle] = [];
        iconNames[i].map(function (iconName, j) {
            iconName = lowerCaseFirst(iconName);
            var obj = { set: title, index: j };
            Excel.icons[camelTitle].push(obj);
            Excel.icons[camelTitle][iconName] = obj;
        });
    });
    function setRangePropertiesInBulk(range, propertyName, values) {
        var maxCellCount = 1500;
        if (Array.isArray(values) && values.length > 0 && Array.isArray(values[0]) && (values.length * values[0].length > maxCellCount) && isExcel1_3OrAbove()) {
            var maxRowCount = Math.max(1, Math.round(maxCellCount / values[0].length));
            range._ValidateArraySize(values.length, values[0].length);
            for (var startRowIndex = 0; startRowIndex < values.length; startRowIndex += maxRowCount) {
                var rowCount = maxRowCount;
                if (startRowIndex + rowCount > values.length) {
                    rowCount = values.length - startRowIndex;
                }
                var chunk = range.getRow(startRowIndex).getBoundingRect(range.getRow(startRowIndex + rowCount - 1));
                var valueSlice = values.slice(startRowIndex, startRowIndex + rowCount);
                _createSetPropertyAction(chunk.context, chunk, propertyName, valueSlice);
            }
            return true;
        }
        return false;
    }
    function isExcel1_3OrAbove() {
        if (typeof (window) !== "undefined" && window.Office && window.Office.context && window.Office.context.requirements) {
            return window.Office.context.requirements.isSetSupported("ExcelApi", 1.3);
        }
        else {
            return true;
        }
    }
    var Session = (function () {
        function Session(workbookUrl, requestHeaders, persisted) {
            this.m_workbookUrl = workbookUrl;
            this.m_requestHeaders = requestHeaders;
            if (!this.m_requestHeaders) {
                this.m_requestHeaders = {};
            }
            if (OfficeExtension.Utility.isNullOrUndefined(persisted)) {
                persisted = true;
            }
            this.m_persisted = persisted;
        }
        Session.prototype.close = function () {
            var _this = this;
            if (this.m_requestUrlAndHeaderInfo &&
                !OfficeExtension.Utility._isLocalDocumentUrl(this.m_requestUrlAndHeaderInfo.url)) {
                var url = this.m_requestUrlAndHeaderInfo.url;
                if (url.charAt(url.length - 1) != "/") {
                    url = url + "/";
                }
                url = url + "closeSession";
                var headers = this.m_requestUrlAndHeaderInfo;
                var req = { method: "POST", url: url, headers: this.m_requestUrlAndHeaderInfo.headers, body: "" };
                this.m_requestUrlAndHeaderInfo = null;
                return OfficeExtension.HttpUtility.sendRequest(req)
                    .then(function (resp) {
                    if (resp.statusCode != 204) {
                        var err = OfficeExtension.Utility._parseErrorResponse(resp);
                        throw OfficeExtension.Utility.createRuntimeError(err.errorCode, err.errorMessage, "Session.close");
                    }
                    _this.m_requestUrlAndHeaderInfo = null;
                    var foundSessionKey = null;
                    for (var key in _this.m_requestHeaders) {
                        if (key.toLowerCase() == Session.WorkbookSessionIdHeaderNameLower) {
                            foundSessionKey = key;
                            break;
                        }
                    }
                    if (foundSessionKey) {
                        delete _this.m_requestHeaders[foundSessionKey];
                    }
                });
            }
            else {
                return OfficeExtension.Utility._createPromiseFromResult(null);
            }
        };
        Session.prototype._resolveRequestUrlAndHeaderInfo = function () {
            var _this = this;
            if (this.m_requestUrlAndHeaderInfo) {
                return OfficeExtension.Utility._createPromiseFromResult(this.m_requestUrlAndHeaderInfo);
            }
            if (OfficeExtension.Utility.isNullOrEmptyString(this.m_workbookUrl) ||
                OfficeExtension.Utility._isLocalDocumentUrl(this.m_workbookUrl)) {
                this.m_requestUrlAndHeaderInfo = { url: this.m_workbookUrl, headers: this.m_requestHeaders };
                return OfficeExtension.Utility._createPromiseFromResult(this.m_requestUrlAndHeaderInfo);
            }
            var foundSessionId = false;
            for (var key in this.m_requestHeaders) {
                if (key.toLowerCase() == Session.WorkbookSessionIdHeaderNameLower) {
                    foundSessionId = true;
                    break;
                }
            }
            if (foundSessionId) {
                this.m_requestUrlAndHeaderInfo = { url: this.m_workbookUrl, headers: this.m_requestHeaders };
                return OfficeExtension.Utility._createPromiseFromResult(this.m_requestUrlAndHeaderInfo);
            }
            var url = this.m_workbookUrl;
            if (url.charAt(url.length - 1) != "/") {
                url = url + "/";
            }
            url = url + "createSession";
            var headers = {};
            OfficeExtension.Utility._copyHeaders(this.m_requestHeaders, headers);
            headers["Content-Type"] = "application/json";
            var body = {};
            body.persistChanges = this.m_persisted;
            var req = { method: "POST", url: url, headers: headers, body: JSON.stringify(body) };
            return OfficeExtension.HttpUtility.sendRequest(req)
                .then(function (resp) {
                if (resp.statusCode !== 201) {
                    var err = OfficeExtension.Utility._parseErrorResponse(resp);
                    throw OfficeExtension.Utility.createRuntimeError(err.errorCode, err.errorMessage, "Session.resolveRequestUrlAndHeaderInfo");
                }
                var session = JSON.parse(resp.body);
                var sessionId = session.id;
                headers = {};
                OfficeExtension.Utility._copyHeaders(_this.m_requestHeaders, headers);
                headers[Session.WorkbookSessionIdHeaderName] = sessionId;
                _this.m_requestUrlAndHeaderInfo = { url: _this.m_workbookUrl, headers: headers };
                return _this.m_requestUrlAndHeaderInfo;
            });
        };
        return Session;
    }());
    Session.WorkbookSessionIdHeaderName = "Workbook-Session-Id";
    Session.WorkbookSessionIdHeaderNameLower = "workbook-session-id";
    Excel.Session = Session;
    var RequestContext = (function (_super) {
        __extends(RequestContext, _super);
        function RequestContext(url) {
            var _this = _super.call(this, url) || this;
            _this.m_workbook = new Workbook(_this, OfficeExtension.ObjectPathFactory.createGlobalObjectObjectPath(_this));
            _this._rootObject = _this.m_workbook;
            _this._rootObjectPropertyName = "workbook";
            return _this;
        }
        RequestContext.prototype._processOfficeJsErrorResponse = function (officeJsErrorCode, response) {
            var ooeInvalidApiCallInContext = 5004;
            if (officeJsErrorCode == ooeInvalidApiCallInContext) {
                response.ErrorCode = ErrorCodes.invalidOperationInCellEditMode;
                response.ErrorMessage = OfficeExtension.Utility._getResourceString(OfficeExtension.ResourceStrings.invalidOperationInCellEditMode);
            }
        };
        Object.defineProperty(RequestContext.prototype, "workbook", {
            get: function () {
                return this.m_workbook;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RequestContext.prototype, "application", {
            get: function () {
                return this.workbook.application;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RequestContext.prototype, "runtime", {
            get: function () {
                return this.workbook._Runtime;
            },
            enumerable: true,
            configurable: true
        });
        return RequestContext;
    }(OfficeCore.RequestContext));
    Excel.RequestContext = RequestContext;
    function run(arg1, arg2, arg3) {
        return OfficeExtension.ClientRequestContext._runBatch("Excel.run", arguments, function (requestInfo) {
            var ret = new Excel.RequestContext(requestInfo);
            return ret;
        });
    }
    Excel.run = run;
    function runBatch(arg1, arg2) {
        return OfficeExtension.ClientRequestContext._runExplicitBatch("Excel.runBatch", arguments, function (requestInfo) {
            var ret = new Excel.RequestContext(requestInfo);
            return ret;
        });
    }
    Excel.runBatch = runBatch;
    Excel._RedirectV1APIs = false;
    Excel._V1APIMap = {
        "GetDataAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingGetData(callArgs); },
            postprocess: getDataCommonPostprocess
        },
        "GetSelectedDataAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.getSelectedData(callArgs); },
            postprocess: getDataCommonPostprocess
        },
        "GoToByIdAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.gotoById(callArgs); }
        },
        "AddColumnsAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingAddColumns(callArgs); }
        },
        "AddFromSelectionAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingAddFromSelection(callArgs); },
            postprocess: postprocessBindingDescriptor
        },
        "AddFromNamedItemAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingAddFromNamedItem(callArgs); },
            postprocess: postprocessBindingDescriptor
        },
        "AddFromPromptAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingAddFromPrompt(callArgs); },
            postprocess: postprocessBindingDescriptor
        },
        "AddRowsAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingAddRows(callArgs); }
        },
        "GetByIdAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingGetById(callArgs); },
            postprocess: postprocessBindingDescriptor
        },
        "ReleaseByIdAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingReleaseById(callArgs); }
        },
        "GetAllAsync": {
            call: function (ctx) { return ctx.workbook._V1Api.bindingGetAll(); },
            postprocess: function (response) {
                return response.bindings.map(function (descriptor) { return postprocessBindingDescriptor(descriptor); });
            }
        },
        "DeleteAllDataValuesAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingDeleteAllDataValues(callArgs); }
        },
        "SetSelectedDataAsync": {
            preprocess: function (callArgs) {
                var preimage = callArgs["cellFormat"];
                if (typeof (window) !== "undefined" && window.OSF.DDA.SafeArray) {
                    if (window.OSF.OUtil.listContainsKey(window.OSF.DDA.SafeArray.Delegate.ParameterMap.dynamicTypes, "cellFormat")) {
                        callArgs["cellFormat"] = window.OSF.DDA.SafeArray.Delegate.ParameterMap.dynamicTypes["cellFormat"]["toHost"](preimage);
                    }
                }
                else if (typeof (window) !== "undefined" && window.OSF.DDA.WAC) {
                    if (window.OSF.OUtil.listContainsKey(window.OSF.DDA.WAC.Delegate.ParameterMap.dynamicTypes, "cellFormat")) {
                        callArgs["cellFormat"] = window.OSF.DDA.WAC.Delegate.ParameterMap.dynamicTypes["cellFormat"]["toHost"](preimage);
                    }
                }
                return callArgs;
            },
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.setSelectedData(callArgs); }
        },
        "SetDataAsync": {
            preprocess: function (callArgs) {
                var preimage = callArgs["cellFormat"];
                if (typeof (window) !== "undefined" && window.OSF.DDA.SafeArray) {
                    if (window.OSF.OUtil.listContainsKey(window.OSF.DDA.SafeArray.Delegate.ParameterMap.dynamicTypes, "cellFormat")) {
                        callArgs["cellFormat"] = window.OSF.DDA.SafeArray.Delegate.ParameterMap.dynamicTypes["cellFormat"]["toHost"](preimage);
                    }
                }
                else if (typeof (window) !== "undefined" && window.OSF.DDA.WAC) {
                    if (window.OSF.OUtil.listContainsKey(window.OSF.DDA.WAC.Delegate.ParameterMap.dynamicTypes, "cellFormat")) {
                        callArgs["cellFormat"] = window.OSF.DDA.WAC.Delegate.ParameterMap.dynamicTypes["cellFormat"]["toHost"](preimage);
                    }
                }
                return callArgs;
            },
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingSetData(callArgs); }
        },
        "SetFormatsAsync": {
            preprocess: function (callArgs) {
                var preimage = callArgs["cellFormat"];
                if (typeof (window) !== "undefined" && window.OSF.DDA.SafeArray) {
                    if (window.OSF.OUtil.listContainsKey(window.OSF.DDA.SafeArray.Delegate.ParameterMap.dynamicTypes, "cellFormat")) {
                        callArgs["cellFormat"] = window.OSF.DDA.SafeArray.Delegate.ParameterMap.dynamicTypes["cellFormat"]["toHost"](preimage);
                    }
                }
                else if (typeof (window) !== "undefined" && window.OSF.DDA.WAC) {
                    if (window.OSF.OUtil.listContainsKey(window.OSF.DDA.WAC.Delegate.ParameterMap.dynamicTypes, "cellFormat")) {
                        callArgs["cellFormat"] = window.OSF.DDA.WAC.Delegate.ParameterMap.dynamicTypes["cellFormat"]["toHost"](preimage);
                    }
                }
                return callArgs;
            },
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingSetFormats(callArgs); }
        },
        "SetTableOptionsAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingSetTableOptions(callArgs); }
        },
        "ClearFormatsAsync": {
            call: function (ctx, callArgs) { return ctx.workbook._V1Api.bindingClearFormats(callArgs); }
        },
        "GetFilePropertiesAsync": {
            call: function (ctx) { return ctx.workbook._V1Api.getFilePropertiesAsync(); }
        },
    };
    function postprocessBindingDescriptor(response) {
        var bindingDescriptor = {
            BindingColumnCount: response.bindingColumnCount,
            BindingId: response.bindingId,
            BindingRowCount: response.bindingRowCount,
            bindingType: response.bindingType,
            HasHeaders: response.hasHeaders
        };
        return window.OSF.DDA.OMFactory.manufactureBinding(bindingDescriptor, window.Microsoft.Office.WebExtension.context.document);
    }
    function getDataCommonPostprocess(response, callArgs) {
        var isPlainData = response.headers == null;
        var data;
        if (isPlainData) {
            data = response.rows;
        }
        else {
            data = response;
        }
        data = window.OSF.DDA.DataCoercion.coerceData(data, callArgs[window.Microsoft.Office.WebExtension.Parameters.CoercionType]);
        return data == undefined ? null : data;
    }
    function versionNumberIsEarlierThan(desiredMajor, desiredMinor, desiredBuild) {
        var hasOfficeVersion = typeof (window) !== "undefined" &&
            window.Office &&
            window.Office.context &&
            window.Office.context.diagnostics &&
            window.Office.context.diagnostics.version;
        if (!hasOfficeVersion) {
            return false;
        }
        var version = window.Office.context.diagnostics.version;
        var versionExtractor = /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/;
        var result = versionExtractor.exec(version);
        if (result) {
            var major = parseInt(result[1]);
            var minor = parseInt(result[2]);
            var build = parseInt(result[3]);
            var revision = parseInt(result[4]);
            var devBuild = 3000;
            if (major < desiredMajor) {
                return true;
            }
            if (major == desiredMajor && minor < desiredMinor) {
                return true;
            }
            if (major == desiredMajor && minor == desiredMinor && build < desiredBuild) {
                if (revision < devBuild) {
                    return true;
                }
            }
        }
        return false;
    }
    var _hostName = "Excel";
    var _defaultApiSetName = "ExcelApi";
    var _createPropertyObjectPath = OfficeExtension.ObjectPathFactory.createPropertyObjectPath;
    var _createMethodObjectPath = OfficeExtension.ObjectPathFactory.createMethodObjectPath;
    var _createIndexerObjectPath = OfficeExtension.ObjectPathFactory.createIndexerObjectPath;
    var _createNewObjectObjectPath = OfficeExtension.ObjectPathFactory.createNewObjectObjectPath;
    var _createChildItemObjectPathUsingIndexer = OfficeExtension.ObjectPathFactory.createChildItemObjectPathUsingIndexer;
    var _createChildItemObjectPathUsingGetItemAt = OfficeExtension.ObjectPathFactory.createChildItemObjectPathUsingGetItemAt;
    var _createChildItemObjectPathUsingIndexerOrGetItemAt = OfficeExtension.ObjectPathFactory.createChildItemObjectPathUsingIndexerOrGetItemAt;
    var _createMethodAction = OfficeExtension.ActionFactory.createMethodAction;
    var _createEnsureUnchangedAction = OfficeExtension.ActionFactory.createEnsureUnchangedAction;
    var _createSetPropertyAction = OfficeExtension.ActionFactory.createSetPropertyAction;
    var _isNullOrUndefined = OfficeExtension.Utility.isNullOrUndefined;
    var _isUndefined = OfficeExtension.Utility.isUndefined;
    var _throwIfNotLoaded = OfficeExtension.Utility.throwIfNotLoaded;
    var _throwIfApiNotSupported = OfficeExtension.Utility.throwIfApiNotSupported;
    var _load = OfficeExtension.Utility.load;
    var _retrieve = OfficeExtension.Utility.retrieve;
    var _toJson = OfficeExtension.Utility.toJson;
    var _fixObjectPathIfNecessary = OfficeExtension.Utility.fixObjectPathIfNecessary;
    var _addActionResultHandler = OfficeExtension.Utility._addActionResultHandler;
    var _handleNavigationPropertyResults = OfficeExtension.Utility._handleNavigationPropertyResults;
    var _adjustToDateTime = OfficeExtension.Utility.adjustToDateTime;
    var _processRetrieveResult = OfficeExtension.Utility.processRetrieveResult;
    var _typeRuntime = "Runtime";
    var Runtime = (function (_super) {
        __extends(Runtime, _super);
        function Runtime() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Runtime.prototype, "_className", {
            get: function () {
                return "Runtime";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Runtime.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["enableEvents"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Runtime.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Runtime.prototype, "enableEvents", {
            get: function () {
                _throwIfNotLoaded("enableEvents", this._E, _typeRuntime, this._isNull);
                _throwIfApiNotSupported("Runtime.enableEvents", _defaultApiSetName, "1.8", _hostName);
                return this._E;
            },
            set: function (value) {
                this._E = value;
                _createSetPropertyAction(this.context, this, "EnableEvents", value);
            },
            enumerable: true,
            configurable: true
        });
        Runtime.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["enableEvents"], [], []);
        };
        Runtime.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        Runtime.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["EnableEvents"])) {
                this._E = obj["EnableEvents"];
            }
        };
        Runtime.prototype.load = function (option) {
            return _load(this, option);
        };
        Runtime.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        Runtime.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Runtime.prototype.toJSON = function () {
            return _toJson(this, {
                "enableEvents": this._E,
            }, {});
        };
        Runtime.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return Runtime;
    }(OfficeExtension.ClientObject));
    Excel.Runtime = Runtime;
    var _typeApplication = "Application";
    var Application = (function (_super) {
        __extends(Application, _super);
        function Application() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Application.prototype, "_className", {
            get: function () {
                return "Application";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Application.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["calculationMode"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Application.prototype, "calculationMode", {
            get: function () {
                _throwIfNotLoaded("calculationMode", this._C, _typeApplication, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Application.prototype.calculate = function (calculationType) {
            _createMethodAction(this.context, this, "Calculate", 0, [calculationType], false);
        };
        Application.prototype.createWorkbook = function (base64File) {
            _throwIfApiNotSupported("Application.createWorkbook", _defaultApiSetName, "1.8", _hostName);
            return new Excel.WorkbookCreated(this.context, _createMethodObjectPath(this.context, this, "CreateWorkbook", 1, [base64File], false, false, null, false));
        };
        Application.prototype.suspendApiCalculationUntilNextSync = function () {
            _throwIfApiNotSupported("Application.suspendApiCalculationUntilNextSync", _defaultApiSetName, "1.6", _hostName);
            _createMethodAction(this.context, this, "SuspendApiCalculationUntilNextSync", 0, [], false);
        };
        Application.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["CalculationMode"])) {
                this._C = obj["CalculationMode"];
            }
        };
        Application.prototype.load = function (option) {
            return _load(this, option);
        };
        Application.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        Application.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Application.prototype.toJSON = function () {
            return _toJson(this, {
                "calculationMode": this._C,
            }, {});
        };
        Application.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return Application;
    }(OfficeExtension.ClientObject));
    Excel.Application = Application;
    var _typeWorkbook = "Workbook";
    var Workbook = (function (_super) {
        __extends(Workbook, _super);
        function Workbook() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Workbook.prototype, "_className", {
            get: function () {
                return "Workbook";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["name", "readOnly", "saved"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [false, false, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["worksheets", "names", "tables", "application", "bindings", "functions", "_V1Api", "pivotTables", "settings", "customXmlParts", "internalTest", "properties", "customFunctions", "styles", "protection", "dataConnections", "_Runtime", "pivotCaches"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "application", {
            get: function () {
                if (!this._A) {
                    this._A = new Excel.Application(this.context, _createPropertyObjectPath(this.context, this, "Application", false, false, false));
                }
                return this._A;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "bindings", {
            get: function () {
                if (!this._B) {
                    this._B = new Excel.BindingCollection(this.context, _createPropertyObjectPath(this.context, this, "Bindings", true, false, false));
                }
                return this._B;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "customFunctions", {
            get: function () {
                _throwIfApiNotSupported("Workbook.customFunctions", "CustomFunctions", "1.1", _hostName);
                if (!this._C) {
                    this._C = new Excel.CustomFunctionCollection(this.context, _createPropertyObjectPath(this.context, this, "CustomFunctions", true, false, false));
                }
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "customXmlParts", {
            get: function () {
                _throwIfApiNotSupported("Workbook.customXmlParts", _defaultApiSetName, "1.5", _hostName);
                if (!this._Cu) {
                    this._Cu = new Excel.CustomXmlPartCollection(this.context, _createPropertyObjectPath(this.context, this, "CustomXmlParts", true, false, false));
                }
                return this._Cu;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "dataConnections", {
            get: function () {
                _throwIfApiNotSupported("Workbook.dataConnections", _defaultApiSetName, "1.7", _hostName);
                if (!this._D) {
                    this._D = new Excel.DataConnectionCollection(this.context, _createPropertyObjectPath(this.context, this, "DataConnections", false, false, false));
                }
                return this._D;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "functions", {
            get: function () {
                _throwIfApiNotSupported("Workbook.functions", _defaultApiSetName, "1.2", _hostName);
                if (!this._F) {
                    this._F = new Excel.Functions(this.context, _createPropertyObjectPath(this.context, this, "Functions", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "internalTest", {
            get: function () {
                _throwIfApiNotSupported("Workbook.internalTest", _defaultApiSetName, "1.6", _hostName);
                if (!this._I) {
                    this._I = new Excel.InternalTest(this.context, _createPropertyObjectPath(this.context, this, "InternalTest", false, false, false));
                }
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "names", {
            get: function () {
                if (!this._Na) {
                    this._Na = new Excel.NamedItemCollection(this.context, _createPropertyObjectPath(this.context, this, "Names", true, false, false));
                }
                return this._Na;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "pivotTables", {
            get: function () {
                _throwIfApiNotSupported("Workbook.pivotTables", _defaultApiSetName, "1.3", _hostName);
                if (!this._Pi) {
                    this._Pi = new Excel.PivotTableCollection(this.context, _createPropertyObjectPath(this.context, this, "PivotTables", true, false, false));
                }
                return this._Pi;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "properties", {
            get: function () {
                _throwIfApiNotSupported("Workbook.properties", _defaultApiSetName, "1.7", _hostName);
                if (!this._Pr) {
                    this._Pr = new Excel.DocumentProperties(this.context, _createPropertyObjectPath(this.context, this, "Properties", false, false, false));
                }
                return this._Pr;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "protection", {
            get: function () {
                _throwIfApiNotSupported("Workbook.protection", _defaultApiSetName, "1.7", _hostName);
                if (!this._Pro) {
                    this._Pro = new Excel.WorkbookProtection(this.context, _createPropertyObjectPath(this.context, this, "Protection", false, false, false));
                }
                return this._Pro;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "settings", {
            get: function () {
                _throwIfApiNotSupported("Workbook.settings", _defaultApiSetName, "1.4", _hostName);
                if (!this._Se) {
                    this._Se = new Excel.SettingCollection(this.context, _createPropertyObjectPath(this.context, this, "Settings", true, false, false));
                }
                return this._Se;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "styles", {
            get: function () {
                _throwIfApiNotSupported("Workbook.styles", _defaultApiSetName, "1.7", _hostName);
                if (!this._St) {
                    this._St = new Excel.StyleCollection(this.context, _createPropertyObjectPath(this.context, this, "Styles", true, false, false));
                }
                return this._St;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "tables", {
            get: function () {
                if (!this._T) {
                    this._T = new Excel.TableCollection(this.context, _createPropertyObjectPath(this.context, this, "Tables", true, false, false));
                }
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "worksheets", {
            get: function () {
                if (!this._W) {
                    this._W = new Excel.WorksheetCollection(this.context, _createPropertyObjectPath(this.context, this, "Worksheets", true, false, false));
                }
                return this._W;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "_Runtime", {
            get: function () {
                _throwIfApiNotSupported("Workbook._Runtime", _defaultApiSetName, "1.5", _hostName);
                if (!this.__R) {
                    this.__R = new Excel.Runtime(this.context, _createPropertyObjectPath(this.context, this, "_Runtime", false, false, false));
                }
                return this.__R;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "_V1Api", {
            get: function () {
                _throwIfApiNotSupported("Workbook._V1Api", _defaultApiSetName, "1.3", _hostName);
                if (!this.__V) {
                    this.__V = new Excel._V1Api(this.context, _createPropertyObjectPath(this.context, this, "_V1Api", false, false, false));
                }
                return this.__V;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "pivotCaches", {
            get: function () {
                _throwIfApiNotSupported("Workbook.pivotCaches", "Pivot", "1.1", _hostName);
                if (!this._P) {
                    this._P = new Excel.PivotCacheCollection(this.context, _createPropertyObjectPath(this.context, this, "PivotCaches", true, false, false));
                }
                return this._P;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typeWorkbook, this._isNull);
                _throwIfApiNotSupported("Workbook.name", _defaultApiSetName, "1.7", _hostName);
                return this._N;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "readOnly", {
            get: function () {
                _throwIfNotLoaded("readOnly", this._R, _typeWorkbook, this._isNull);
                _throwIfApiNotSupported("Workbook.readOnly", _defaultApiSetName, "1.8", _hostName);
                return this._R;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "saved", {
            get: function () {
                _throwIfNotLoaded("saved", this._S, _typeWorkbook, this._isNull);
                _throwIfApiNotSupported("Workbook.saved", _defaultApiSetName, "1.8", _hostName);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "Saved", value);
            },
            enumerable: true,
            configurable: true
        });
        Workbook.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["saved"], ["properties"], [
                "_Runtime",
                "_V1Api",
                "application",
                "bindings",
                "customFunctions",
                "customXmlParts",
                "dataConnections",
                "functions",
                "internalTest",
                "names",
                "pivotCaches",
                "pivotTables",
                "protection",
                "settings",
                "styles",
                "tables",
                "worksheets"
            ]);
        };
        Workbook.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        Workbook.prototype.getActiveCell = function () {
            _throwIfApiNotSupported("Workbook.getActiveCell", _defaultApiSetName, "1.7", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetActiveCell", 1, [], false, true, null, false));
        };
        Workbook.prototype.getSelectedRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetSelectedRange", 1, [], false, true, null, false));
        };
        Workbook.prototype._GetObjectByReferenceId = function (bstrReferenceId) {
            var action = _createMethodAction(this.context, this, "_GetObjectByReferenceId", 1, [bstrReferenceId], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        Workbook.prototype._GetObjectTypeNameByReferenceId = function (bstrReferenceId) {
            var action = _createMethodAction(this.context, this, "_GetObjectTypeNameByReferenceId", 1, [bstrReferenceId], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        Workbook.prototype._GetReferenceCount = function () {
            var action = _createMethodAction(this.context, this, "_GetReferenceCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        Workbook.prototype._RemoveAllReferences = function () {
            _createMethodAction(this.context, this, "_RemoveAllReferences", 1, [], false);
        };
        Workbook.prototype._RemoveReference = function (bstrReferenceId) {
            _createMethodAction(this.context, this, "_RemoveReference", 1, [bstrReferenceId], false);
        };
        Workbook.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["ReadOnly"])) {
                this._R = obj["ReadOnly"];
            }
            if (!_isUndefined(obj["Saved"])) {
                this._S = obj["Saved"];
            }
            _handleNavigationPropertyResults(this, obj, ["application", "Application", "bindings", "Bindings", "customFunctions", "CustomFunctions", "customXmlParts", "CustomXmlParts", "dataConnections", "DataConnections", "functions", "Functions", "internalTest", "InternalTest", "names", "Names", "pivotTables", "PivotTables", "properties", "Properties", "protection", "Protection", "settings", "Settings", "styles", "Styles", "tables", "Tables", "worksheets", "Worksheets", "_Runtime", "_Runtime", "_V1Api", "_V1Api", "pivotCaches", "PivotCaches"]);
        };
        Workbook.prototype.load = function (option) {
            return _load(this, option);
        };
        Workbook.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        Workbook.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Object.defineProperty(Workbook.prototype, "onSelectionChanged", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("Workbook.onSelectionChanged", _defaultApiSetName, "1.3", _hostName);
                if (!this.m_selectionChanged) {
                    this.m_selectionChanged = new OfficeExtension.EventHandlers(this.context, this, "SelectionChanged", {
                        registerFunc: function (handlerCallback) {
                            return _this.context.eventRegistration.register(2, "", handlerCallback);
                        },
                        unregisterFunc: function (handlerCallback) {
                            return _this.context.eventRegistration.unregister(2, "", handlerCallback);
                        },
                        eventArgsTransformFunc: function (args) {
                            return OfficeExtension.Utility._createPromiseFromResult({ workbook: _this });
                        }
                    });
                }
                return this.m_selectionChanged;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Workbook.prototype, "_onMessage", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("Workbook._onMessage", _defaultApiSetName, "1.7", _hostName);
                if (!this.m__Message) {
                    this.m__Message = new OfficeExtension.EventHandlers(this.context, this, "_Message", {
                        registerFunc: function (handlerCallback) {
                            return _this.context.eventRegistration.register(5, "", handlerCallback);
                        },
                        unregisterFunc: function (handlerCallback) {
                            return _this.context.eventRegistration.unregister(5, "", handlerCallback);
                        },
                        eventArgsTransformFunc: function (args) {
                            return OfficeExtension.Utility._createPromiseFromResult({
                                entries: args.entries,
                                workbook: _this
                            });
                        }
                    });
                }
                return this.m__Message;
            },
            enumerable: true,
            configurable: true
        });
        Workbook.prototype.toJSON = function () {
            return _toJson(this, {
                "name": this._N,
                "readOnly": this._R,
                "saved": this._S,
            }, {
                "bindings": this._B,
                "customXmlParts": this._Cu,
                "names": this._Na,
                "pivotCaches": this._P,
                "pivotTables": this._Pi,
                "properties": this._Pr,
                "protection": this._Pro,
                "settings": this._Se,
                "styles": this._St,
                "tables": this._T,
                "worksheets": this._W,
            });
        };
        Workbook.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return Workbook;
    }(OfficeExtension.ClientObject));
    Excel.Workbook = Workbook;
    var _typeWorkbookProtection = "WorkbookProtection";
    var WorkbookProtection = (function (_super) {
        __extends(WorkbookProtection, _super);
        function WorkbookProtection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(WorkbookProtection.prototype, "_className", {
            get: function () {
                return "WorkbookProtection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WorkbookProtection.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["protected"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WorkbookProtection.prototype, "protected", {
            get: function () {
                _throwIfNotLoaded("protected", this._P, _typeWorkbookProtection, this._isNull);
                return this._P;
            },
            enumerable: true,
            configurable: true
        });
        WorkbookProtection.prototype.protect = function (password) {
            _createMethodAction(this.context, this, "Protect", 0, [password], false);
        };
        WorkbookProtection.prototype.unprotect = function (password) {
            _createMethodAction(this.context, this, "Unprotect", 0, [password], false);
        };
        WorkbookProtection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Protected"])) {
                this._P = obj["Protected"];
            }
        };
        WorkbookProtection.prototype.load = function (option) {
            return _load(this, option);
        };
        WorkbookProtection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        WorkbookProtection.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        WorkbookProtection.prototype.toJSON = function () {
            return _toJson(this, {
                "protected": this._P,
            }, {});
        };
        WorkbookProtection.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return WorkbookProtection;
    }(OfficeExtension.ClientObject));
    Excel.WorkbookProtection = WorkbookProtection;
    var _typeWorkbookCreated = "WorkbookCreated";
    var WorkbookCreated = (function (_super) {
        __extends(WorkbookCreated, _super);
        function WorkbookCreated() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(WorkbookCreated.prototype, "_className", {
            get: function () {
                return "WorkbookCreated";
            },
            enumerable: true,
            configurable: true
        });
        WorkbookCreated.prototype.open = function () {
            _createMethodAction(this.context, this, "Open", 1, [], false);
        };
        WorkbookCreated.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
        };
        WorkbookCreated.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        WorkbookCreated.prototype.toJSON = function () {
            return _toJson(this, {}, {});
        };
        return WorkbookCreated;
    }(OfficeExtension.ClientObject));
    Excel.WorkbookCreated = WorkbookCreated;
    var _typeWorksheet = "Worksheet";
    var Worksheet = (function (_super) {
        __extends(Worksheet, _super);
        function Worksheet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Worksheet.prototype, "_className", {
            get: function () {
                return "Worksheet";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["name", "id", "position", "visibility", "tabColor", "gridlines", "headings", "standardWidth", "standardHeight"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, false, true, true, true, true, true, true, false];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["charts", "tables", "protection", "pivotTables", "names", "freezePanes", "pageLayout", "visuals"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "charts", {
            get: function () {
                if (!this._C) {
                    this._C = new Excel.ChartCollection(this.context, _createPropertyObjectPath(this.context, this, "Charts", true, false, false));
                }
                this._C._ParentObject = this;
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "freezePanes", {
            get: function () {
                _throwIfApiNotSupported("Worksheet.freezePanes", _defaultApiSetName, "1.7", _hostName);
                if (!this._F) {
                    this._F = new Excel.WorksheetFreezePanes(this.context, _createPropertyObjectPath(this.context, this, "FreezePanes", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "names", {
            get: function () {
                _throwIfApiNotSupported("Worksheet.names", _defaultApiSetName, "1.4", _hostName);
                if (!this._Na) {
                    this._Na = new Excel.NamedItemCollection(this.context, _createPropertyObjectPath(this.context, this, "Names", true, false, false));
                }
                return this._Na;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "pageLayout", {
            get: function () {
                _throwIfApiNotSupported("Worksheet.pageLayout", _defaultApiSetName, "1.8", _hostName);
                if (!this._P) {
                    this._P = new Excel.PageLayout(this.context, _createPropertyObjectPath(this.context, this, "PageLayout", false, false, false));
                }
                return this._P;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "pivotTables", {
            get: function () {
                _throwIfApiNotSupported("Worksheet.pivotTables", _defaultApiSetName, "1.3", _hostName);
                if (!this._Pi) {
                    this._Pi = new Excel.PivotTableCollection(this.context, _createPropertyObjectPath(this.context, this, "PivotTables", true, false, false));
                }
                return this._Pi;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "protection", {
            get: function () {
                _throwIfApiNotSupported("Worksheet.protection", _defaultApiSetName, "1.2", _hostName);
                if (!this._Pr) {
                    this._Pr = new Excel.WorksheetProtection(this.context, _createPropertyObjectPath(this.context, this, "Protection", false, false, false));
                }
                return this._Pr;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "tables", {
            get: function () {
                if (!this.m_tables) {
                    this.m_tables = new Excel.TableCollection(this.context, _createPropertyObjectPath(this.context, this, "Tables", true, false, false));
                }
                this.m_tables._ParentObject = this;
                return this.m_tables;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "visuals", {
            get: function () {
                _throwIfApiNotSupported("Worksheet.visuals", _defaultApiSetName, "99.9", _hostName);
                if (!this._Vi) {
                    this._Vi = new Excel.VisualCollection(this.context, _createPropertyObjectPath(this.context, this, "Visuals", true, false, false));
                }
                return this._Vi;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "gridlines", {
            get: function () {
                _throwIfNotLoaded("gridlines", this._G, _typeWorksheet, this._isNull);
                _throwIfApiNotSupported("Worksheet.gridlines", _defaultApiSetName, "1.7", _hostName);
                return this._G;
            },
            set: function (value) {
                this._G = value;
                _createSetPropertyAction(this.context, this, "Gridlines", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "headings", {
            get: function () {
                _throwIfNotLoaded("headings", this._H, _typeWorksheet, this._isNull);
                _throwIfApiNotSupported("Worksheet.headings", _defaultApiSetName, "1.7", _hostName);
                return this._H;
            },
            set: function (value) {
                this._H = value;
                _createSetPropertyAction(this.context, this, "Headings", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "id", {
            get: function () {
                _throwIfNotLoaded("id", this._I, _typeWorksheet, this._isNull);
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typeWorksheet, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "Name", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "position", {
            get: function () {
                _throwIfNotLoaded("position", this._Po, _typeWorksheet, this._isNull);
                return this._Po;
            },
            set: function (value) {
                this._Po = value;
                _createSetPropertyAction(this.context, this, "Position", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "standardHeight", {
            get: function () {
                _throwIfNotLoaded("standardHeight", this._S, _typeWorksheet, this._isNull);
                _throwIfApiNotSupported("Worksheet.standardHeight", _defaultApiSetName, "1.7", _hostName);
                return this._S;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "standardWidth", {
            get: function () {
                _throwIfNotLoaded("standardWidth", this._St, _typeWorksheet, this._isNull);
                _throwIfApiNotSupported("Worksheet.standardWidth", _defaultApiSetName, "1.7", _hostName);
                return this._St;
            },
            set: function (value) {
                this._St = value;
                _createSetPropertyAction(this.context, this, "StandardWidth", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "tabColor", {
            get: function () {
                _throwIfNotLoaded("tabColor", this._T, _typeWorksheet, this._isNull);
                _throwIfApiNotSupported("Worksheet.tabColor", _defaultApiSetName, "1.7", _hostName);
                return this._T;
            },
            set: function (value) {
                this._T = value;
                _createSetPropertyAction(this.context, this, "TabColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "visibility", {
            get: function () {
                _throwIfNotLoaded("visibility", this._V, _typeWorksheet, this._isNull);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "Visibility", value);
            },
            enumerable: true,
            configurable: true
        });
        Worksheet.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["name", "position", "visibility", "tabColor", "gridlines", "headings", "standardWidth"], ["pageLayout"], [
                "charts",
                "freezePanes",
                "names",
                "pivotTables",
                "protection",
                "tables",
                "visuals"
            ]);
        };
        Worksheet.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        Worksheet.prototype.activate = function () {
            _createMethodAction(this.context, this, "Activate", 1, [], false);
        };
        Worksheet.prototype.calculate = function (markAllDirty) {
            _throwIfApiNotSupported("Worksheet.calculate", _defaultApiSetName, "1.6", _hostName);
            _createMethodAction(this.context, this, "Calculate", 0, [markAllDirty], false);
        };
        Worksheet.prototype.copy = function (positionType, relativeTo) {
            _throwIfApiNotSupported("Worksheet.copy", _defaultApiSetName, "1.7", _hostName);
            return new Excel.Worksheet(this.context, _createMethodObjectPath(this.context, this, "Copy", 0, [positionType, relativeTo], false, false, "_GetAnotherWorksheetById", false));
        };
        Worksheet.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        Worksheet.prototype.getCell = function (row, column) {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetCell", 1, [row, column], false, true, null, false));
        };
        Worksheet.prototype.getNext = function (visibleOnly) {
            _throwIfApiNotSupported("Worksheet.getNext", _defaultApiSetName, "1.5", _hostName);
            return new Excel.Worksheet(this.context, _createMethodObjectPath(this.context, this, "GetNext", 1, [visibleOnly], false, true, "_GetSheetById", false));
        };
        Worksheet.prototype.getNextOrNullObject = function (visibleOnly) {
            _throwIfApiNotSupported("Worksheet.getNextOrNullObject", _defaultApiSetName, "1.5", _hostName);
            return new Excel.Worksheet(this.context, _createMethodObjectPath(this.context, this, "GetNextOrNullObject", 1, [visibleOnly], false, true, "_GetSheetById", false));
        };
        Worksheet.prototype.getPrevious = function (visibleOnly) {
            _throwIfApiNotSupported("Worksheet.getPrevious", _defaultApiSetName, "1.5", _hostName);
            return new Excel.Worksheet(this.context, _createMethodObjectPath(this.context, this, "GetPrevious", 1, [visibleOnly], false, true, "_GetSheetById", false));
        };
        Worksheet.prototype.getPreviousOrNullObject = function (visibleOnly) {
            _throwIfApiNotSupported("Worksheet.getPreviousOrNullObject", _defaultApiSetName, "1.5", _hostName);
            return new Excel.Worksheet(this.context, _createMethodObjectPath(this.context, this, "GetPreviousOrNullObject", 1, [visibleOnly], false, true, "_GetSheetById", false));
        };
        Worksheet.prototype.getRange = function (address) {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1, [address], false, true, null, false));
        };
        Worksheet.prototype.getRangeByIndexes = function (startRow, startColumn, rowCount, columnCount) {
            _throwIfApiNotSupported("Worksheet.getRangeByIndexes", _defaultApiSetName, "1.7", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRangeByIndexes", 1, [startRow, startColumn, rowCount, columnCount], false, true, null, false));
        };
        Worksheet.prototype.getUsedRange = function (valuesOnly) {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetUsedRange", 1, [valuesOnly], false, true, null, false));
        };
        Worksheet.prototype.getUsedRangeOrNullObject = function (valuesOnly) {
            _throwIfApiNotSupported("Worksheet.getUsedRangeOrNullObject", _defaultApiSetName, "1.4", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetUsedRangeOrNullObject", 1, [valuesOnly], false, true, null, false));
        };
        Worksheet.prototype._GetAnotherWorksheetById = function (id) {
            _throwIfApiNotSupported("Worksheet._GetAnotherWorksheetById", _defaultApiSetName, "1.7", _hostName);
            return new Excel.Worksheet(this.context, _createMethodObjectPath(this.context, this, "_GetAnotherWorksheetById", 0, [id], false, false, null, false));
        };
        Worksheet.prototype._GetSheetById = function (id) {
            _throwIfApiNotSupported("Worksheet._GetSheetById", _defaultApiSetName, "1.7", _hostName);
            return new Excel.Worksheet(this.context, _createMethodObjectPath(this.context, this, "_GetSheetById", 1, [id], false, false, null, false));
        };
        Worksheet.prototype._RegisterActivatedEvent = function () {
            _throwIfApiNotSupported("Worksheet._RegisterActivatedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterActivatedEvent", 0, [], false);
        };
        Worksheet.prototype._RegisterDataChangedEvent = function () {
            _throwIfApiNotSupported("Worksheet._RegisterDataChangedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterDataChangedEvent", 0, [], false);
        };
        Worksheet.prototype._RegisterDeactivatedEvent = function () {
            _throwIfApiNotSupported("Worksheet._RegisterDeactivatedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterDeactivatedEvent", 0, [], false);
        };
        Worksheet.prototype._RegisterSelectionChangedEvent = function () {
            _throwIfApiNotSupported("Worksheet._RegisterSelectionChangedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterSelectionChangedEvent", 0, [], false);
        };
        Worksheet.prototype._UnregisterActivatedEvent = function () {
            _throwIfApiNotSupported("Worksheet._UnregisterActivatedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterActivatedEvent", 0, [], false);
        };
        Worksheet.prototype._UnregisterDataChangedEvent = function () {
            _throwIfApiNotSupported("Worksheet._UnregisterDataChangedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterDataChangedEvent", 0, [], false);
        };
        Worksheet.prototype._UnregisterDeactivatedEvent = function () {
            _throwIfApiNotSupported("Worksheet._UnregisterDeactivatedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterDeactivatedEvent", 0, [], false);
        };
        Worksheet.prototype._UnregisterSelectionChangedEvent = function () {
            _throwIfApiNotSupported("Worksheet._UnregisterSelectionChangedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterSelectionChangedEvent", 0, [], false);
        };
        Worksheet.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Gridlines"])) {
                this._G = obj["Gridlines"];
            }
            if (!_isUndefined(obj["Headings"])) {
                this._H = obj["Headings"];
            }
            if (!_isUndefined(obj["Id"])) {
                this._I = obj["Id"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["Position"])) {
                this._Po = obj["Position"];
            }
            if (!_isUndefined(obj["StandardHeight"])) {
                this._S = obj["StandardHeight"];
            }
            if (!_isUndefined(obj["StandardWidth"])) {
                this._St = obj["StandardWidth"];
            }
            if (!_isUndefined(obj["TabColor"])) {
                this._T = obj["TabColor"];
            }
            if (!_isUndefined(obj["Visibility"])) {
                this._V = obj["Visibility"];
            }
            _handleNavigationPropertyResults(this, obj, ["charts", "Charts", "freezePanes", "FreezePanes", "names", "Names", "pageLayout", "PageLayout", "pivotTables", "PivotTables", "protection", "Protection", "tables", "Tables", "visuals", "Visuals"]);
        };
        Worksheet.prototype.load = function (option) {
            return _load(this, option);
        };
        Worksheet.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        Worksheet.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["Id"])) {
                this._I = value["Id"];
            }
        };
        Worksheet.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Object.defineProperty(Worksheet.prototype, "onActivated", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("Worksheet.onActivated", _defaultApiSetName, "1.7", _hostName);
                if (!this.m_activated) {
                    this.m_activated = new OfficeExtension.GenericEventHandlers(this.context, this, "Activated", {
                        eventType: 11,
                        registerFunc: function () { _this._RegisterActivatedEvent(); },
                        unregisterFunc: function () { _this._UnregisterActivatedEvent(); },
                        getTargetIdFunc: function () { return _this.id; },
                        eventArgsTransformFunc: function (value) {
                            var event = {
                                type: EventType.worksheetActivated,
                                worksheetId: value.worksheetId
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(event);
                        }
                    });
                }
                return this.m_activated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "onCalculated", {
            get: function () {
                _throwIfApiNotSupported("Worksheet.onCalculated", _defaultApiSetName, "1.8", _hostName);
                if (!this.m_calculated) {
                    this.m_calculated = new OfficeExtension.GenericEventHandlers(this.context, this, "Calculated", {
                        eventType: 16,
                        registerFunc: function () { return null; },
                        unregisterFunc: function () { return null; },
                        getTargetIdFunc: null,
                        eventArgsTransformFunc: function (value) {
                            return null;
                        }
                    });
                }
                return this.m_calculated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "onDataChanged", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("Worksheet.onDataChanged", _defaultApiSetName, "1.7", _hostName);
                if (!this.m_dataChanged) {
                    this.m_dataChanged = new OfficeExtension.GenericEventHandlers(this.context, this, "DataChanged", {
                        eventType: 10,
                        registerFunc: function () { return _this._RegisterDataChangedEvent(); },
                        unregisterFunc: function () { return _this._UnregisterDataChangedEvent(); },
                        getTargetIdFunc: function () { return _this.id; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                type: EventType.worksheetDataChanged,
                                changeType: value.changeType,
                                source: value.source,
                                worksheetId: _this.id,
                                address: value.address
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_dataChanged;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "onDeactivated", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("Worksheet.onDeactivated", _defaultApiSetName, "1.7", _hostName);
                if (!this.m_deactivated) {
                    this.m_deactivated = new OfficeExtension.GenericEventHandlers(this.context, this, "Deactivated", {
                        eventType: 12,
                        registerFunc: function () { _this._RegisterDeactivatedEvent(); },
                        unregisterFunc: function () { _this._UnregisterDeactivatedEvent(); },
                        getTargetIdFunc: function () { return _this.id; },
                        eventArgsTransformFunc: function (value) {
                            var event = {
                                type: EventType.worksheetDeactivated,
                                worksheetId: value.worksheetId
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(event);
                        }
                    });
                }
                return this.m_deactivated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Worksheet.prototype, "onSelectionChanged", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("Worksheet.onSelectionChanged", _defaultApiSetName, "1.7", _hostName);
                if (!this.m_selectionChanged) {
                    this.m_selectionChanged = new OfficeExtension.GenericEventHandlers(this.context, this, "SelectionChanged", {
                        eventType: 14,
                        registerFunc: function () { return _this._RegisterSelectionChangedEvent(); },
                        unregisterFunc: function () { return _this._UnregisterSelectionChangedEvent(); },
                        getTargetIdFunc: function () { return _this.id; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                type: EventType.worksheetSelectionChanged,
                                worksheetId: _this.id,
                                address: value.address
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_selectionChanged;
            },
            enumerable: true,
            configurable: true
        });
        Worksheet.prototype.toJSON = function () {
            return _toJson(this, {
                "gridlines": this._G,
                "headings": this._H,
                "id": this._I,
                "name": this._N,
                "position": this._Po,
                "standardHeight": this._S,
                "standardWidth": this._St,
                "tabColor": this._T,
                "visibility": this._V,
            }, {
                "charts": this._C,
                "names": this._Na,
                "pageLayout": this._P,
                "pivotTables": this._Pi,
                "protection": this._Pr,
                "tables": this.m_tables,
                "visuals": this._Vi,
            });
        };
        Worksheet.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return Worksheet;
    }(OfficeExtension.ClientObject));
    Excel.Worksheet = Worksheet;
    var _typeWorksheetCollection = "WorksheetCollection";
    var WorksheetCollection = (function (_super) {
        __extends(WorksheetCollection, _super);
        function WorksheetCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(WorksheetCollection.prototype, "_className", {
            get: function () {
                return "WorksheetCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WorksheetCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WorksheetCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeWorksheetCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        WorksheetCollection.prototype.add = function (name) {
            return new Excel.Worksheet(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [name], false, true, null, false));
        };
        WorksheetCollection.prototype.getActiveWorksheet = function () {
            return new Excel.Worksheet(this.context, _createMethodObjectPath(this.context, this, "GetActiveWorksheet", 1, [], false, false, null, false));
        };
        WorksheetCollection.prototype.getCount = function (visibleOnly) {
            _throwIfApiNotSupported("WorksheetCollection.getCount", _defaultApiSetName, "1.4", _hostName);
            var action = _createMethodAction(this.context, this, "GetCount", 1, [visibleOnly], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        WorksheetCollection.prototype.getFirst = function (visibleOnly) {
            _throwIfApiNotSupported("WorksheetCollection.getFirst", _defaultApiSetName, "1.5", _hostName);
            return new Excel.Worksheet(this.context, _createMethodObjectPath(this.context, this, "GetFirst", 1, [visibleOnly], false, true, null, false));
        };
        WorksheetCollection.prototype.getItem = function (key) {
            return new Excel.Worksheet(this.context, _createIndexerObjectPath(this.context, this, [key]));
        };
        WorksheetCollection.prototype.getItemOrNullObject = function (key) {
            _throwIfApiNotSupported("WorksheetCollection.getItemOrNullObject", _defaultApiSetName, "1.4", _hostName);
            return new Excel.Worksheet(this.context, _createMethodObjectPath(this.context, this, "GetItemOrNullObject", 1, [key], false, false, null, false));
        };
        WorksheetCollection.prototype.getLast = function (visibleOnly) {
            _throwIfApiNotSupported("WorksheetCollection.getLast", _defaultApiSetName, "1.5", _hostName);
            return new Excel.Worksheet(this.context, _createMethodObjectPath(this.context, this, "GetLast", 1, [visibleOnly], false, true, null, false));
        };
        WorksheetCollection.prototype._RegisterActivatedEvent = function () {
            _throwIfApiNotSupported("WorksheetCollection._RegisterActivatedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterActivatedEvent", 0, [], false);
        };
        WorksheetCollection.prototype._RegisterAddedEvent = function () {
            _throwIfApiNotSupported("WorksheetCollection._RegisterAddedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterAddedEvent", 0, [], false);
        };
        WorksheetCollection.prototype._RegisterDeactivatedEvent = function () {
            _throwIfApiNotSupported("WorksheetCollection._RegisterDeactivatedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterDeactivatedEvent", 0, [], false);
        };
        WorksheetCollection.prototype._RegisterDeletedEvent = function () {
            _throwIfApiNotSupported("WorksheetCollection._RegisterDeletedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterDeletedEvent", 0, [], false);
        };
        WorksheetCollection.prototype._UnregisterActivatedEvent = function () {
            _throwIfApiNotSupported("WorksheetCollection._UnregisterActivatedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterActivatedEvent", 0, [], false);
        };
        WorksheetCollection.prototype._UnregisterAddedEvent = function () {
            _throwIfApiNotSupported("WorksheetCollection._UnregisterAddedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterAddedEvent", 0, [], false);
        };
        WorksheetCollection.prototype._UnregisterDeactivatedEvent = function () {
            _throwIfApiNotSupported("WorksheetCollection._UnregisterDeactivatedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterDeactivatedEvent", 0, [], false);
        };
        WorksheetCollection.prototype._UnregisterDeletedEvent = function () {
            _throwIfApiNotSupported("WorksheetCollection._UnregisterDeletedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterDeletedEvent", 0, [], false);
        };
        WorksheetCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.Worksheet(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        WorksheetCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        WorksheetCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        WorksheetCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.Worksheet(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        Object.defineProperty(WorksheetCollection.prototype, "onActivated", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("WorksheetCollection.onActivated", _defaultApiSetName, "1.7", _hostName);
                if (!this.m_activated) {
                    this.m_activated = new OfficeExtension.GenericEventHandlers(this.context, this, "Activated", {
                        eventType: 11,
                        registerFunc: function () { return _this._RegisterActivatedEvent(); },
                        unregisterFunc: function () { return _this._UnregisterActivatedEvent(); },
                        getTargetIdFunc: function () { return OfficeExtension.Constants.eventWorkbookId; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                type: EventType.worksheetActivated,
                                worksheetId: value.worksheetId
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_activated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WorksheetCollection.prototype, "onAdded", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("WorksheetCollection.onAdded", _defaultApiSetName, "1.7", _hostName);
                if (!this.m_added) {
                    this.m_added = new OfficeExtension.GenericEventHandlers(this.context, this, "Added", {
                        eventType: 13,
                        registerFunc: function () { return _this._RegisterAddedEvent(); },
                        unregisterFunc: function () { return _this._UnregisterAddedEvent(); },
                        getTargetIdFunc: function () { return OfficeExtension.Constants.eventWorkbookId; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                type: EventType.worksheetAdded,
                                source: value.source,
                                worksheetId: value.worksheetId
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_added;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WorksheetCollection.prototype, "onCalculated", {
            get: function () {
                _throwIfApiNotSupported("WorksheetCollection.onCalculated", _defaultApiSetName, "1.8", _hostName);
                if (!this.m_calculated) {
                    this.m_calculated = new OfficeExtension.GenericEventHandlers(this.context, this, "Calculated", {
                        eventType: 16,
                        registerFunc: function () { return null; },
                        unregisterFunc: function () { return null; },
                        getTargetIdFunc: null,
                        eventArgsTransformFunc: function (value) {
                            return null;
                        }
                    });
                }
                return this.m_calculated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WorksheetCollection.prototype, "onDeactivated", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("WorksheetCollection.onDeactivated", _defaultApiSetName, "1.7", _hostName);
                if (!this.m_deactivated) {
                    this.m_deactivated = new OfficeExtension.GenericEventHandlers(this.context, this, "Deactivated", {
                        eventType: 12,
                        registerFunc: function () { return _this._RegisterDeactivatedEvent(); },
                        unregisterFunc: function () { return _this._UnregisterDeactivatedEvent(); },
                        getTargetIdFunc: function () { return OfficeExtension.Constants.eventWorkbookId; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                type: EventType.worksheetDeactivated,
                                worksheetId: value.worksheetId
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_deactivated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WorksheetCollection.prototype, "onDeleted", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("WorksheetCollection.onDeleted", _defaultApiSetName, "1.8", _hostName);
                if (!this.m_deleted) {
                    this.m_deleted = new OfficeExtension.GenericEventHandlers(this.context, this, "Deleted", {
                        eventType: 15,
                        registerFunc: function () { return _this._RegisterDeletedEvent(); },
                        unregisterFunc: function () { return _this._UnregisterDeletedEvent(); },
                        getTargetIdFunc: function () { return OfficeExtension.Constants.eventWorkbookId; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                type: EventType.worksheetDeleted,
                                source: value.source,
                                worksheetId: value.worksheetId
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_deleted;
            },
            enumerable: true,
            configurable: true
        });
        WorksheetCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return WorksheetCollection;
    }(OfficeExtension.ClientObject));
    Excel.WorksheetCollection = WorksheetCollection;
    var _typeWorksheetProtection = "WorksheetProtection";
    var WorksheetProtection = (function (_super) {
        __extends(WorksheetProtection, _super);
        function WorksheetProtection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(WorksheetProtection.prototype, "_className", {
            get: function () {
                return "WorksheetProtection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WorksheetProtection.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["protected", "options"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WorksheetProtection.prototype, "options", {
            get: function () {
                _throwIfNotLoaded("options", this._O, _typeWorksheetProtection, this._isNull);
                return this._O;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WorksheetProtection.prototype, "protected", {
            get: function () {
                _throwIfNotLoaded("protected", this._P, _typeWorksheetProtection, this._isNull);
                return this._P;
            },
            enumerable: true,
            configurable: true
        });
        WorksheetProtection.prototype.protect = function (options, password) {
            if (versionNumberIsEarlierThan(16, 0, 8716)) {
                _createMethodAction(this.context, this, "Protect", 0, [options], false);
                return;
            }
            _createMethodAction(this.context, this, "Protect", 0, [options, password], false);
        };
        WorksheetProtection.prototype.unprotect = function (password) {
            _createMethodAction(this.context, this, "Unprotect", 0, [password], false);
        };
        WorksheetProtection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Options"])) {
                this._O = obj["Options"];
            }
            if (!_isUndefined(obj["Protected"])) {
                this._P = obj["Protected"];
            }
        };
        WorksheetProtection.prototype.load = function (option) {
            return _load(this, option);
        };
        WorksheetProtection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        WorksheetProtection.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        WorksheetProtection.prototype.toJSON = function () {
            return _toJson(this, {
                "options": this._O,
                "protected": this._P,
            }, {});
        };
        WorksheetProtection.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return WorksheetProtection;
    }(OfficeExtension.ClientObject));
    Excel.WorksheetProtection = WorksheetProtection;
    var _typeWorksheetFreezePanes = "WorksheetFreezePanes";
    var WorksheetFreezePanes = (function (_super) {
        __extends(WorksheetFreezePanes, _super);
        function WorksheetFreezePanes() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(WorksheetFreezePanes.prototype, "_className", {
            get: function () {
                return "WorksheetFreezePanes";
            },
            enumerable: true,
            configurable: true
        });
        WorksheetFreezePanes.prototype.freezeAt = function (frozenRange) {
            _createMethodAction(this.context, this, "FreezeAt", 0, [frozenRange], false);
        };
        WorksheetFreezePanes.prototype.freezeColumns = function (count) {
            _createMethodAction(this.context, this, "FreezeColumns", 0, [count], false);
        };
        WorksheetFreezePanes.prototype.freezeRows = function (count) {
            _createMethodAction(this.context, this, "FreezeRows", 0, [count], false);
        };
        WorksheetFreezePanes.prototype.getLocation = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetLocation", 1, [], false, true, null, false));
        };
        WorksheetFreezePanes.prototype.getLocationOrNullObject = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetLocationOrNullObject", 1, [], false, true, null, false));
        };
        WorksheetFreezePanes.prototype.unfreeze = function () {
            _createMethodAction(this.context, this, "Unfreeze", 0, [], false);
        };
        WorksheetFreezePanes.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
        };
        WorksheetFreezePanes.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        WorksheetFreezePanes.prototype.toJSON = function () {
            return _toJson(this, {}, {});
        };
        return WorksheetFreezePanes;
    }(OfficeExtension.ClientObject));
    Excel.WorksheetFreezePanes = WorksheetFreezePanes;
    var _typeRange = "Range";
    var Range = (function (_super) {
        __extends(Range, _super);
        function Range() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Range.prototype, "_className", {
            get: function () {
                return "Range";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["numberFormat", "numberFormatLocal", "values", "text", "formulas", "formulasLocal", "rowIndex", "columnIndex", "rowCount", "columnCount", "address", "addressLocal", "cellCount", "_ReferenceId", "valueTypes", "formulasR1C1", "hidden", "rowHidden", "columnHidden", "isEntireColumn", "isEntireRow", "hyperlink", "style"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, false, true, true, false, false, false, false, false, false, false, false, false, true, false, true, true, false, false, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["format", "worksheet", "sort", "conditionalFormats", "dataValidation", "areas"];
            },
            enumerable: true,
            configurable: true
        });
        Range.prototype._ensureInteger = function (num, methodName) {
            if (!(typeof num === "number" && isFinite(num) && Math.floor(num) === num)) {
                OfficeExtension.Utility.throwError(Excel.ErrorCodes.invalidArgument, num, methodName);
            }
        };
        Range.prototype._getAdjacentRange = function (functionName, count, referenceRange, rowDirection, columnDirection) {
            if (count == null) {
                count = 1;
            }
            this._ensureInteger(count, functionName);
            var startRange;
            var rowOffset = 0;
            var columnOffset = 0;
            if (count > 0) {
                startRange = referenceRange.getOffsetRange(rowDirection, columnDirection);
            }
            else {
                startRange = referenceRange;
                rowOffset = rowDirection;
                columnOffset = columnDirection;
            }
            if (Math.abs(count) == 1) {
                return startRange;
            }
            return startRange.getBoundingRect(referenceRange.getOffsetRange(rowDirection * count + rowOffset, columnDirection * count + columnOffset));
        };
        Object.defineProperty(Range.prototype, "areas", {
            get: function () {
                _throwIfApiNotSupported("Range.areas", _defaultApiSetName, "1.8", _hostName);
                if (!this._Ar) {
                    this._Ar = new Excel.AreaCollection(this.context, _createPropertyObjectPath(this.context, this, "Areas", true, false, false));
                }
                return this._Ar;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "conditionalFormats", {
            get: function () {
                _throwIfApiNotSupported("Range.conditionalFormats", _defaultApiSetName, "1.6", _hostName);
                if (!this._Con) {
                    this._Con = new Excel.ConditionalFormatCollection(this.context, _createPropertyObjectPath(this.context, this, "ConditionalFormats", true, false, false));
                }
                return this._Con;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "dataValidation", {
            get: function () {
                _throwIfApiNotSupported("Range.dataValidation", _defaultApiSetName, "1.7", _hostName);
                if (!this._D) {
                    this._D = new Excel.DataValidation(this.context, _createPropertyObjectPath(this.context, this, "DataValidation", false, false, false));
                }
                return this._D;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.RangeFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "sort", {
            get: function () {
                _throwIfApiNotSupported("Range.sort", _defaultApiSetName, "1.2", _hostName);
                if (!this._S) {
                    this._S = new Excel.RangeSort(this.context, _createPropertyObjectPath(this.context, this, "Sort", false, false, false));
                }
                return this._S;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "worksheet", {
            get: function () {
                if (!this._W) {
                    this._W = new Excel.Worksheet(this.context, _createPropertyObjectPath(this.context, this, "Worksheet", false, false, false));
                }
                return this._W;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "address", {
            get: function () {
                _throwIfNotLoaded("address", this._A, _typeRange, this._isNull);
                return this._A;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "addressLocal", {
            get: function () {
                _throwIfNotLoaded("addressLocal", this._Ad, _typeRange, this._isNull);
                return this._Ad;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "cellCount", {
            get: function () {
                _throwIfNotLoaded("cellCount", this._C, _typeRange, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "columnCount", {
            get: function () {
                _throwIfNotLoaded("columnCount", this._Co, _typeRange, this._isNull);
                return this._Co;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "columnHidden", {
            get: function () {
                _throwIfNotLoaded("columnHidden", this._Col, _typeRange, this._isNull);
                _throwIfApiNotSupported("Range.columnHidden", _defaultApiSetName, "1.2", _hostName);
                return this._Col;
            },
            set: function (value) {
                this._Col = value;
                _createSetPropertyAction(this.context, this, "ColumnHidden", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "columnIndex", {
            get: function () {
                _throwIfNotLoaded("columnIndex", this._Colu, _typeRange, this._isNull);
                return this._Colu;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "formulas", {
            get: function () {
                _throwIfNotLoaded("formulas", this.m_formulas, _typeRange, this._isNull);
                return this.m_formulas;
            },
            set: function (value) {
                this.m_formulas = value;
                if (setRangePropertiesInBulk(this, "Formulas", value)) {
                    return;
                }
                this.m_formulas = value;
                _createSetPropertyAction(this.context, this, "Formulas", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "formulasLocal", {
            get: function () {
                _throwIfNotLoaded("formulasLocal", this.m_formulasLocal, _typeRange, this._isNull);
                return this.m_formulasLocal;
            },
            set: function (value) {
                this.m_formulasLocal = value;
                if (setRangePropertiesInBulk(this, "FormulasLocal", value)) {
                    return;
                }
                this.m_formulasLocal = value;
                _createSetPropertyAction(this.context, this, "FormulasLocal", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "formulasR1C1", {
            get: function () {
                _throwIfNotLoaded("formulasR1C1", this.m_formulasR1C1, _typeRange, this._isNull);
                _throwIfApiNotSupported("Range.formulasR1C1", _defaultApiSetName, "1.2", _hostName);
                return this.m_formulasR1C1;
            },
            set: function (value) {
                this.m_formulasR1C1 = value;
                if (setRangePropertiesInBulk(this, "FormulasR1C1", value)) {
                    return;
                }
                this.m_formulasR1C1 = value;
                _createSetPropertyAction(this.context, this, "FormulasR1C1", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "hidden", {
            get: function () {
                _throwIfNotLoaded("hidden", this._H, _typeRange, this._isNull);
                _throwIfApiNotSupported("Range.hidden", _defaultApiSetName, "1.2", _hostName);
                return this._H;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "hyperlink", {
            get: function () {
                _throwIfNotLoaded("hyperlink", this._Hy, _typeRange, this._isNull);
                _throwIfApiNotSupported("Range.hyperlink", _defaultApiSetName, "1.7", _hostName);
                return this._Hy;
            },
            set: function (value) {
                this._Hy = value;
                _createSetPropertyAction(this.context, this, "Hyperlink", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "numberFormat", {
            get: function () {
                _throwIfNotLoaded("numberFormat", this.m_numberFormat, _typeRange, this._isNull);
                return this.m_numberFormat;
            },
            set: function (value) {
                this.m_numberFormat = value;
                if (setRangePropertiesInBulk(this, "NumberFormat", value)) {
                    return;
                }
                this.m_numberFormat = value;
                _createSetPropertyAction(this.context, this, "NumberFormat", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "numberFormatLocal", {
            get: function () {
                _throwIfNotLoaded("numberFormatLocal", this._N, _typeRange, this._isNull);
                _throwIfApiNotSupported("Range.numberFormatLocal", _defaultApiSetName, "1.7", _hostName);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "NumberFormatLocal", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "rowCount", {
            get: function () {
                _throwIfNotLoaded("rowCount", this._R, _typeRange, this._isNull);
                return this._R;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "rowHidden", {
            get: function () {
                _throwIfNotLoaded("rowHidden", this._Ro, _typeRange, this._isNull);
                _throwIfApiNotSupported("Range.rowHidden", _defaultApiSetName, "1.2", _hostName);
                return this._Ro;
            },
            set: function (value) {
                this._Ro = value;
                _createSetPropertyAction(this.context, this, "RowHidden", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "rowIndex", {
            get: function () {
                _throwIfNotLoaded("rowIndex", this._Row, _typeRange, this._isNull);
                return this._Row;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "style", {
            get: function () {
                _throwIfNotLoaded("style", this._St, _typeRange, this._isNull);
                _throwIfApiNotSupported("Range.style", _defaultApiSetName, "1.7", _hostName);
                return this._St;
            },
            set: function (value) {
                this._St = value;
                _createSetPropertyAction(this.context, this, "Style", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "text", {
            get: function () {
                _throwIfNotLoaded("text", this._T, _typeRange, this._isNull);
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "valueTypes", {
            get: function () {
                _throwIfNotLoaded("valueTypes", this._V, _typeRange, this._isNull);
                return this._V;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "values", {
            get: function () {
                _throwIfNotLoaded("values", this.m_values, _typeRange, this._isNull);
                return this.m_values;
            },
            set: function (value) {
                this.m_values = value;
                if (setRangePropertiesInBulk(this, "Values", value)) {
                    return;
                }
                this.m_values = value;
                _createSetPropertyAction(this.context, this, "Values", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "_ReferenceId", {
            get: function () {
                _throwIfNotLoaded("_ReferenceId", this.__R, _typeRange, this._isNull);
                return this.__R;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "isEntireColumn", {
            get: function () {
                _throwIfNotLoaded("isEntireColumn", this._i, _typeRange, this._isNull);
                _throwIfApiNotSupported("Range.isEntireColumn", _defaultApiSetName, "1.7", _hostName);
                return this._i;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "isEntireRow", {
            get: function () {
                _throwIfNotLoaded("isEntireRow", this._is, _typeRange, this._isNull);
                _throwIfApiNotSupported("Range.isEntireRow", _defaultApiSetName, "1.7", _hostName);
                return this._is;
            },
            enumerable: true,
            configurable: true
        });
        Range.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["numberFormat", "numberFormatLocal", "values", "formulas", "formulasLocal", "formulasR1C1", "rowHidden", "columnHidden", "hyperlink", "style"], ["format", "dataValidation"], [
                "areas",
                "conditionalFormats",
                "sort",
                "worksheet"
            ]);
        };
        Range.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        Range.prototype.calculate = function () {
            _throwIfApiNotSupported("Range.calculate", _defaultApiSetName, "1.6", _hostName);
            _createMethodAction(this.context, this, "Calculate", 0, [], false);
        };
        Range.prototype.clear = function (applyTo) {
            _createMethodAction(this.context, this, "Clear", 0, [applyTo], false);
        };
        Range.prototype.delete = function (shift) {
            _createMethodAction(this.context, this, "Delete", 0, [shift], false);
        };
        Range.prototype.getAbsoluteResizedRange = function (numRows, numColumns) {
            _throwIfApiNotSupported("Range.getAbsoluteResizedRange", _defaultApiSetName, "1.7", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetAbsoluteResizedRange", 1, [numRows, numColumns], false, true, null, false));
        };
        Range.prototype.getBoundingRect = function (anotherRange) {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetBoundingRect", 1, [anotherRange], false, true, null, false));
        };
        Range.prototype.getCell = function (row, column) {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetCell", 1, [row, column], false, true, null, false));
        };
        Range.prototype.getColumn = function (column) {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetColumn", 1, [column], false, true, null, false));
        };
        Range.prototype.getColumnsAfter = function (count) {
            if (!isExcel1_3OrAbove()) {
                if (count == null) {
                    count = 1;
                }
                this._ensureInteger(count, "RowsAbove");
                if (count == 0) {
                    OfficeExtension.Utility.throwError(Excel.ErrorCodes.invalidArgument, "count", "RowsAbove");
                }
                return this._getAdjacentRange("getColumnsAfter", count, this.getLastColumn(), 0, 1);
            }
            _throwIfApiNotSupported("Range.getColumnsAfter", _defaultApiSetName, "1.3", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetColumnsAfter", 1, [count], false, true, null, false));
        };
        Range.prototype.getColumnsBefore = function (count) {
            if (!isExcel1_3OrAbove()) {
                if (count == null) {
                    count = 1;
                }
                this._ensureInteger(count, "RowsAbove");
                if (count == 0) {
                    OfficeExtension.Utility.throwError(Excel.ErrorCodes.invalidArgument, "count", "RowsAbove");
                }
                return this._getAdjacentRange("getColumnsBefore", count, this.getColumn(0), 0, -1);
            }
            _throwIfApiNotSupported("Range.getColumnsBefore", _defaultApiSetName, "1.3", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetColumnsBefore", 1, [count], false, true, null, false));
        };
        Range.prototype.getEntireColumn = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetEntireColumn", 1, [], false, true, null, false));
        };
        Range.prototype.getEntireRow = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetEntireRow", 1, [], false, true, null, false));
        };
        Range.prototype.getImage = function () {
            _throwIfApiNotSupported("Range.getImage", _defaultApiSetName, "1.7", _hostName);
            var action = _createMethodAction(this.context, this, "GetImage", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        Range.prototype.getIntersection = function (anotherRange) {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetIntersection", 1, [anotherRange], false, true, null, false));
        };
        Range.prototype.getIntersectionOrNullObject = function (anotherRange) {
            _throwIfApiNotSupported("Range.getIntersectionOrNullObject", _defaultApiSetName, "1.4", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetIntersectionOrNullObject", 1, [anotherRange], false, true, null, false));
        };
        Range.prototype.getLastCell = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetLastCell", 1, [], false, true, null, false));
        };
        Range.prototype.getLastColumn = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetLastColumn", 1, [], false, true, null, false));
        };
        Range.prototype.getLastRow = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetLastRow", 1, [], false, true, null, false));
        };
        Range.prototype.getOffsetRange = function (rowOffset, columnOffset) {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetOffsetRange", 1, [rowOffset, columnOffset], false, true, null, false));
        };
        Range.prototype.getResizedRange = function (deltaRows, deltaColumns) {
            if (!isExcel1_3OrAbove()) {
                this._ensureInteger(deltaRows, "getResizedRange");
                this._ensureInteger(deltaColumns, "getResizedRange");
                var referenceRange = (deltaRows >= 0 && deltaColumns >= 0) ? this : this.getCell(0, 0);
                return referenceRange.getBoundingRect(this.getLastCell().getOffsetRange(deltaRows, deltaColumns));
            }
            _throwIfApiNotSupported("Range.getResizedRange", _defaultApiSetName, "1.3", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetResizedRange", 1, [deltaRows, deltaColumns], false, true, null, false));
        };
        Range.prototype.getRow = function (row) {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRow", 1, [row], false, true, null, false));
        };
        Range.prototype.getRowsAbove = function (count) {
            if (!isExcel1_3OrAbove()) {
                if (count == null) {
                    count = 1;
                }
                this._ensureInteger(count, "RowsAbove");
                if (count == 0) {
                    OfficeExtension.Utility.throwError(Excel.ErrorCodes.invalidArgument, "count", "RowsAbove");
                }
                return this._getAdjacentRange("getRowsAbove", count, this.getRow(0), -1, 0);
            }
            _throwIfApiNotSupported("Range.getRowsAbove", _defaultApiSetName, "1.3", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRowsAbove", 1, [count], false, true, null, false));
        };
        Range.prototype.getRowsBelow = function (count) {
            if (!isExcel1_3OrAbove()) {
                if (count == null) {
                    count = 1;
                }
                this._ensureInteger(count, "RowsAbove");
                if (count == 0) {
                    OfficeExtension.Utility.throwError(Excel.ErrorCodes.invalidArgument, "count", "RowsAbove");
                }
                return this._getAdjacentRange("getRowsBelow", count, this.getLastRow(), 1, 0);
            }
            _throwIfApiNotSupported("Range.getRowsBelow", _defaultApiSetName, "1.3", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRowsBelow", 1, [count], false, true, null, false));
        };
        Range.prototype.getSurroundingRegion = function () {
            _throwIfApiNotSupported("Range.getSurroundingRegion", _defaultApiSetName, "1.7", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetSurroundingRegion", 1, [], false, true, null, false));
        };
        Range.prototype.getUsedRange = function (valuesOnly) {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetUsedRange", 1, [valuesOnly], false, true, null, false));
        };
        Range.prototype.getUsedRangeOrNullObject = function (valuesOnly) {
            _throwIfApiNotSupported("Range.getUsedRangeOrNullObject", _defaultApiSetName, "1.4", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetUsedRangeOrNullObject", 1, [valuesOnly], false, true, null, false));
        };
        Range.prototype.getVisibleView = function () {
            _throwIfApiNotSupported("Range.getVisibleView", _defaultApiSetName, "1.3", _hostName);
            return new Excel.RangeView(this.context, _createMethodObjectPath(this.context, this, "GetVisibleView", 1, [], false, false, null, false));
        };
        Range.prototype.insert = function (shift) {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "Insert", 0, [shift], false, true, null, false));
        };
        Range.prototype.merge = function (across) {
            _throwIfApiNotSupported("Range.merge", _defaultApiSetName, "1.2", _hostName);
            _createMethodAction(this.context, this, "Merge", 0, [across], false);
        };
        Range.prototype.select = function () {
            _createMethodAction(this.context, this, "Select", 1, [], false);
        };
        Range.prototype.showCard = function () {
            _throwIfApiNotSupported("Range.showCard", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "ShowCard", 0, [], false);
        };
        Range.prototype.unmerge = function () {
            _throwIfApiNotSupported("Range.unmerge", _defaultApiSetName, "1.2", _hostName);
            _createMethodAction(this.context, this, "Unmerge", 0, [], false);
        };
        Range.prototype._KeepReference = function () {
            _createMethodAction(this.context, this, "_KeepReference", 1, [], false);
        };
        Range.prototype._ValidateArraySize = function (rows, columns) {
            _throwIfApiNotSupported("Range._ValidateArraySize", _defaultApiSetName, "1.3", _hostName);
            _createMethodAction(this.context, this, "_ValidateArraySize", 1, [rows, columns], false);
        };
        Range.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Address"])) {
                this._A = obj["Address"];
            }
            if (!_isUndefined(obj["AddressLocal"])) {
                this._Ad = obj["AddressLocal"];
            }
            if (!_isUndefined(obj["CellCount"])) {
                this._C = obj["CellCount"];
            }
            if (!_isUndefined(obj["ColumnCount"])) {
                this._Co = obj["ColumnCount"];
            }
            if (!_isUndefined(obj["ColumnHidden"])) {
                this._Col = obj["ColumnHidden"];
            }
            if (!_isUndefined(obj["ColumnIndex"])) {
                this._Colu = obj["ColumnIndex"];
            }
            if (!_isUndefined(obj["Formulas"])) {
                this.m_formulas = obj["Formulas"];
            }
            if (!_isUndefined(obj["FormulasLocal"])) {
                this.m_formulasLocal = obj["FormulasLocal"];
            }
            if (!_isUndefined(obj["FormulasR1C1"])) {
                this.m_formulasR1C1 = obj["FormulasR1C1"];
            }
            if (!_isUndefined(obj["Hidden"])) {
                this._H = obj["Hidden"];
            }
            if (!_isUndefined(obj["Hyperlink"])) {
                this._Hy = obj["Hyperlink"];
            }
            if (!_isUndefined(obj["NumberFormat"])) {
                this.m_numberFormat = obj["NumberFormat"];
            }
            if (!_isUndefined(obj["NumberFormatLocal"])) {
                this._N = obj["NumberFormatLocal"];
            }
            if (!_isUndefined(obj["RowCount"])) {
                this._R = obj["RowCount"];
            }
            if (!_isUndefined(obj["RowHidden"])) {
                this._Ro = obj["RowHidden"];
            }
            if (!_isUndefined(obj["RowIndex"])) {
                this._Row = obj["RowIndex"];
            }
            if (!_isUndefined(obj["Style"])) {
                this._St = obj["Style"];
            }
            if (!_isUndefined(obj["Text"])) {
                this._T = obj["Text"];
            }
            if (!_isUndefined(obj["ValueTypes"])) {
                this._V = obj["ValueTypes"];
            }
            if (!_isUndefined(obj["Values"])) {
                this.m_values = obj["Values"];
            }
            if (!_isUndefined(obj["_ReferenceId"])) {
                this.__R = obj["_ReferenceId"];
            }
            if (!_isUndefined(obj["isEntireColumn"])) {
                this._i = obj["isEntireColumn"];
            }
            if (!_isUndefined(obj["isEntireRow"])) {
                this._is = obj["isEntireRow"];
            }
            _handleNavigationPropertyResults(this, obj, ["areas", "Areas", "conditionalFormats", "ConditionalFormats", "dataValidation", "DataValidation", "format", "Format", "sort", "Sort", "worksheet", "Worksheet"]);
        };
        Range.prototype.load = function (option) {
            return _load(this, option);
        };
        Range.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        Range.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_ReferenceId"])) {
                this.__R = value["_ReferenceId"];
            }
        };
        Range.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Range.prototype.track = function () {
            this.context.trackedObjects.add(this);
            return this;
        };
        Range.prototype.untrack = function () {
            this.context.trackedObjects.remove(this);
            return this;
        };
        Range.prototype.toJSON = function () {
            return _toJson(this, {
                "address": this._A,
                "addressLocal": this._Ad,
                "cellCount": this._C,
                "columnCount": this._Co,
                "columnHidden": this._Col,
                "columnIndex": this._Colu,
                "formulas": this.m_formulas,
                "formulasLocal": this.m_formulasLocal,
                "formulasR1C1": this.m_formulasR1C1,
                "hidden": this._H,
                "hyperlink": this._Hy,
                "isEntireColumn": this._i,
                "isEntireRow": this._is,
                "numberFormat": this.m_numberFormat,
                "numberFormatLocal": this._N,
                "rowCount": this._R,
                "rowHidden": this._Ro,
                "rowIndex": this._Row,
                "style": this._St,
                "text": this._T,
                "values": this.m_values,
                "valueTypes": this._V,
            }, {
                "areas": this._Ar,
                "conditionalFormats": this._Con,
                "dataValidation": this._D,
                "format": this._F,
            });
        };
        Range.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return Range;
    }(OfficeExtension.ClientObject));
    Excel.Range = Range;
    var _typeRangeView = "RangeView";
    var RangeView = (function (_super) {
        __extends(RangeView, _super);
        function RangeView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RangeView.prototype, "_className", {
            get: function () {
                return "RangeView";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["numberFormat", "values", "text", "formulas", "formulasLocal", "formulasR1C1", "valueTypes", "rowCount", "columnCount", "cellAddresses", "index"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, false, true, true, true, false, false, false, false, false];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["rows"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "rows", {
            get: function () {
                if (!this._Ro) {
                    this._Ro = new Excel.RangeViewCollection(this.context, _createPropertyObjectPath(this.context, this, "Rows", true, false, false));
                }
                return this._Ro;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "cellAddresses", {
            get: function () {
                _throwIfNotLoaded("cellAddresses", this._C, _typeRangeView, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "columnCount", {
            get: function () {
                _throwIfNotLoaded("columnCount", this._Co, _typeRangeView, this._isNull);
                return this._Co;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "formulas", {
            get: function () {
                _throwIfNotLoaded("formulas", this._F, _typeRangeView, this._isNull);
                return this._F;
            },
            set: function (value) {
                this._F = value;
                _createSetPropertyAction(this.context, this, "Formulas", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "formulasLocal", {
            get: function () {
                _throwIfNotLoaded("formulasLocal", this._Fo, _typeRangeView, this._isNull);
                return this._Fo;
            },
            set: function (value) {
                this._Fo = value;
                _createSetPropertyAction(this.context, this, "FormulasLocal", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "formulasR1C1", {
            get: function () {
                _throwIfNotLoaded("formulasR1C1", this._For, _typeRangeView, this._isNull);
                return this._For;
            },
            set: function (value) {
                this._For = value;
                _createSetPropertyAction(this.context, this, "FormulasR1C1", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "index", {
            get: function () {
                _throwIfNotLoaded("index", this._I, _typeRangeView, this._isNull);
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "numberFormat", {
            get: function () {
                _throwIfNotLoaded("numberFormat", this._N, _typeRangeView, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "NumberFormat", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "rowCount", {
            get: function () {
                _throwIfNotLoaded("rowCount", this._R, _typeRangeView, this._isNull);
                return this._R;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "text", {
            get: function () {
                _throwIfNotLoaded("text", this._T, _typeRangeView, this._isNull);
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "valueTypes", {
            get: function () {
                _throwIfNotLoaded("valueTypes", this._Va, _typeRangeView, this._isNull);
                return this._Va;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeView.prototype, "values", {
            get: function () {
                _throwIfNotLoaded("values", this._V, _typeRangeView, this._isNull);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "Values", value);
            },
            enumerable: true,
            configurable: true
        });
        RangeView.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["numberFormat", "values", "formulas", "formulasLocal", "formulasR1C1"], [], [
                "rows"
            ]);
        };
        RangeView.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        RangeView.prototype.getRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1, [], false, true, null, false));
        };
        RangeView.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["CellAddresses"])) {
                this._C = obj["CellAddresses"];
            }
            if (!_isUndefined(obj["ColumnCount"])) {
                this._Co = obj["ColumnCount"];
            }
            if (!_isUndefined(obj["Formulas"])) {
                this._F = obj["Formulas"];
            }
            if (!_isUndefined(obj["FormulasLocal"])) {
                this._Fo = obj["FormulasLocal"];
            }
            if (!_isUndefined(obj["FormulasR1C1"])) {
                this._For = obj["FormulasR1C1"];
            }
            if (!_isUndefined(obj["Index"])) {
                this._I = obj["Index"];
            }
            if (!_isUndefined(obj["NumberFormat"])) {
                this._N = obj["NumberFormat"];
            }
            if (!_isUndefined(obj["RowCount"])) {
                this._R = obj["RowCount"];
            }
            if (!_isUndefined(obj["Text"])) {
                this._T = obj["Text"];
            }
            if (!_isUndefined(obj["ValueTypes"])) {
                this._Va = obj["ValueTypes"];
            }
            if (!_isUndefined(obj["Values"])) {
                this._V = obj["Values"];
            }
            _handleNavigationPropertyResults(this, obj, ["rows", "Rows"]);
        };
        RangeView.prototype.load = function (option) {
            return _load(this, option);
        };
        RangeView.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        RangeView.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        RangeView.prototype.toJSON = function () {
            return _toJson(this, {
                "cellAddresses": this._C,
                "columnCount": this._Co,
                "formulas": this._F,
                "formulasLocal": this._Fo,
                "formulasR1C1": this._For,
                "index": this._I,
                "numberFormat": this._N,
                "rowCount": this._R,
                "text": this._T,
                "values": this._V,
                "valueTypes": this._Va,
            }, {
                "rows": this._Ro,
            });
        };
        RangeView.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return RangeView;
    }(OfficeExtension.ClientObject));
    Excel.RangeView = RangeView;
    var _typeRangeViewCollection = "RangeViewCollection";
    var RangeViewCollection = (function (_super) {
        __extends(RangeViewCollection, _super);
        function RangeViewCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RangeViewCollection.prototype, "_className", {
            get: function () {
                return "RangeViewCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeViewCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeViewCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeRangeViewCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        RangeViewCollection.prototype.getCount = function () {
            _throwIfApiNotSupported("RangeViewCollection.getCount", _defaultApiSetName, "1.4", _hostName);
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        RangeViewCollection.prototype.getItemAt = function (index) {
            return new Excel.RangeView(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        RangeViewCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.RangeView(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(false, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        RangeViewCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        RangeViewCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        RangeViewCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.RangeView(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(false, _this.context, _this, childItemData, index)); });
        };
        RangeViewCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return RangeViewCollection;
    }(OfficeExtension.ClientObject));
    Excel.RangeViewCollection = RangeViewCollection;
    var _typeSettingCollection = "SettingCollection";
    var SettingCollection = (function (_super) {
        __extends(SettingCollection, _super);
        function SettingCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(SettingCollection.prototype, "_className", {
            get: function () {
                return "SettingCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SettingCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SettingCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeSettingCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        SettingCollection.prototype.add = function (key, value) {
            value = Setting._replaceDateWithStringDate(value);
            return new Excel.Setting(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [key, value], false, true, null, false));
        };
        SettingCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        SettingCollection.prototype.getItem = function (key) {
            return new Excel.Setting(this.context, _createIndexerObjectPath(this.context, this, [key]));
        };
        SettingCollection.prototype.getItemOrNullObject = function (key) {
            return new Excel.Setting(this.context, _createMethodObjectPath(this.context, this, "GetItemOrNullObject", 1, [key], false, false, null, false));
        };
        SettingCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.Setting(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        SettingCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        SettingCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        SettingCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.Setting(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        Object.defineProperty(SettingCollection.prototype, "onSettingsChanged", {
            get: function () {
                var _this = this;
                if (!this.m_settingsChanged) {
                    this.m_settingsChanged = new OfficeExtension.EventHandlers(this.context, this, "SettingsChanged", {
                        registerFunc: function (handlerCallback) {
                            return _this.context.eventRegistration.register(1, "", handlerCallback);
                        },
                        unregisterFunc: function (handlerCallback) {
                            return _this.context.eventRegistration.unregister(1, "", handlerCallback);
                        },
                        eventArgsTransformFunc: function (args) {
                            return OfficeExtension.Utility._createPromiseFromResult({ settings: _this });
                        }
                    });
                }
                return this.m_settingsChanged;
            },
            enumerable: true,
            configurable: true
        });
        SettingCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return SettingCollection;
    }(OfficeExtension.ClientObject));
    Excel.SettingCollection = SettingCollection;
    var _typeSetting = "Setting";
    var Setting = (function (_super) {
        __extends(Setting, _super);
        function Setting() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Setting.prototype, "_className", {
            get: function () {
                return "Setting";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Setting.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["key", "value"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Setting.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [false, true];
            },
            enumerable: true,
            configurable: true
        });
        Setting.replaceStringDateWithDate = function (value) {
            var strValue = JSON.stringify(value);
            value = JSON.parse(strValue, function dateReviver(k, v) {
                var d;
                if (typeof v === 'string' && v && v.length > 6 && v.slice(0, 5) === Setting.DateJSONPrefix && v.slice(-1) === Setting.DateJSONSuffix) {
                    d = new Date(parseInt(v.slice(5, -1)));
                    if (d) {
                        return d;
                    }
                }
                return v;
            });
            return value;
        };
        Setting._replaceDateWithStringDate = function (value) {
            var strValue = JSON.stringify(value, function dateReplacer(k, v) {
                return (this[k] instanceof Date) ? (Setting.DateJSONPrefix + this[k].getTime() + Setting.DateJSONSuffix) : v;
            });
            value = JSON.parse(strValue);
            return value;
        };
        Object.defineProperty(Setting.prototype, "key", {
            get: function () {
                _throwIfNotLoaded("key", this._K, _typeSetting, this._isNull);
                return this._K;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Setting.prototype, "value", {
            get: function () {
                _throwIfNotLoaded("value", this.m_value, _typeSetting, this._isNull);
                return this.m_value;
            },
            set: function (value) {
                if (!_isNullOrUndefined(value)) {
                    this.m_value = value;
                    var newValue = Setting._replaceDateWithStringDate(value);
                    _createSetPropertyAction(this.context, this, "Value", newValue);
                    return;
                }
                this.m_value = value;
                _createSetPropertyAction(this.context, this, "Value", value);
            },
            enumerable: true,
            configurable: true
        });
        Setting.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["value"], [], []);
        };
        Setting.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        Setting.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        Setting.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Key"])) {
                this._K = obj["Key"];
            }
            if (!_isUndefined(obj["Value"])) {
                this.m_value = obj["Value"];
                this.m_value = Setting.replaceStringDateWithDate(this.m_value);
            }
        };
        Setting.prototype.load = function (option) {
            return _load(this, option);
        };
        Setting.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        Setting.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Setting.prototype.toJSON = function () {
            return _toJson(this, {
                "key": this._K,
                "value": this.m_value,
            }, {});
        };
        Setting.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return Setting;
    }(OfficeExtension.ClientObject));
    Setting.DateJSONPrefix = "Date(";
    Setting.DateJSONSuffix = ")";
    Excel.Setting = Setting;
    var _typeNamedItemCollection = "NamedItemCollection";
    var NamedItemCollection = (function (_super) {
        __extends(NamedItemCollection, _super);
        function NamedItemCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(NamedItemCollection.prototype, "_className", {
            get: function () {
                return "NamedItemCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItemCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItemCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeNamedItemCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        NamedItemCollection.prototype.add = function (name, reference, comment) {
            _throwIfApiNotSupported("NamedItemCollection.add", _defaultApiSetName, "1.4", _hostName);
            return new Excel.NamedItem(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [name, reference, comment], false, true, null, false));
        };
        NamedItemCollection.prototype.addFormulaLocal = function (name, formula, comment) {
            _throwIfApiNotSupported("NamedItemCollection.addFormulaLocal", _defaultApiSetName, "1.4", _hostName);
            return new Excel.NamedItem(this.context, _createMethodObjectPath(this.context, this, "AddFormulaLocal", 0, [name, formula, comment], false, false, null, false));
        };
        NamedItemCollection.prototype.getCount = function () {
            _throwIfApiNotSupported("NamedItemCollection.getCount", _defaultApiSetName, "1.4", _hostName);
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        NamedItemCollection.prototype.getItem = function (name) {
            return new Excel.NamedItem(this.context, _createIndexerObjectPath(this.context, this, [name]));
        };
        NamedItemCollection.prototype.getItemOrNullObject = function (name) {
            _throwIfApiNotSupported("NamedItemCollection.getItemOrNullObject", _defaultApiSetName, "1.4", _hostName);
            return new Excel.NamedItem(this.context, _createMethodObjectPath(this.context, this, "GetItemOrNullObject", 1, [name], false, false, null, false));
        };
        NamedItemCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.NamedItem(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        NamedItemCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        NamedItemCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        NamedItemCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.NamedItem(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        NamedItemCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return NamedItemCollection;
    }(OfficeExtension.ClientObject));
    Excel.NamedItemCollection = NamedItemCollection;
    var _typeNamedItem = "NamedItem";
    var NamedItem = (function (_super) {
        __extends(NamedItem, _super);
        function NamedItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(NamedItem.prototype, "_className", {
            get: function () {
                return "NamedItem";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["name", "type", "value", "visible", "_Id", "comment", "scope", "formula"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [false, false, false, true, false, true, false, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["worksheet", "worksheetOrNullObject", "arrayValues"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "arrayValues", {
            get: function () {
                _throwIfApiNotSupported("NamedItem.arrayValues", _defaultApiSetName, "1.7", _hostName);
                if (!this._A) {
                    this._A = new Excel.NamedItemArrayValues(this.context, _createPropertyObjectPath(this.context, this, "ArrayValues", false, false, false));
                }
                return this._A;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "worksheet", {
            get: function () {
                _throwIfApiNotSupported("NamedItem.worksheet", _defaultApiSetName, "1.4", _hostName);
                if (!this._W) {
                    this._W = new Excel.Worksheet(this.context, _createPropertyObjectPath(this.context, this, "Worksheet", false, false, false));
                }
                return this._W;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "worksheetOrNullObject", {
            get: function () {
                _throwIfApiNotSupported("NamedItem.worksheetOrNullObject", _defaultApiSetName, "1.4", _hostName);
                if (!this._Wo) {
                    this._Wo = new Excel.Worksheet(this.context, _createPropertyObjectPath(this.context, this, "WorksheetOrNullObject", false, false, false));
                }
                return this._Wo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "comment", {
            get: function () {
                _throwIfNotLoaded("comment", this._C, _typeNamedItem, this._isNull);
                _throwIfApiNotSupported("NamedItem.comment", _defaultApiSetName, "1.4", _hostName);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Comment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "formula", {
            get: function () {
                _throwIfNotLoaded("formula", this._F, _typeNamedItem, this._isNull);
                _throwIfApiNotSupported("NamedItem.formula", _defaultApiSetName, "1.7", _hostName);
                return this._F;
            },
            set: function (value) {
                this._F = value;
                _createSetPropertyAction(this.context, this, "Formula", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typeNamedItem, this._isNull);
                return this._N;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "scope", {
            get: function () {
                _throwIfNotLoaded("scope", this._S, _typeNamedItem, this._isNull);
                _throwIfApiNotSupported("NamedItem.scope", _defaultApiSetName, "1.4", _hostName);
                return this._S;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "type", {
            get: function () {
                _throwIfNotLoaded("type", this._T, _typeNamedItem, this._isNull);
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "value", {
            get: function () {
                _throwIfNotLoaded("value", this._V, _typeNamedItem, this._isNull);
                return this._V;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "visible", {
            get: function () {
                _throwIfNotLoaded("visible", this._Vi, _typeNamedItem, this._isNull);
                return this._Vi;
            },
            set: function (value) {
                this._Vi = value;
                _createSetPropertyAction(this.context, this, "Visible", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItem.prototype, "_Id", {
            get: function () {
                _throwIfNotLoaded("_Id", this.__I, _typeNamedItem, this._isNull);
                return this.__I;
            },
            enumerable: true,
            configurable: true
        });
        NamedItem.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["visible", "comment", "formula"], [], [
                "arrayValues",
                "worksheet",
                "worksheetOrNullObject"
            ]);
        };
        NamedItem.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        NamedItem.prototype.delete = function () {
            _throwIfApiNotSupported("NamedItem.delete", _defaultApiSetName, "1.4", _hostName);
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        NamedItem.prototype.getRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1, [], false, true, null, false));
        };
        NamedItem.prototype.getRangeOrNullObject = function () {
            _throwIfApiNotSupported("NamedItem.getRangeOrNullObject", _defaultApiSetName, "1.4", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRangeOrNullObject", 1, [], false, true, null, false));
        };
        NamedItem.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Comment"])) {
                this._C = obj["Comment"];
            }
            if (!_isUndefined(obj["Formula"])) {
                this._F = obj["Formula"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["Scope"])) {
                this._S = obj["Scope"];
            }
            if (!_isUndefined(obj["Type"])) {
                this._T = obj["Type"];
            }
            if (!_isUndefined(obj["Value"])) {
                this._V = obj["Value"];
            }
            if (!_isUndefined(obj["Visible"])) {
                this._Vi = obj["Visible"];
            }
            if (!_isUndefined(obj["_Id"])) {
                this.__I = obj["_Id"];
            }
            _handleNavigationPropertyResults(this, obj, ["arrayValues", "ArrayValues", "worksheet", "Worksheet", "worksheetOrNullObject", "WorksheetOrNullObject"]);
        };
        NamedItem.prototype.load = function (option) {
            return _load(this, option);
        };
        NamedItem.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        NamedItem.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_Id"])) {
                this.__I = value["_Id"];
            }
        };
        NamedItem.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        NamedItem.prototype.toJSON = function () {
            return _toJson(this, {
                "comment": this._C,
                "formula": this._F,
                "name": this._N,
                "scope": this._S,
                "type": this._T,
                "value": this._V,
                "visible": this._Vi,
            }, {
                "arrayValues": this._A,
            });
        };
        NamedItem.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return NamedItem;
    }(OfficeExtension.ClientObject));
    Excel.NamedItem = NamedItem;
    var _typeNamedItemArrayValues = "NamedItemArrayValues";
    var NamedItemArrayValues = (function (_super) {
        __extends(NamedItemArrayValues, _super);
        function NamedItemArrayValues() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(NamedItemArrayValues.prototype, "_className", {
            get: function () {
                return "NamedItemArrayValues";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItemArrayValues.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["values", "types"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItemArrayValues.prototype, "types", {
            get: function () {
                _throwIfNotLoaded("types", this._T, _typeNamedItemArrayValues, this._isNull);
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NamedItemArrayValues.prototype, "values", {
            get: function () {
                _throwIfNotLoaded("values", this._V, _typeNamedItemArrayValues, this._isNull);
                return this._V;
            },
            enumerable: true,
            configurable: true
        });
        NamedItemArrayValues.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Types"])) {
                this._T = obj["Types"];
            }
            if (!_isUndefined(obj["Values"])) {
                this._V = obj["Values"];
            }
        };
        NamedItemArrayValues.prototype.load = function (option) {
            return _load(this, option);
        };
        NamedItemArrayValues.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        NamedItemArrayValues.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        NamedItemArrayValues.prototype.toJSON = function () {
            return _toJson(this, {
                "types": this._T,
                "values": this._V,
            }, {});
        };
        NamedItemArrayValues.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return NamedItemArrayValues;
    }(OfficeExtension.ClientObject));
    Excel.NamedItemArrayValues = NamedItemArrayValues;
    var _typeBinding = "Binding";
    var Binding = (function (_super) {
        __extends(Binding, _super);
        function Binding() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Binding.prototype, "_className", {
            get: function () {
                return "Binding";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["id", "type"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "id", {
            get: function () {
                _throwIfNotLoaded("id", this._I, _typeBinding, this._isNull);
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "type", {
            get: function () {
                _throwIfNotLoaded("type", this._T, _typeBinding, this._isNull);
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        Binding.prototype.delete = function () {
            _throwIfApiNotSupported("Binding.delete", _defaultApiSetName, "1.3", _hostName);
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        Binding.prototype.getRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1, [], false, false, null, false));
        };
        Binding.prototype.getTable = function () {
            return new Excel.Table(this.context, _createMethodObjectPath(this.context, this, "GetTable", 1, [], false, false, null, false));
        };
        Binding.prototype.getText = function () {
            var action = _createMethodAction(this.context, this, "GetText", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        Binding.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Id"])) {
                this._I = obj["Id"];
            }
            if (!_isUndefined(obj["Type"])) {
                this._T = obj["Type"];
            }
        };
        Binding.prototype.load = function (option) {
            return _load(this, option);
        };
        Binding.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        Binding.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["Id"])) {
                this._I = value["Id"];
            }
        };
        Binding.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Object.defineProperty(Binding.prototype, "onDataChanged", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("Binding.onDataChanged", _defaultApiSetName, "1.3", _hostName);
                if (!this.m_dataChanged) {
                    this.m_dataChanged = new OfficeExtension.EventHandlers(this.context, this, "DataChanged", {
                        registerFunc: function (handlerCallback) {
                            return _this.context.eventRegistration.register(4, _this.id, handlerCallback);
                        },
                        unregisterFunc: function (handlerCallback) {
                            return _this.context.eventRegistration.unregister(4, _this.id, handlerCallback);
                        },
                        eventArgsTransformFunc: function (args) {
                            var evt = {
                                binding: _this
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(evt);
                        }
                    });
                }
                return this.m_dataChanged;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Binding.prototype, "onSelectionChanged", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("Binding.onSelectionChanged", _defaultApiSetName, "1.3", _hostName);
                if (!this.m_selectionChanged) {
                    this.m_selectionChanged = new OfficeExtension.EventHandlers(this.context, this, "SelectionChanged", {
                        registerFunc: function (handlerCallback) {
                            return _this.context.eventRegistration.register(3, _this.id, handlerCallback);
                        },
                        unregisterFunc: function (handlerCallback) {
                            return _this.context.eventRegistration.unregister(3, _this.id, handlerCallback);
                        },
                        eventArgsTransformFunc: function (args) {
                            var evt = {
                                binding: _this,
                                columnCount: args.columnCount,
                                rowCount: args.rowCount,
                                startColumn: args.startColumn,
                                startRow: args.startRow
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(evt);
                        }
                    });
                }
                return this.m_selectionChanged;
            },
            enumerable: true,
            configurable: true
        });
        Binding.prototype.toJSON = function () {
            return _toJson(this, {
                "id": this._I,
                "type": this._T,
            }, {});
        };
        Binding.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return Binding;
    }(OfficeExtension.ClientObject));
    Excel.Binding = Binding;
    var _typeBindingCollection = "BindingCollection";
    var BindingCollection = (function (_super) {
        __extends(BindingCollection, _super);
        function BindingCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BindingCollection.prototype, "_className", {
            get: function () {
                return "BindingCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BindingCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BindingCollection.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["count"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BindingCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeBindingCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BindingCollection.prototype, "count", {
            get: function () {
                _throwIfNotLoaded("count", this._C, _typeBindingCollection, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        BindingCollection.prototype.add = function (range, bindingType, id) {
            _throwIfApiNotSupported("BindingCollection.add", _defaultApiSetName, "1.3", _hostName);
            return new Excel.Binding(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [range, bindingType, id], false, true, null, false));
        };
        BindingCollection.prototype.addFromNamedItem = function (name, bindingType, id) {
            _throwIfApiNotSupported("BindingCollection.addFromNamedItem", _defaultApiSetName, "1.3", _hostName);
            return new Excel.Binding(this.context, _createMethodObjectPath(this.context, this, "AddFromNamedItem", 0, [name, bindingType, id], false, false, null, false));
        };
        BindingCollection.prototype.addFromSelection = function (bindingType, id) {
            _throwIfApiNotSupported("BindingCollection.addFromSelection", _defaultApiSetName, "1.3", _hostName);
            return new Excel.Binding(this.context, _createMethodObjectPath(this.context, this, "AddFromSelection", 0, [bindingType, id], false, false, null, false));
        };
        BindingCollection.prototype.getCount = function () {
            _throwIfApiNotSupported("BindingCollection.getCount", _defaultApiSetName, "1.4", _hostName);
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        BindingCollection.prototype.getItem = function (id) {
            return new Excel.Binding(this.context, _createIndexerObjectPath(this.context, this, [id]));
        };
        BindingCollection.prototype.getItemAt = function (index) {
            return new Excel.Binding(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        BindingCollection.prototype.getItemOrNullObject = function (id) {
            _throwIfApiNotSupported("BindingCollection.getItemOrNullObject", _defaultApiSetName, "1.4", _hostName);
            return new Excel.Binding(this.context, _createMethodObjectPath(this.context, this, "GetItemOrNullObject", 1, [id], false, false, null, false));
        };
        BindingCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Count"])) {
                this._C = obj["Count"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.Binding(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        BindingCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        BindingCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        BindingCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.Binding(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        BindingCollection.prototype.toJSON = function () {
            return _toJson(this, {
                "count": this._C,
            }, {}, this.m__items);
        };
        return BindingCollection;
    }(OfficeExtension.ClientObject));
    Excel.BindingCollection = BindingCollection;
    var _typeTableCollection = "TableCollection";
    var TableCollection = (function (_super) {
        __extends(TableCollection, _super);
        function TableCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TableCollection.prototype, "_className", {
            get: function () {
                return "TableCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCollection.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["count"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCollection.prototype, "_ParentObject", {
            get: function () {
                return this.m__ParentObject;
            },
            set: function (value) {
                this.m__ParentObject = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeTableCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCollection.prototype, "count", {
            get: function () {
                _throwIfNotLoaded("count", this._C, _typeTableCollection, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        TableCollection.prototype.add = function (address, hasHeaders) {
            return new Excel.Table(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [address, hasHeaders], false, true, null, false));
        };
        TableCollection.prototype.getCount = function () {
            _throwIfApiNotSupported("TableCollection.getCount", _defaultApiSetName, "1.4", _hostName);
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        TableCollection.prototype.getItem = function (key) {
            return new Excel.Table(this.context, _createIndexerObjectPath(this.context, this, [key]));
        };
        TableCollection.prototype.getItemAt = function (index) {
            return new Excel.Table(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        TableCollection.prototype.getItemOrNullObject = function (key) {
            _throwIfApiNotSupported("TableCollection.getItemOrNullObject", _defaultApiSetName, "1.4", _hostName);
            return new Excel.Table(this.context, _createMethodObjectPath(this.context, this, "GetItemOrNullObject", 1, [key], false, false, null, false));
        };
        TableCollection.prototype._RegisterDataChangedEvent = function () {
            _throwIfApiNotSupported("TableCollection._RegisterDataChangedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterDataChangedEvent", 0, [], false);
        };
        TableCollection.prototype._UnregisterDataChangedEvent = function () {
            _throwIfApiNotSupported("TableCollection._UnregisterDataChangedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterDataChangedEvent", 0, [], false);
        };
        TableCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Count"])) {
                this._C = obj["Count"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.Table(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        TableCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        TableCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        TableCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.Table(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        Object.defineProperty(TableCollection.prototype, "onDataChanged", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("TableCollection.onDataChanged", _defaultApiSetName, "1.7", _hostName);
                if (!this.m_dataChanged) {
                    this.m_dataChanged = new OfficeExtension.GenericEventHandlers(this.context, this, "DataChanged", {
                        eventType: 101,
                        registerFunc: function () { return _this._RegisterDataChangedEvent(); },
                        unregisterFunc: function () { return _this._UnregisterDataChangedEvent(); },
                        getTargetIdFunc: function () { return _this._ParentObject ? _this._ParentObject.id : OfficeExtension.Constants.eventWorkbookId; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                type: EventType.tableDataChanged,
                                changeType: value.changeType,
                                source: value.source,
                                worksheetId: value.worksheetId,
                                tableId: value.tableId,
                                address: value.address
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_dataChanged;
            },
            enumerable: true,
            configurable: true
        });
        TableCollection.prototype.toJSON = function () {
            return _toJson(this, {
                "count": this._C,
            }, {}, this.m__items);
        };
        return TableCollection;
    }(OfficeExtension.ClientObject));
    Excel.TableCollection = TableCollection;
    var _typeTable = "Table";
    var Table = (function (_super) {
        __extends(Table, _super);
        function Table() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Table.prototype, "_className", {
            get: function () {
                return "Table";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["id", "name", "showHeaders", "showTotals", "style", "highlightFirstColumn", "highlightLastColumn", "showBandedRows", "showBandedColumns", "showFilterButton"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [false, true, true, true, true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["columns", "rows", "sort", "worksheet"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "columns", {
            get: function () {
                if (!this._C) {
                    this._C = new Excel.TableColumnCollection(this.context, _createPropertyObjectPath(this.context, this, "Columns", true, false, false));
                }
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "rows", {
            get: function () {
                if (!this._R) {
                    this._R = new Excel.TableRowCollection(this.context, _createPropertyObjectPath(this.context, this, "Rows", true, false, false));
                }
                return this._R;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "sort", {
            get: function () {
                _throwIfApiNotSupported("Table.sort", _defaultApiSetName, "1.2", _hostName);
                if (!this._So) {
                    this._So = new Excel.TableSort(this.context, _createPropertyObjectPath(this.context, this, "Sort", false, false, false));
                }
                return this._So;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "worksheet", {
            get: function () {
                _throwIfApiNotSupported("Table.worksheet", _defaultApiSetName, "1.2", _hostName);
                if (!this._W) {
                    this._W = new Excel.Worksheet(this.context, _createPropertyObjectPath(this.context, this, "Worksheet", false, false, false));
                }
                return this._W;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "highlightFirstColumn", {
            get: function () {
                _throwIfNotLoaded("highlightFirstColumn", this._H, _typeTable, this._isNull);
                _throwIfApiNotSupported("Table.highlightFirstColumn", _defaultApiSetName, "1.3", _hostName);
                return this._H;
            },
            set: function (value) {
                this._H = value;
                _createSetPropertyAction(this.context, this, "HighlightFirstColumn", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "highlightLastColumn", {
            get: function () {
                _throwIfNotLoaded("highlightLastColumn", this._Hi, _typeTable, this._isNull);
                _throwIfApiNotSupported("Table.highlightLastColumn", _defaultApiSetName, "1.3", _hostName);
                return this._Hi;
            },
            set: function (value) {
                this._Hi = value;
                _createSetPropertyAction(this.context, this, "HighlightLastColumn", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "id", {
            get: function () {
                _throwIfNotLoaded("id", this._I, _typeTable, this._isNull);
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typeTable, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "Name", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "showBandedColumns", {
            get: function () {
                _throwIfNotLoaded("showBandedColumns", this._S, _typeTable, this._isNull);
                _throwIfApiNotSupported("Table.showBandedColumns", _defaultApiSetName, "1.3", _hostName);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "ShowBandedColumns", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "showBandedRows", {
            get: function () {
                _throwIfNotLoaded("showBandedRows", this._Sh, _typeTable, this._isNull);
                _throwIfApiNotSupported("Table.showBandedRows", _defaultApiSetName, "1.3", _hostName);
                return this._Sh;
            },
            set: function (value) {
                this._Sh = value;
                _createSetPropertyAction(this.context, this, "ShowBandedRows", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "showFilterButton", {
            get: function () {
                _throwIfNotLoaded("showFilterButton", this._Sho, _typeTable, this._isNull);
                _throwIfApiNotSupported("Table.showFilterButton", _defaultApiSetName, "1.3", _hostName);
                return this._Sho;
            },
            set: function (value) {
                this._Sho = value;
                _createSetPropertyAction(this.context, this, "ShowFilterButton", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "showHeaders", {
            get: function () {
                _throwIfNotLoaded("showHeaders", this._Show, _typeTable, this._isNull);
                return this._Show;
            },
            set: function (value) {
                this._Show = value;
                _createSetPropertyAction(this.context, this, "ShowHeaders", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "showTotals", {
            get: function () {
                _throwIfNotLoaded("showTotals", this._ShowT, _typeTable, this._isNull);
                return this._ShowT;
            },
            set: function (value) {
                this._ShowT = value;
                _createSetPropertyAction(this.context, this, "ShowTotals", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "style", {
            get: function () {
                _throwIfNotLoaded("style", this._St, _typeTable, this._isNull);
                return this._St;
            },
            set: function (value) {
                this._St = value;
                _createSetPropertyAction(this.context, this, "Style", value);
            },
            enumerable: true,
            configurable: true
        });
        Table.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["name", "showHeaders", "showTotals", "style", "highlightFirstColumn", "highlightLastColumn", "showBandedRows", "showBandedColumns", "showFilterButton"], [], [
                "columns",
                "rows",
                "sort",
                "worksheet"
            ]);
        };
        Table.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        Table.prototype.clearFilters = function () {
            _throwIfApiNotSupported("Table.clearFilters", _defaultApiSetName, "1.2", _hostName);
            _createMethodAction(this.context, this, "ClearFilters", 0, [], false);
        };
        Table.prototype.convertToRange = function () {
            _throwIfApiNotSupported("Table.convertToRange", _defaultApiSetName, "1.2", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "ConvertToRange", 0, [], false, true, null, false));
        };
        Table.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        Table.prototype.getDataBodyRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetDataBodyRange", 1, [], false, true, null, false));
        };
        Table.prototype.getHeaderRowRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetHeaderRowRange", 1, [], false, true, null, false));
        };
        Table.prototype.getRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1, [], false, true, null, false));
        };
        Table.prototype.getTotalRowRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetTotalRowRange", 1, [], false, true, null, false));
        };
        Table.prototype.reapplyFilters = function () {
            _throwIfApiNotSupported("Table.reapplyFilters", _defaultApiSetName, "1.2", _hostName);
            _createMethodAction(this.context, this, "ReapplyFilters", 0, [], false);
        };
        Table.prototype._RegisterDataChangedEvent = function () {
            _throwIfApiNotSupported("Table._RegisterDataChangedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterDataChangedEvent", 0, [], false);
        };
        Table.prototype._RegisterSelectionChangedEvent = function () {
            _throwIfApiNotSupported("Table._RegisterSelectionChangedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterSelectionChangedEvent", 0, [], false);
        };
        Table.prototype._UnregisterDataChangedEvent = function () {
            _throwIfApiNotSupported("Table._UnregisterDataChangedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterDataChangedEvent", 0, [], false);
        };
        Table.prototype._UnregisterSelectionChangedEvent = function () {
            _throwIfApiNotSupported("Table._UnregisterSelectionChangedEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterSelectionChangedEvent", 0, [], false);
        };
        Table.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Id"])) {
                obj["Id"] = obj["Id"].toString();
            }
            if (!_isUndefined(obj["HighlightFirstColumn"])) {
                this._H = obj["HighlightFirstColumn"];
            }
            if (!_isUndefined(obj["HighlightLastColumn"])) {
                this._Hi = obj["HighlightLastColumn"];
            }
            if (!_isUndefined(obj["Id"])) {
                this._I = obj["Id"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["ShowBandedColumns"])) {
                this._S = obj["ShowBandedColumns"];
            }
            if (!_isUndefined(obj["ShowBandedRows"])) {
                this._Sh = obj["ShowBandedRows"];
            }
            if (!_isUndefined(obj["ShowFilterButton"])) {
                this._Sho = obj["ShowFilterButton"];
            }
            if (!_isUndefined(obj["ShowHeaders"])) {
                this._Show = obj["ShowHeaders"];
            }
            if (!_isUndefined(obj["ShowTotals"])) {
                this._ShowT = obj["ShowTotals"];
            }
            if (!_isUndefined(obj["Style"])) {
                this._St = obj["Style"];
            }
            _handleNavigationPropertyResults(this, obj, ["columns", "Columns", "rows", "Rows", "sort", "Sort", "worksheet", "Worksheet"]);
        };
        Table.prototype.load = function (option) {
            return _load(this, option);
        };
        Table.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        Table.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["Id"])) {
                value["Id"] = value["Id"].toString();
                this._I = value["Id"];
            }
        };
        Table.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Object.defineProperty(Table.prototype, "onDataChanged", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("Table.onDataChanged", _defaultApiSetName, "1.7", _hostName);
                if (!this.m_dataChanged) {
                    this.m_dataChanged = new OfficeExtension.GenericEventHandlers(this.context, this, "DataChanged", {
                        eventType: 101,
                        registerFunc: function () { return _this._RegisterDataChangedEvent(); },
                        unregisterFunc: function () { return _this._UnregisterDataChangedEvent(); },
                        getTargetIdFunc: function () { return _this.id.toString(); },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                type: EventType.tableDataChanged,
                                changeType: value.changeType,
                                source: value.source,
                                worksheetId: value.worksheetId,
                                tableId: value.tableId,
                                address: value.address
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_dataChanged;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "onSelectionChanged", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("Table.onSelectionChanged", _defaultApiSetName, "1.7", _hostName);
                if (!this.m_selectionChanged) {
                    this.m_selectionChanged = new OfficeExtension.GenericEventHandlers(this.context, this, "SelectionChanged", {
                        eventType: 100,
                        registerFunc: function () { _this._RegisterSelectionChangedEvent(); },
                        unregisterFunc: function () { _this._UnregisterSelectionChangedEvent(); },
                        getTargetIdFunc: function () { return _this.id; },
                        eventArgsTransformFunc: function (value) {
                            var isAddressNullOrEmpty = (!value.address || value.address.length === 0);
                            var newArgs = {
                                type: EventType.tableSelectionChanged,
                                isInsideTable: !isAddressNullOrEmpty,
                                worksheetId: value.worksheetId,
                                tableId: _this.id,
                                address: value.address
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_selectionChanged;
            },
            enumerable: true,
            configurable: true
        });
        Table.prototype.toJSON = function () {
            return _toJson(this, {
                "highlightFirstColumn": this._H,
                "highlightLastColumn": this._Hi,
                "id": this._I,
                "name": this._N,
                "showBandedColumns": this._S,
                "showBandedRows": this._Sh,
                "showFilterButton": this._Sho,
                "showHeaders": this._Show,
                "showTotals": this._ShowT,
                "style": this._St,
            }, {
                "columns": this._C,
                "rows": this._R,
                "sort": this._So,
            });
        };
        Table.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return Table;
    }(OfficeExtension.ClientObject));
    Excel.Table = Table;
    var _typeTableColumnCollection = "TableColumnCollection";
    var TableColumnCollection = (function (_super) {
        __extends(TableColumnCollection, _super);
        function TableColumnCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TableColumnCollection.prototype, "_className", {
            get: function () {
                return "TableColumnCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumnCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumnCollection.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["count"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumnCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeTableColumnCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumnCollection.prototype, "count", {
            get: function () {
                _throwIfNotLoaded("count", this._C, _typeTableColumnCollection, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        TableColumnCollection.prototype.add = function (index, values, name) {
            return new Excel.TableColumn(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [index, values, name], false, true, null, false));
        };
        TableColumnCollection.prototype.getCount = function () {
            _throwIfApiNotSupported("TableColumnCollection.getCount", _defaultApiSetName, "1.4", _hostName);
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        TableColumnCollection.prototype.getItem = function (key) {
            return new Excel.TableColumn(this.context, _createIndexerObjectPath(this.context, this, [key]));
        };
        TableColumnCollection.prototype.getItemAt = function (index) {
            return new Excel.TableColumn(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        TableColumnCollection.prototype.getItemOrNullObject = function (key) {
            _throwIfApiNotSupported("TableColumnCollection.getItemOrNullObject", _defaultApiSetName, "1.4", _hostName);
            return new Excel.TableColumn(this.context, _createMethodObjectPath(this.context, this, "GetItemOrNullObject", 1, [key], false, false, null, false));
        };
        TableColumnCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Count"])) {
                this._C = obj["Count"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.TableColumn(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        TableColumnCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        TableColumnCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        TableColumnCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.TableColumn(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        TableColumnCollection.prototype.toJSON = function () {
            return _toJson(this, {
                "count": this._C,
            }, {}, this.m__items);
        };
        return TableColumnCollection;
    }(OfficeExtension.ClientObject));
    Excel.TableColumnCollection = TableColumnCollection;
    var _typeTableColumn = "TableColumn";
    var TableColumn = (function (_super) {
        __extends(TableColumn, _super);
        function TableColumn() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TableColumn.prototype, "_className", {
            get: function () {
                return "TableColumn";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["id", "index", "values", "name"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [false, false, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["filter"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "filter", {
            get: function () {
                _throwIfApiNotSupported("TableColumn.filter", _defaultApiSetName, "1.2", _hostName);
                if (!this._F) {
                    this._F = new Excel.Filter(this.context, _createPropertyObjectPath(this.context, this, "Filter", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "id", {
            get: function () {
                _throwIfNotLoaded("id", this._I, _typeTableColumn, this._isNull);
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "index", {
            get: function () {
                _throwIfNotLoaded("index", this._In, _typeTableColumn, this._isNull);
                return this._In;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typeTableColumn, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "Name", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "values", {
            get: function () {
                _throwIfNotLoaded("values", this._V, _typeTableColumn, this._isNull);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "Values", value);
            },
            enumerable: true,
            configurable: true
        });
        TableColumn.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["values", "name"], [], [
                "filter"
            ]);
        };
        TableColumn.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        TableColumn.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        TableColumn.prototype.getDataBodyRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetDataBodyRange", 1, [], false, true, null, false));
        };
        TableColumn.prototype.getHeaderRowRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetHeaderRowRange", 1, [], false, true, null, false));
        };
        TableColumn.prototype.getRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1, [], false, true, null, false));
        };
        TableColumn.prototype.getTotalRowRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetTotalRowRange", 1, [], false, true, null, false));
        };
        TableColumn.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Id"])) {
                this._I = obj["Id"];
            }
            if (!_isUndefined(obj["Index"])) {
                this._In = obj["Index"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["Values"])) {
                this._V = obj["Values"];
            }
            _handleNavigationPropertyResults(this, obj, ["filter", "Filter"]);
        };
        TableColumn.prototype.load = function (option) {
            return _load(this, option);
        };
        TableColumn.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        TableColumn.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["Id"])) {
                this._I = value["Id"];
            }
        };
        TableColumn.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        TableColumn.prototype.toJSON = function () {
            return _toJson(this, {
                "id": this._I,
                "index": this._In,
                "name": this._N,
                "values": this._V,
            }, {
                "filter": this._F,
            });
        };
        TableColumn.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return TableColumn;
    }(OfficeExtension.ClientObject));
    Excel.TableColumn = TableColumn;
    var _typeTableRowCollection = "TableRowCollection";
    var TableRowCollection = (function (_super) {
        __extends(TableRowCollection, _super);
        function TableRowCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TableRowCollection.prototype, "_className", {
            get: function () {
                return "TableRowCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRowCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRowCollection.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["count"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRowCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeTableRowCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRowCollection.prototype, "count", {
            get: function () {
                _throwIfNotLoaded("count", this._C, _typeTableRowCollection, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        TableRowCollection.prototype.add = function (index, values) {
            return new Excel.TableRow(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [index, values], false, true, null, false));
        };
        TableRowCollection.prototype.getCount = function () {
            _throwIfApiNotSupported("TableRowCollection.getCount", _defaultApiSetName, "1.4", _hostName);
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        TableRowCollection.prototype.getItemAt = function (index) {
            return new Excel.TableRow(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        TableRowCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Count"])) {
                this._C = obj["Count"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.TableRow(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(false, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        TableRowCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        TableRowCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        TableRowCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.TableRow(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(false, _this.context, _this, childItemData, index)); });
        };
        TableRowCollection.prototype.toJSON = function () {
            return _toJson(this, {
                "count": this._C,
            }, {}, this.m__items);
        };
        return TableRowCollection;
    }(OfficeExtension.ClientObject));
    Excel.TableRowCollection = TableRowCollection;
    var _typeTableRow = "TableRow";
    var TableRow = (function (_super) {
        __extends(TableRow, _super);
        function TableRow() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TableRow.prototype, "_className", {
            get: function () {
                return "TableRow";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["index", "values"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [false, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "index", {
            get: function () {
                _throwIfNotLoaded("index", this._I, _typeTableRow, this._isNull);
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "values", {
            get: function () {
                _throwIfNotLoaded("values", this._V, _typeTableRow, this._isNull);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "Values", value);
            },
            enumerable: true,
            configurable: true
        });
        TableRow.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["values"], [], []);
        };
        TableRow.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        TableRow.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        TableRow.prototype.getRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1, [], false, true, null, false));
        };
        TableRow.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Index"])) {
                this._I = obj["Index"];
            }
            if (!_isUndefined(obj["Values"])) {
                this._V = obj["Values"];
            }
        };
        TableRow.prototype.load = function (option) {
            return _load(this, option);
        };
        TableRow.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        TableRow.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        TableRow.prototype.toJSON = function () {
            return _toJson(this, {
                "index": this._I,
                "values": this._V,
            }, {});
        };
        TableRow.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return TableRow;
    }(OfficeExtension.ClientObject));
    Excel.TableRow = TableRow;
    var _typeDataValidation = "DataValidation";
    var DataValidation = (function (_super) {
        __extends(DataValidation, _super);
        function DataValidation() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DataValidation.prototype, "_className", {
            get: function () {
                return "DataValidation";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataValidation.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["type", "rule", "prompt", "errorAlert", "ignoreBlanks"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataValidation.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [false, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataValidation.prototype, "errorAlert", {
            get: function () {
                _throwIfNotLoaded("errorAlert", this._E, _typeDataValidation, this._isNull);
                return this._E;
            },
            set: function (value) {
                this._E = value;
                _createSetPropertyAction(this.context, this, "ErrorAlert", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataValidation.prototype, "ignoreBlanks", {
            get: function () {
                _throwIfNotLoaded("ignoreBlanks", this._I, _typeDataValidation, this._isNull);
                return this._I;
            },
            set: function (value) {
                this._I = value;
                _createSetPropertyAction(this.context, this, "IgnoreBlanks", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataValidation.prototype, "prompt", {
            get: function () {
                _throwIfNotLoaded("prompt", this._P, _typeDataValidation, this._isNull);
                return this._P;
            },
            set: function (value) {
                this._P = value;
                _createSetPropertyAction(this.context, this, "Prompt", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataValidation.prototype, "rule", {
            get: function () {
                _throwIfNotLoaded("rule", this._R, _typeDataValidation, this._isNull);
                return this._R;
            },
            set: function (value) {
                this._R = value;
                _createSetPropertyAction(this.context, this, "Rule", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataValidation.prototype, "type", {
            get: function () {
                _throwIfNotLoaded("type", this._T, _typeDataValidation, this._isNull);
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        DataValidation.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["rule", "prompt", "errorAlert", "ignoreBlanks"], [], []);
        };
        DataValidation.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        DataValidation.prototype.clear = function () {
            _createMethodAction(this.context, this, "Clear", 0, [], false);
        };
        DataValidation.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["ErrorAlert"])) {
                this._E = obj["ErrorAlert"];
            }
            if (!_isUndefined(obj["IgnoreBlanks"])) {
                this._I = obj["IgnoreBlanks"];
            }
            if (!_isUndefined(obj["Prompt"])) {
                this._P = obj["Prompt"];
            }
            if (!_isUndefined(obj["Rule"])) {
                this._R = obj["Rule"];
            }
            if (!_isUndefined(obj["Type"])) {
                this._T = obj["Type"];
            }
        };
        DataValidation.prototype.load = function (option) {
            return _load(this, option);
        };
        DataValidation.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        DataValidation.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        DataValidation.prototype.toJSON = function () {
            return _toJson(this, {
                "errorAlert": this._E,
                "ignoreBlanks": this._I,
                "prompt": this._P,
                "rule": this._R,
                "type": this._T,
            }, {});
        };
        DataValidation.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return DataValidation;
    }(OfficeExtension.ClientObject));
    Excel.DataValidation = DataValidation;
    var _typeRangeFormat = "RangeFormat";
    var RangeFormat = (function (_super) {
        __extends(RangeFormat, _super);
        function RangeFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RangeFormat.prototype, "_className", {
            get: function () {
                return "RangeFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["wrapText", "horizontalAlignment", "verticalAlignment", "columnWidth", "rowHeight", "textOrientation", "useStandardHeight", "useStandardWidth"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["fill", "font", "borders", "protection"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "borders", {
            get: function () {
                if (!this._B) {
                    this._B = new Excel.RangeBorderCollection(this.context, _createPropertyObjectPath(this.context, this, "Borders", true, false, false));
                }
                return this._B;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "fill", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.RangeFill(this.context, _createPropertyObjectPath(this.context, this, "Fill", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "font", {
            get: function () {
                if (!this._Fo) {
                    this._Fo = new Excel.RangeFont(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false, false));
                }
                return this._Fo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "protection", {
            get: function () {
                _throwIfApiNotSupported("RangeFormat.protection", _defaultApiSetName, "1.2", _hostName);
                if (!this._P) {
                    this._P = new Excel.FormatProtection(this.context, _createPropertyObjectPath(this.context, this, "Protection", false, false, false));
                }
                return this._P;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "columnWidth", {
            get: function () {
                _throwIfNotLoaded("columnWidth", this._C, _typeRangeFormat, this._isNull);
                _throwIfApiNotSupported("RangeFormat.columnWidth", _defaultApiSetName, "1.2", _hostName);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "ColumnWidth", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "horizontalAlignment", {
            get: function () {
                _throwIfNotLoaded("horizontalAlignment", this._H, _typeRangeFormat, this._isNull);
                return this._H;
            },
            set: function (value) {
                this._H = value;
                _createSetPropertyAction(this.context, this, "HorizontalAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "rowHeight", {
            get: function () {
                _throwIfNotLoaded("rowHeight", this._R, _typeRangeFormat, this._isNull);
                _throwIfApiNotSupported("RangeFormat.rowHeight", _defaultApiSetName, "1.2", _hostName);
                return this._R;
            },
            set: function (value) {
                this._R = value;
                _createSetPropertyAction(this.context, this, "RowHeight", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "textOrientation", {
            get: function () {
                _throwIfNotLoaded("textOrientation", this._T, _typeRangeFormat, this._isNull);
                _throwIfApiNotSupported("RangeFormat.textOrientation", _defaultApiSetName, "1.7", _hostName);
                return this._T;
            },
            set: function (value) {
                this._T = value;
                _createSetPropertyAction(this.context, this, "TextOrientation", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "useStandardHeight", {
            get: function () {
                _throwIfNotLoaded("useStandardHeight", this._U, _typeRangeFormat, this._isNull);
                _throwIfApiNotSupported("RangeFormat.useStandardHeight", _defaultApiSetName, "1.7", _hostName);
                return this._U;
            },
            set: function (value) {
                this._U = value;
                _createSetPropertyAction(this.context, this, "UseStandardHeight", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "useStandardWidth", {
            get: function () {
                _throwIfNotLoaded("useStandardWidth", this._Us, _typeRangeFormat, this._isNull);
                _throwIfApiNotSupported("RangeFormat.useStandardWidth", _defaultApiSetName, "1.7", _hostName);
                return this._Us;
            },
            set: function (value) {
                this._Us = value;
                _createSetPropertyAction(this.context, this, "UseStandardWidth", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "verticalAlignment", {
            get: function () {
                _throwIfNotLoaded("verticalAlignment", this._V, _typeRangeFormat, this._isNull);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "VerticalAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFormat.prototype, "wrapText", {
            get: function () {
                _throwIfNotLoaded("wrapText", this._W, _typeRangeFormat, this._isNull);
                return this._W;
            },
            set: function (value) {
                this._W = value;
                _createSetPropertyAction(this.context, this, "WrapText", value);
            },
            enumerable: true,
            configurable: true
        });
        RangeFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["wrapText", "horizontalAlignment", "verticalAlignment", "columnWidth", "rowHeight", "textOrientation", "useStandardHeight", "useStandardWidth"], ["fill", "font", "protection"], [
                "borders"
            ]);
        };
        RangeFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        RangeFormat.prototype.autofitColumns = function () {
            _throwIfApiNotSupported("RangeFormat.autofitColumns", _defaultApiSetName, "1.2", _hostName);
            _createMethodAction(this.context, this, "AutofitColumns", 0, [], false);
        };
        RangeFormat.prototype.autofitRows = function () {
            _throwIfApiNotSupported("RangeFormat.autofitRows", _defaultApiSetName, "1.2", _hostName);
            _createMethodAction(this.context, this, "AutofitRows", 0, [], false);
        };
        RangeFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["ColumnWidth"])) {
                this._C = obj["ColumnWidth"];
            }
            if (!_isUndefined(obj["HorizontalAlignment"])) {
                this._H = obj["HorizontalAlignment"];
            }
            if (!_isUndefined(obj["RowHeight"])) {
                this._R = obj["RowHeight"];
            }
            if (!_isUndefined(obj["TextOrientation"])) {
                this._T = obj["TextOrientation"];
            }
            if (!_isUndefined(obj["UseStandardHeight"])) {
                this._U = obj["UseStandardHeight"];
            }
            if (!_isUndefined(obj["UseStandardWidth"])) {
                this._Us = obj["UseStandardWidth"];
            }
            if (!_isUndefined(obj["VerticalAlignment"])) {
                this._V = obj["VerticalAlignment"];
            }
            if (!_isUndefined(obj["WrapText"])) {
                this._W = obj["WrapText"];
            }
            _handleNavigationPropertyResults(this, obj, ["borders", "Borders", "fill", "Fill", "font", "Font", "protection", "Protection"]);
        };
        RangeFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        RangeFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        RangeFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        RangeFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "columnWidth": this._C,
                "horizontalAlignment": this._H,
                "rowHeight": this._R,
                "textOrientation": this._T,
                "useStandardHeight": this._U,
                "useStandardWidth": this._Us,
                "verticalAlignment": this._V,
                "wrapText": this._W,
            }, {
                "borders": this._B,
                "fill": this._F,
                "font": this._Fo,
                "protection": this._P,
            });
        };
        RangeFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return RangeFormat;
    }(OfficeExtension.ClientObject));
    Excel.RangeFormat = RangeFormat;
    var _typeFormatProtection = "FormatProtection";
    var FormatProtection = (function (_super) {
        __extends(FormatProtection, _super);
        function FormatProtection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FormatProtection.prototype, "_className", {
            get: function () {
                return "FormatProtection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormatProtection.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["locked", "formulaHidden"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormatProtection.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormatProtection.prototype, "formulaHidden", {
            get: function () {
                _throwIfNotLoaded("formulaHidden", this._F, _typeFormatProtection, this._isNull);
                return this._F;
            },
            set: function (value) {
                this._F = value;
                _createSetPropertyAction(this.context, this, "FormulaHidden", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormatProtection.prototype, "locked", {
            get: function () {
                _throwIfNotLoaded("locked", this._L, _typeFormatProtection, this._isNull);
                return this._L;
            },
            set: function (value) {
                this._L = value;
                _createSetPropertyAction(this.context, this, "Locked", value);
            },
            enumerable: true,
            configurable: true
        });
        FormatProtection.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["locked", "formulaHidden"], [], []);
        };
        FormatProtection.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        FormatProtection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["FormulaHidden"])) {
                this._F = obj["FormulaHidden"];
            }
            if (!_isUndefined(obj["Locked"])) {
                this._L = obj["Locked"];
            }
        };
        FormatProtection.prototype.load = function (option) {
            return _load(this, option);
        };
        FormatProtection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        FormatProtection.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        FormatProtection.prototype.toJSON = function () {
            return _toJson(this, {
                "formulaHidden": this._F,
                "locked": this._L,
            }, {});
        };
        FormatProtection.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return FormatProtection;
    }(OfficeExtension.ClientObject));
    Excel.FormatProtection = FormatProtection;
    var _typeRangeFill = "RangeFill";
    var RangeFill = (function (_super) {
        __extends(RangeFill, _super);
        function RangeFill() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RangeFill.prototype, "_className", {
            get: function () {
                return "RangeFill";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFill.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["color"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFill.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFill.prototype, "color", {
            get: function () {
                _throwIfNotLoaded("color", this._C, _typeRangeFill, this._isNull);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Color", value);
            },
            enumerable: true,
            configurable: true
        });
        RangeFill.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["color"], [], []);
        };
        RangeFill.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        RangeFill.prototype.clear = function () {
            _createMethodAction(this.context, this, "Clear", 0, [], false);
        };
        RangeFill.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Color"])) {
                this._C = obj["Color"];
            }
        };
        RangeFill.prototype.load = function (option) {
            return _load(this, option);
        };
        RangeFill.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        RangeFill.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        RangeFill.prototype.toJSON = function () {
            return _toJson(this, {
                "color": this._C,
            }, {});
        };
        RangeFill.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return RangeFill;
    }(OfficeExtension.ClientObject));
    Excel.RangeFill = RangeFill;
    var _typeRangeBorder = "RangeBorder";
    var RangeBorder = (function (_super) {
        __extends(RangeBorder, _super);
        function RangeBorder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RangeBorder.prototype, "_className", {
            get: function () {
                return "RangeBorder";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeBorder.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["sideIndex", "style", "weight", "color"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeBorder.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [false, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeBorder.prototype, "color", {
            get: function () {
                _throwIfNotLoaded("color", this._C, _typeRangeBorder, this._isNull);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Color", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeBorder.prototype, "sideIndex", {
            get: function () {
                _throwIfNotLoaded("sideIndex", this._S, _typeRangeBorder, this._isNull);
                return this._S;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeBorder.prototype, "style", {
            get: function () {
                _throwIfNotLoaded("style", this._St, _typeRangeBorder, this._isNull);
                return this._St;
            },
            set: function (value) {
                this._St = value;
                _createSetPropertyAction(this.context, this, "Style", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeBorder.prototype, "weight", {
            get: function () {
                _throwIfNotLoaded("weight", this._W, _typeRangeBorder, this._isNull);
                return this._W;
            },
            set: function (value) {
                this._W = value;
                _createSetPropertyAction(this.context, this, "Weight", value);
            },
            enumerable: true,
            configurable: true
        });
        RangeBorder.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["style", "weight", "color"], [], []);
        };
        RangeBorder.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        RangeBorder.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Color"])) {
                this._C = obj["Color"];
            }
            if (!_isUndefined(obj["SideIndex"])) {
                this._S = obj["SideIndex"];
            }
            if (!_isUndefined(obj["Style"])) {
                this._St = obj["Style"];
            }
            if (!_isUndefined(obj["Weight"])) {
                this._W = obj["Weight"];
            }
        };
        RangeBorder.prototype.load = function (option) {
            return _load(this, option);
        };
        RangeBorder.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        RangeBorder.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        RangeBorder.prototype.toJSON = function () {
            return _toJson(this, {
                "color": this._C,
                "sideIndex": this._S,
                "style": this._St,
                "weight": this._W,
            }, {});
        };
        RangeBorder.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return RangeBorder;
    }(OfficeExtension.ClientObject));
    Excel.RangeBorder = RangeBorder;
    var _typeRangeBorderCollection = "RangeBorderCollection";
    var RangeBorderCollection = (function (_super) {
        __extends(RangeBorderCollection, _super);
        function RangeBorderCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RangeBorderCollection.prototype, "_className", {
            get: function () {
                return "RangeBorderCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeBorderCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeBorderCollection.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["count"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeBorderCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeRangeBorderCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeBorderCollection.prototype, "count", {
            get: function () {
                _throwIfNotLoaded("count", this._C, _typeRangeBorderCollection, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        RangeBorderCollection.prototype.getItem = function (index) {
            return new Excel.RangeBorder(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        RangeBorderCollection.prototype.getItemAt = function (index) {
            return new Excel.RangeBorder(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        RangeBorderCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Count"])) {
                this._C = obj["Count"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.RangeBorder(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        RangeBorderCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        RangeBorderCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        RangeBorderCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.RangeBorder(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        RangeBorderCollection.prototype.toJSON = function () {
            return _toJson(this, {
                "count": this._C,
            }, {}, this.m__items);
        };
        return RangeBorderCollection;
    }(OfficeExtension.ClientObject));
    Excel.RangeBorderCollection = RangeBorderCollection;
    var _typeRangeFont = "RangeFont";
    var RangeFont = (function (_super) {
        __extends(RangeFont, _super);
        function RangeFont() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RangeFont.prototype, "_className", {
            get: function () {
                return "RangeFont";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFont.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["name", "size", "color", "italic", "bold", "underline"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFont.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFont.prototype, "bold", {
            get: function () {
                _throwIfNotLoaded("bold", this._B, _typeRangeFont, this._isNull);
                return this._B;
            },
            set: function (value) {
                this._B = value;
                _createSetPropertyAction(this.context, this, "Bold", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFont.prototype, "color", {
            get: function () {
                _throwIfNotLoaded("color", this._C, _typeRangeFont, this._isNull);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Color", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFont.prototype, "italic", {
            get: function () {
                _throwIfNotLoaded("italic", this._I, _typeRangeFont, this._isNull);
                return this._I;
            },
            set: function (value) {
                this._I = value;
                _createSetPropertyAction(this.context, this, "Italic", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFont.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typeRangeFont, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "Name", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFont.prototype, "size", {
            get: function () {
                _throwIfNotLoaded("size", this._S, _typeRangeFont, this._isNull);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "Size", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RangeFont.prototype, "underline", {
            get: function () {
                _throwIfNotLoaded("underline", this._U, _typeRangeFont, this._isNull);
                return this._U;
            },
            set: function (value) {
                this._U = value;
                _createSetPropertyAction(this.context, this, "Underline", value);
            },
            enumerable: true,
            configurable: true
        });
        RangeFont.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["name", "size", "color", "italic", "bold", "underline"], [], []);
        };
        RangeFont.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        RangeFont.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Bold"])) {
                this._B = obj["Bold"];
            }
            if (!_isUndefined(obj["Color"])) {
                this._C = obj["Color"];
            }
            if (!_isUndefined(obj["Italic"])) {
                this._I = obj["Italic"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["Size"])) {
                this._S = obj["Size"];
            }
            if (!_isUndefined(obj["Underline"])) {
                this._U = obj["Underline"];
            }
        };
        RangeFont.prototype.load = function (option) {
            return _load(this, option);
        };
        RangeFont.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        RangeFont.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        RangeFont.prototype.toJSON = function () {
            return _toJson(this, {
                "bold": this._B,
                "color": this._C,
                "italic": this._I,
                "name": this._N,
                "size": this._S,
                "underline": this._U,
            }, {});
        };
        RangeFont.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return RangeFont;
    }(OfficeExtension.ClientObject));
    Excel.RangeFont = RangeFont;
    var _typeChartCollection = "ChartCollection";
    var ChartCollection = (function (_super) {
        __extends(ChartCollection, _super);
        function ChartCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartCollection.prototype, "_className", {
            get: function () {
                return "ChartCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartCollection.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["count"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartCollection.prototype, "_ParentObject", {
            get: function () {
                return this.m__ParentObject;
            },
            set: function (value) {
                this.m__ParentObject = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeChartCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartCollection.prototype, "count", {
            get: function () {
                _throwIfNotLoaded("count", this._C, _typeChartCollection, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        ChartCollection.prototype.add = function (type, sourceData, seriesBy) {
            if (!(sourceData instanceof Range)) {
                throw OfficeExtension.Utility.createRuntimeError(OfficeExtension.ResourceStrings.invalidArgument, "sourceData", "Charts.Add");
            }
            return new Excel.Chart(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [type, sourceData, seriesBy], false, true, null, false));
        };
        ChartCollection.prototype.getCount = function () {
            _throwIfApiNotSupported("ChartCollection.getCount", _defaultApiSetName, "1.4", _hostName);
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        ChartCollection.prototype.getItem = function (name) {
            return new Excel.Chart(this.context, _createMethodObjectPath(this.context, this, "GetItem", 1, [name], false, false, null, false));
        };
        ChartCollection.prototype.getItemAt = function (index) {
            return new Excel.Chart(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        ChartCollection.prototype.getItemOrNullObject = function (name) {
            _throwIfApiNotSupported("ChartCollection.getItemOrNullObject", _defaultApiSetName, "1.4", _hostName);
            return new Excel.Chart(this.context, _createMethodObjectPath(this.context, this, "GetItemOrNullObject", 1, [name], false, false, null, false));
        };
        ChartCollection.prototype._GetItem = function (key) {
            return new Excel.Chart(this.context, _createIndexerObjectPath(this.context, this, [key]));
        };
        ChartCollection.prototype._RegisterActivatedEvent = function () {
            _throwIfApiNotSupported("ChartCollection._RegisterActivatedEvent", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "_RegisterActivatedEvent", 0, [], false);
        };
        ChartCollection.prototype._RegisterAddedEvent = function () {
            _throwIfApiNotSupported("ChartCollection._RegisterAddedEvent", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "_RegisterAddedEvent", 0, [], false);
        };
        ChartCollection.prototype._RegisterDeactivatedEvent = function () {
            _throwIfApiNotSupported("ChartCollection._RegisterDeactivatedEvent", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "_RegisterDeactivatedEvent", 0, [], false);
        };
        ChartCollection.prototype._UnregisterActivatedEvent = function () {
            _throwIfApiNotSupported("ChartCollection._UnregisterActivatedEvent", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "_UnregisterActivatedEvent", 0, [], false);
        };
        ChartCollection.prototype._UnregisterAddedEvent = function () {
            _throwIfApiNotSupported("ChartCollection._UnregisterAddedEvent", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "_UnregisterAddedEvent", 0, [], false);
        };
        ChartCollection.prototype._UnregisterDeactivatedEvent = function () {
            _throwIfApiNotSupported("ChartCollection._UnregisterDeactivatedEvent", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "_UnregisterDeactivatedEvent", 0, [], false);
        };
        ChartCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Count"])) {
                this._C = obj["Count"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.Chart(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        ChartCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.Chart(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        Object.defineProperty(ChartCollection.prototype, "onActivated", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("ChartCollection.onActivated", _defaultApiSetName, "1.8", _hostName);
                if (!this.m_activated) {
                    this.m_activated = new OfficeExtension.GenericEventHandlers(this.context, this, "Activated", {
                        eventType: 51,
                        registerFunc: function () { return _this._RegisterActivatedEvent(); },
                        unregisterFunc: function () { return _this._UnregisterActivatedEvent(); },
                        getTargetIdFunc: function () { return _this._ParentObject.id; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                type: EventType.chartActivated,
                                worksheetId: value.worksheetId,
                                chartId: value.chartId,
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_activated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartCollection.prototype, "onAdded", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("ChartCollection.onAdded", _defaultApiSetName, "1.8", _hostName);
                if (!this.m_added) {
                    this.m_added = new OfficeExtension.GenericEventHandlers(this.context, this, "Added", {
                        eventType: 50,
                        registerFunc: function () { return _this._RegisterAddedEvent(); },
                        unregisterFunc: function () { return _this._UnregisterAddedEvent(); },
                        getTargetIdFunc: function () { return _this._ParentObject.id; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                type: EventType.chartAdded,
                                source: value.source,
                                worksheetId: value.worksheetId,
                                chartId: value.chartId,
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_added;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartCollection.prototype, "onDeactivated", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("ChartCollection.onDeactivated", _defaultApiSetName, "1.8", _hostName);
                if (!this.m_deactivated) {
                    this.m_deactivated = new OfficeExtension.GenericEventHandlers(this.context, this, "Deactivated", {
                        eventType: 52,
                        registerFunc: function () { return _this._RegisterDeactivatedEvent(); },
                        unregisterFunc: function () { return _this._UnregisterDeactivatedEvent(); },
                        getTargetIdFunc: function () { return _this._ParentObject.id; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                type: EventType.chartDeactivated,
                                worksheetId: value.worksheetId,
                                chartId: value.chartId,
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_deactivated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartCollection.prototype, "onDeleted", {
            get: function () {
                _throwIfApiNotSupported("ChartCollection.onDeleted", _defaultApiSetName, "1.8", _hostName);
                if (!this.m_deleted) {
                    this.m_deleted = new OfficeExtension.GenericEventHandlers(this.context, this, "Deleted", {
                        eventType: 53,
                        registerFunc: function () { return null; },
                        unregisterFunc: function () { return null; },
                        getTargetIdFunc: null,
                        eventArgsTransformFunc: function (value) {
                            return null;
                        }
                    });
                }
                return this.m_deleted;
            },
            enumerable: true,
            configurable: true
        });
        ChartCollection.prototype.toJSON = function () {
            return _toJson(this, {
                "count": this._C,
            }, {}, this.m__items);
        };
        return ChartCollection;
    }(OfficeExtension.ClientObject));
    Excel.ChartCollection = ChartCollection;
    var _typeChart = "Chart";
    var Chart = (function (_super) {
        __extends(Chart, _super);
        function Chart() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Chart.prototype, "_className", {
            get: function () {
                return "Chart";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["name", "top", "left", "width", "height", "id", "showAllFieldButtons", "chartType"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, false, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["title", "dataLabels", "legend", "series", "axes", "format", "worksheet"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "axes", {
            get: function () {
                if (!this._A) {
                    this._A = new Excel.ChartAxes(this.context, _createPropertyObjectPath(this.context, this, "Axes", false, false, false));
                }
                return this._A;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "dataLabels", {
            get: function () {
                if (!this._D) {
                    this._D = new Excel.ChartDataLabels(this.context, _createPropertyObjectPath(this.context, this, "DataLabels", false, false, false));
                }
                return this._D;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartAreaFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "legend", {
            get: function () {
                if (!this._Le) {
                    this._Le = new Excel.ChartLegend(this.context, _createPropertyObjectPath(this.context, this, "Legend", false, false, false));
                }
                return this._Le;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "series", {
            get: function () {
                if (!this._S) {
                    this._S = new Excel.ChartSeriesCollection(this.context, _createPropertyObjectPath(this.context, this, "Series", true, false, false));
                }
                return this._S;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "title", {
            get: function () {
                if (!this._T) {
                    this._T = new Excel.ChartTitle(this.context, _createPropertyObjectPath(this.context, this, "Title", false, false, false));
                }
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "worksheet", {
            get: function () {
                _throwIfApiNotSupported("Chart.worksheet", _defaultApiSetName, "1.2", _hostName);
                if (!this._Wo) {
                    this._Wo = new Excel.Worksheet(this.context, _createPropertyObjectPath(this.context, this, "Worksheet", false, false, false));
                }
                return this._Wo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "chartType", {
            get: function () {
                _throwIfNotLoaded("chartType", this._C, _typeChart, this._isNull);
                _throwIfApiNotSupported("Chart.chartType", _defaultApiSetName, "1.7", _hostName);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "ChartType", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "height", {
            get: function () {
                _throwIfNotLoaded("height", this._H, _typeChart, this._isNull);
                return this._H;
            },
            set: function (value) {
                this._H = value;
                _createSetPropertyAction(this.context, this, "Height", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "id", {
            get: function () {
                _throwIfNotLoaded("id", this._I, _typeChart, this._isNull);
                _throwIfApiNotSupported("Chart.id", _defaultApiSetName, "1.7", _hostName);
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "left", {
            get: function () {
                _throwIfNotLoaded("left", this._L, _typeChart, this._isNull);
                return this._L;
            },
            set: function (value) {
                this._L = value;
                _createSetPropertyAction(this.context, this, "Left", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typeChart, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "Name", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "showAllFieldButtons", {
            get: function () {
                _throwIfNotLoaded("showAllFieldButtons", this._Sh, _typeChart, this._isNull);
                _throwIfApiNotSupported("Chart.showAllFieldButtons", _defaultApiSetName, "1.7", _hostName);
                return this._Sh;
            },
            set: function (value) {
                this._Sh = value;
                _createSetPropertyAction(this.context, this, "ShowAllFieldButtons", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "top", {
            get: function () {
                _throwIfNotLoaded("top", this._To, _typeChart, this._isNull);
                return this._To;
            },
            set: function (value) {
                this._To = value;
                _createSetPropertyAction(this.context, this, "Top", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "width", {
            get: function () {
                _throwIfNotLoaded("width", this._W, _typeChart, this._isNull);
                return this._W;
            },
            set: function (value) {
                this._W = value;
                _createSetPropertyAction(this.context, this, "Width", value);
            },
            enumerable: true,
            configurable: true
        });
        Chart.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["name", "top", "left", "width", "height", "showAllFieldButtons", "chartType"], ["title", "dataLabels", "legend", "axes", "format"], [
                "series",
                "worksheet"
            ]);
        };
        Chart.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        Chart.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        Chart.prototype.getImage = function (width, height, fittingMode) {
            _throwIfApiNotSupported("Chart.getImage", _defaultApiSetName, "1.2", _hostName);
            var action = _createMethodAction(this.context, this, "GetImage", 1, [width, height, fittingMode], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        Chart.prototype.setData = function (sourceData, seriesBy) {
            if (!(sourceData instanceof Range)) {
                throw OfficeExtension.Utility.createRuntimeError(OfficeExtension.ResourceStrings.invalidArgument, "sourceData", "Chart.setData");
            }
            _createMethodAction(this.context, this, "SetData", 0, [sourceData, seriesBy], false);
        };
        Chart.prototype.setPosition = function (startCell, endCell) {
            _createMethodAction(this.context, this, "SetPosition", 0, [startCell, endCell], false);
        };
        Chart.prototype._RegisterActivatedEvent = function () {
            _throwIfApiNotSupported("Chart._RegisterActivatedEvent", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "_RegisterActivatedEvent", 0, [], false);
        };
        Chart.prototype._RegisterDeactivatedEvent = function () {
            _throwIfApiNotSupported("Chart._RegisterDeactivatedEvent", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "_RegisterDeactivatedEvent", 0, [], false);
        };
        Chart.prototype._UnregisterActivatedEvent = function () {
            _throwIfApiNotSupported("Chart._UnregisterActivatedEvent", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "_UnregisterActivatedEvent", 0, [], false);
        };
        Chart.prototype._UnregisterDeactivatedEvent = function () {
            _throwIfApiNotSupported("Chart._UnregisterDeactivatedEvent", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "_UnregisterDeactivatedEvent", 0, [], false);
        };
        Chart.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["ChartType"])) {
                this._C = obj["ChartType"];
            }
            if (!_isUndefined(obj["Height"])) {
                this._H = obj["Height"];
            }
            if (!_isUndefined(obj["Id"])) {
                this._I = obj["Id"];
            }
            if (!_isUndefined(obj["Left"])) {
                this._L = obj["Left"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["ShowAllFieldButtons"])) {
                this._Sh = obj["ShowAllFieldButtons"];
            }
            if (!_isUndefined(obj["Top"])) {
                this._To = obj["Top"];
            }
            if (!_isUndefined(obj["Width"])) {
                this._W = obj["Width"];
            }
            _handleNavigationPropertyResults(this, obj, ["axes", "Axes", "dataLabels", "DataLabels", "format", "Format", "legend", "Legend", "series", "Series", "title", "Title", "worksheet", "Worksheet"]);
        };
        Chart.prototype.load = function (option) {
            return _load(this, option);
        };
        Chart.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        Chart.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["Id"])) {
                this._I = value["Id"];
            }
        };
        Chart.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Object.defineProperty(Chart.prototype, "onActivated", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("Chart.onActivated", _defaultApiSetName, "1.8", _hostName);
                if (!this.m_activated) {
                    this.m_activated = new OfficeExtension.GenericEventHandlers(this.context, this, "Activated", {
                        eventType: 51,
                        registerFunc: function () { _this._RegisterActivatedEvent(); },
                        unregisterFunc: function () { _this._UnregisterActivatedEvent(); },
                        getTargetIdFunc: function () { return _this.id; },
                        eventArgsTransformFunc: function (value) {
                            var event = {
                                type: EventType.chartActivated,
                                worksheetId: value.worksheetId,
                                chartId: value.chartId
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(event);
                        }
                    });
                }
                return this.m_activated;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Chart.prototype, "onDeactivated", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("Chart.onDeactivated", _defaultApiSetName, "1.8", _hostName);
                if (!this.m_deactivated) {
                    this.m_deactivated = new OfficeExtension.GenericEventHandlers(this.context, this, "Deactivated", {
                        eventType: 52,
                        registerFunc: function () { _this._RegisterDeactivatedEvent(); },
                        unregisterFunc: function () { _this._UnregisterDeactivatedEvent(); },
                        getTargetIdFunc: function () { return _this.id; },
                        eventArgsTransformFunc: function (value) {
                            var event = {
                                type: EventType.chartDeactivated,
                                worksheetId: value.worksheetId,
                                chartId: value.chartId
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(event);
                        }
                    });
                }
                return this.m_deactivated;
            },
            enumerable: true,
            configurable: true
        });
        Chart.prototype.toJSON = function () {
            return _toJson(this, {
                "chartType": this._C,
                "height": this._H,
                "id": this._I,
                "left": this._L,
                "name": this._N,
                "showAllFieldButtons": this._Sh,
                "top": this._To,
                "width": this._W,
            }, {
                "axes": this._A,
                "dataLabels": this._D,
                "format": this._F,
                "legend": this._Le,
                "series": this._S,
                "title": this._T,
            });
        };
        Chart.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return Chart;
    }(OfficeExtension.ClientObject));
    Excel.Chart = Chart;
    var _typeChartAreaFormat = "ChartAreaFormat";
    var ChartAreaFormat = (function (_super) {
        __extends(ChartAreaFormat, _super);
        function ChartAreaFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartAreaFormat.prototype, "_className", {
            get: function () {
                return "ChartAreaFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAreaFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["fill", "font", "border"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAreaFormat.prototype, "border", {
            get: function () {
                _throwIfApiNotSupported("ChartAreaFormat.border", _defaultApiSetName, "1.7", _hostName);
                if (!this._B) {
                    this._B = new Excel.ChartBorder(this.context, _createPropertyObjectPath(this.context, this, "Border", false, false, false));
                }
                return this._B;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAreaFormat.prototype, "fill", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartFill(this.context, _createPropertyObjectPath(this.context, this, "Fill", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAreaFormat.prototype, "font", {
            get: function () {
                if (!this._Fo) {
                    this._Fo = new Excel.ChartFont(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false, false));
                }
                return this._Fo;
            },
            enumerable: true,
            configurable: true
        });
        ChartAreaFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["font", "border"], [
                "fill"
            ]);
        };
        ChartAreaFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartAreaFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["border", "Border", "fill", "Fill", "font", "Font"]);
        };
        ChartAreaFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartAreaFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartAreaFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartAreaFormat.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "border": this._B,
                "font": this._Fo,
            });
        };
        ChartAreaFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartAreaFormat;
    }(OfficeExtension.ClientObject));
    Excel.ChartAreaFormat = ChartAreaFormat;
    var _typeChartSeriesCollection = "ChartSeriesCollection";
    var ChartSeriesCollection = (function (_super) {
        __extends(ChartSeriesCollection, _super);
        function ChartSeriesCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartSeriesCollection.prototype, "_className", {
            get: function () {
                return "ChartSeriesCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeriesCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeriesCollection.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["count"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeriesCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeChartSeriesCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeriesCollection.prototype, "count", {
            get: function () {
                _throwIfNotLoaded("count", this._C, _typeChartSeriesCollection, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        ChartSeriesCollection.prototype.add = function (name, index) {
            _throwIfApiNotSupported("ChartSeriesCollection.add", _defaultApiSetName, "1.7", _hostName);
            return new Excel.ChartSeries(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [name, index], false, true, null, false));
        };
        ChartSeriesCollection.prototype.getCount = function () {
            _throwIfApiNotSupported("ChartSeriesCollection.getCount", _defaultApiSetName, "1.4", _hostName);
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        ChartSeriesCollection.prototype.getItemAt = function (index) {
            return new Excel.ChartSeries(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        ChartSeriesCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Count"])) {
                this._C = obj["Count"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.ChartSeries(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(false, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        ChartSeriesCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartSeriesCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartSeriesCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.ChartSeries(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(false, _this.context, _this, childItemData, index)); });
        };
        ChartSeriesCollection.prototype.toJSON = function () {
            return _toJson(this, {
                "count": this._C,
            }, {}, this.m__items);
        };
        return ChartSeriesCollection;
    }(OfficeExtension.ClientObject));
    Excel.ChartSeriesCollection = ChartSeriesCollection;
    var _typeChartSeries = "ChartSeries";
    var ChartSeries = (function (_super) {
        __extends(ChartSeries, _super);
        function ChartSeries() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartSeries.prototype, "_className", {
            get: function () {
                return "ChartSeries";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["name", "chartType", "hasDataLabels", "filtered", "markerSize", "markerStyle", "showShadow", "markerBackgroundColor", "markerForegroundColor", "smooth", "plotOrder", "gapWidth", "doughnutHoleSize"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, true, true, true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["points", "format", "trendlines"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "format", {
            get: function () {
                if (!this._Fo) {
                    this._Fo = new Excel.ChartSeriesFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._Fo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "points", {
            get: function () {
                if (!this._Po) {
                    this._Po = new Excel.ChartPointsCollection(this.context, _createPropertyObjectPath(this.context, this, "Points", true, false, false));
                }
                return this._Po;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "trendlines", {
            get: function () {
                _throwIfApiNotSupported("ChartSeries.trendlines", _defaultApiSetName, "1.7", _hostName);
                if (!this._T) {
                    this._T = new Excel.ChartTrendlineCollection(this.context, _createPropertyObjectPath(this.context, this, "Trendlines", true, false, false));
                }
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "chartType", {
            get: function () {
                _throwIfNotLoaded("chartType", this._C, _typeChartSeries, this._isNull);
                _throwIfApiNotSupported("ChartSeries.chartType", _defaultApiSetName, "1.7", _hostName);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "ChartType", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "doughnutHoleSize", {
            get: function () {
                _throwIfNotLoaded("doughnutHoleSize", this._D, _typeChartSeries, this._isNull);
                _throwIfApiNotSupported("ChartSeries.doughnutHoleSize", _defaultApiSetName, "1.7", _hostName);
                return this._D;
            },
            set: function (value) {
                this._D = value;
                _createSetPropertyAction(this.context, this, "DoughnutHoleSize", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "filtered", {
            get: function () {
                _throwIfNotLoaded("filtered", this._F, _typeChartSeries, this._isNull);
                _throwIfApiNotSupported("ChartSeries.filtered", _defaultApiSetName, "1.7", _hostName);
                return this._F;
            },
            set: function (value) {
                this._F = value;
                _createSetPropertyAction(this.context, this, "Filtered", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "gapWidth", {
            get: function () {
                _throwIfNotLoaded("gapWidth", this._G, _typeChartSeries, this._isNull);
                _throwIfApiNotSupported("ChartSeries.gapWidth", _defaultApiSetName, "1.7", _hostName);
                return this._G;
            },
            set: function (value) {
                this._G = value;
                _createSetPropertyAction(this.context, this, "GapWidth", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "hasDataLabels", {
            get: function () {
                _throwIfNotLoaded("hasDataLabels", this._H, _typeChartSeries, this._isNull);
                _throwIfApiNotSupported("ChartSeries.hasDataLabels", _defaultApiSetName, "1.7", _hostName);
                return this._H;
            },
            set: function (value) {
                this._H = value;
                _createSetPropertyAction(this.context, this, "HasDataLabels", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "markerBackgroundColor", {
            get: function () {
                _throwIfNotLoaded("markerBackgroundColor", this._M, _typeChartSeries, this._isNull);
                _throwIfApiNotSupported("ChartSeries.markerBackgroundColor", _defaultApiSetName, "1.7", _hostName);
                return this._M;
            },
            set: function (value) {
                this._M = value;
                _createSetPropertyAction(this.context, this, "MarkerBackgroundColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "markerForegroundColor", {
            get: function () {
                _throwIfNotLoaded("markerForegroundColor", this._Ma, _typeChartSeries, this._isNull);
                _throwIfApiNotSupported("ChartSeries.markerForegroundColor", _defaultApiSetName, "1.7", _hostName);
                return this._Ma;
            },
            set: function (value) {
                this._Ma = value;
                _createSetPropertyAction(this.context, this, "MarkerForegroundColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "markerSize", {
            get: function () {
                _throwIfNotLoaded("markerSize", this._Mar, _typeChartSeries, this._isNull);
                _throwIfApiNotSupported("ChartSeries.markerSize", _defaultApiSetName, "1.7", _hostName);
                return this._Mar;
            },
            set: function (value) {
                this._Mar = value;
                _createSetPropertyAction(this.context, this, "MarkerSize", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "markerStyle", {
            get: function () {
                _throwIfNotLoaded("markerStyle", this._Mark, _typeChartSeries, this._isNull);
                _throwIfApiNotSupported("ChartSeries.markerStyle", _defaultApiSetName, "1.7", _hostName);
                return this._Mark;
            },
            set: function (value) {
                this._Mark = value;
                _createSetPropertyAction(this.context, this, "MarkerStyle", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typeChartSeries, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "Name", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "plotOrder", {
            get: function () {
                _throwIfNotLoaded("plotOrder", this._P, _typeChartSeries, this._isNull);
                _throwIfApiNotSupported("ChartSeries.plotOrder", _defaultApiSetName, "1.7", _hostName);
                return this._P;
            },
            set: function (value) {
                this._P = value;
                _createSetPropertyAction(this.context, this, "PlotOrder", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "showShadow", {
            get: function () {
                _throwIfNotLoaded("showShadow", this._S, _typeChartSeries, this._isNull);
                _throwIfApiNotSupported("ChartSeries.showShadow", _defaultApiSetName, "1.7", _hostName);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "ShowShadow", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeries.prototype, "smooth", {
            get: function () {
                _throwIfNotLoaded("smooth", this._Sm, _typeChartSeries, this._isNull);
                _throwIfApiNotSupported("ChartSeries.smooth", _defaultApiSetName, "1.7", _hostName);
                return this._Sm;
            },
            set: function (value) {
                this._Sm = value;
                _createSetPropertyAction(this.context, this, "Smooth", value);
            },
            enumerable: true,
            configurable: true
        });
        ChartSeries.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["name", "chartType", "hasDataLabels", "filtered", "markerSize", "markerStyle", "showShadow", "markerBackgroundColor", "markerForegroundColor", "smooth", "plotOrder", "gapWidth", "doughnutHoleSize"], ["format"], [
                "points",
                "trendlines"
            ]);
        };
        ChartSeries.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartSeries.prototype.delete = function () {
            _throwIfApiNotSupported("ChartSeries.delete", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        ChartSeries.prototype.setBubbleSizes = function (sourceData) {
            _throwIfApiNotSupported("ChartSeries.setBubbleSizes", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "SetBubbleSizes", 0, [sourceData], false);
        };
        ChartSeries.prototype.setValues = function (sourceData) {
            _throwIfApiNotSupported("ChartSeries.setValues", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "SetValues", 0, [sourceData], false);
        };
        ChartSeries.prototype.setXAxisValues = function (sourceData) {
            _throwIfApiNotSupported("ChartSeries.setXAxisValues", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "SetXAxisValues", 0, [sourceData], false);
        };
        ChartSeries.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["ChartType"])) {
                this._C = obj["ChartType"];
            }
            if (!_isUndefined(obj["DoughnutHoleSize"])) {
                this._D = obj["DoughnutHoleSize"];
            }
            if (!_isUndefined(obj["Filtered"])) {
                this._F = obj["Filtered"];
            }
            if (!_isUndefined(obj["GapWidth"])) {
                this._G = obj["GapWidth"];
            }
            if (!_isUndefined(obj["HasDataLabels"])) {
                this._H = obj["HasDataLabels"];
            }
            if (!_isUndefined(obj["MarkerBackgroundColor"])) {
                this._M = obj["MarkerBackgroundColor"];
            }
            if (!_isUndefined(obj["MarkerForegroundColor"])) {
                this._Ma = obj["MarkerForegroundColor"];
            }
            if (!_isUndefined(obj["MarkerSize"])) {
                this._Mar = obj["MarkerSize"];
            }
            if (!_isUndefined(obj["MarkerStyle"])) {
                this._Mark = obj["MarkerStyle"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["PlotOrder"])) {
                this._P = obj["PlotOrder"];
            }
            if (!_isUndefined(obj["ShowShadow"])) {
                this._S = obj["ShowShadow"];
            }
            if (!_isUndefined(obj["Smooth"])) {
                this._Sm = obj["Smooth"];
            }
            _handleNavigationPropertyResults(this, obj, ["format", "Format", "points", "Points", "trendlines", "Trendlines"]);
        };
        ChartSeries.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartSeries.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartSeries.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartSeries.prototype.toJSON = function () {
            return _toJson(this, {
                "chartType": this._C,
                "doughnutHoleSize": this._D,
                "filtered": this._F,
                "gapWidth": this._G,
                "hasDataLabels": this._H,
                "markerBackgroundColor": this._M,
                "markerForegroundColor": this._Ma,
                "markerSize": this._Mar,
                "markerStyle": this._Mark,
                "name": this._N,
                "plotOrder": this._P,
                "showShadow": this._S,
                "smooth": this._Sm,
            }, {
                "format": this._Fo,
                "points": this._Po,
                "trendlines": this._T,
            });
        };
        ChartSeries.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartSeries;
    }(OfficeExtension.ClientObject));
    Excel.ChartSeries = ChartSeries;
    var _typeChartSeriesFormat = "ChartSeriesFormat";
    var ChartSeriesFormat = (function (_super) {
        __extends(ChartSeriesFormat, _super);
        function ChartSeriesFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartSeriesFormat.prototype, "_className", {
            get: function () {
                return "ChartSeriesFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeriesFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["fill", "line"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeriesFormat.prototype, "fill", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartFill(this.context, _createPropertyObjectPath(this.context, this, "Fill", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartSeriesFormat.prototype, "line", {
            get: function () {
                if (!this._L) {
                    this._L = new Excel.ChartLineFormat(this.context, _createPropertyObjectPath(this.context, this, "Line", false, false, false));
                }
                return this._L;
            },
            enumerable: true,
            configurable: true
        });
        ChartSeriesFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["line"], [
                "fill"
            ]);
        };
        ChartSeriesFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartSeriesFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["fill", "Fill", "line", "Line"]);
        };
        ChartSeriesFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartSeriesFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartSeriesFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartSeriesFormat.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "line": this._L,
            });
        };
        ChartSeriesFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartSeriesFormat;
    }(OfficeExtension.ClientObject));
    Excel.ChartSeriesFormat = ChartSeriesFormat;
    var _typeChartPointsCollection = "ChartPointsCollection";
    var ChartPointsCollection = (function (_super) {
        __extends(ChartPointsCollection, _super);
        function ChartPointsCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartPointsCollection.prototype, "_className", {
            get: function () {
                return "ChartPointsCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPointsCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPointsCollection.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["count"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPointsCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeChartPointsCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPointsCollection.prototype, "count", {
            get: function () {
                _throwIfNotLoaded("count", this._C, _typeChartPointsCollection, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        ChartPointsCollection.prototype.getCount = function () {
            _throwIfApiNotSupported("ChartPointsCollection.getCount", _defaultApiSetName, "1.4", _hostName);
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        ChartPointsCollection.prototype.getItemAt = function (index) {
            return new Excel.ChartPoint(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        ChartPointsCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Count"])) {
                this._C = obj["Count"];
            }
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.ChartPoint(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(false, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        ChartPointsCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartPointsCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartPointsCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.ChartPoint(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(false, _this.context, _this, childItemData, index)); });
        };
        ChartPointsCollection.prototype.toJSON = function () {
            return _toJson(this, {
                "count": this._C,
            }, {}, this.m__items);
        };
        return ChartPointsCollection;
    }(OfficeExtension.ClientObject));
    Excel.ChartPointsCollection = ChartPointsCollection;
    var _typeChartPoint = "ChartPoint";
    var ChartPoint = (function (_super) {
        __extends(ChartPoint, _super);
        function ChartPoint() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartPoint.prototype, "_className", {
            get: function () {
                return "ChartPoint";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPoint.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["value", "hasDataLabel", "markerStyle", "markerSize", "markerBackgroundColor", "markerForegroundColor"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPoint.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [false, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPoint.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["format", "dataLabel"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPoint.prototype, "dataLabel", {
            get: function () {
                _throwIfApiNotSupported("ChartPoint.dataLabel", _defaultApiSetName, "1.7", _hostName);
                if (!this._D) {
                    this._D = new Excel.ChartDataLabel(this.context, _createPropertyObjectPath(this.context, this, "DataLabel", false, false, false));
                }
                return this._D;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPoint.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartPointFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPoint.prototype, "hasDataLabel", {
            get: function () {
                _throwIfNotLoaded("hasDataLabel", this._H, _typeChartPoint, this._isNull);
                _throwIfApiNotSupported("ChartPoint.hasDataLabel", _defaultApiSetName, "1.7", _hostName);
                return this._H;
            },
            set: function (value) {
                this._H = value;
                _createSetPropertyAction(this.context, this, "HasDataLabel", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPoint.prototype, "markerBackgroundColor", {
            get: function () {
                _throwIfNotLoaded("markerBackgroundColor", this._M, _typeChartPoint, this._isNull);
                _throwIfApiNotSupported("ChartPoint.markerBackgroundColor", _defaultApiSetName, "1.7", _hostName);
                return this._M;
            },
            set: function (value) {
                this._M = value;
                _createSetPropertyAction(this.context, this, "MarkerBackgroundColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPoint.prototype, "markerForegroundColor", {
            get: function () {
                _throwIfNotLoaded("markerForegroundColor", this._Ma, _typeChartPoint, this._isNull);
                _throwIfApiNotSupported("ChartPoint.markerForegroundColor", _defaultApiSetName, "1.7", _hostName);
                return this._Ma;
            },
            set: function (value) {
                this._Ma = value;
                _createSetPropertyAction(this.context, this, "MarkerForegroundColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPoint.prototype, "markerSize", {
            get: function () {
                _throwIfNotLoaded("markerSize", this._Mar, _typeChartPoint, this._isNull);
                _throwIfApiNotSupported("ChartPoint.markerSize", _defaultApiSetName, "1.7", _hostName);
                return this._Mar;
            },
            set: function (value) {
                this._Mar = value;
                _createSetPropertyAction(this.context, this, "MarkerSize", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPoint.prototype, "markerStyle", {
            get: function () {
                _throwIfNotLoaded("markerStyle", this._Mark, _typeChartPoint, this._isNull);
                _throwIfApiNotSupported("ChartPoint.markerStyle", _defaultApiSetName, "1.7", _hostName);
                return this._Mark;
            },
            set: function (value) {
                this._Mark = value;
                _createSetPropertyAction(this.context, this, "MarkerStyle", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPoint.prototype, "value", {
            get: function () {
                _throwIfNotLoaded("value", this._V, _typeChartPoint, this._isNull);
                return this._V;
            },
            enumerable: true,
            configurable: true
        });
        ChartPoint.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["hasDataLabel", "markerStyle", "markerSize", "markerBackgroundColor", "markerForegroundColor"], ["format", "dataLabel"], []);
        };
        ChartPoint.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartPoint.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["HasDataLabel"])) {
                this._H = obj["HasDataLabel"];
            }
            if (!_isUndefined(obj["MarkerBackgroundColor"])) {
                this._M = obj["MarkerBackgroundColor"];
            }
            if (!_isUndefined(obj["MarkerForegroundColor"])) {
                this._Ma = obj["MarkerForegroundColor"];
            }
            if (!_isUndefined(obj["MarkerSize"])) {
                this._Mar = obj["MarkerSize"];
            }
            if (!_isUndefined(obj["MarkerStyle"])) {
                this._Mark = obj["MarkerStyle"];
            }
            if (!_isUndefined(obj["Value"])) {
                this._V = obj["Value"];
            }
            _handleNavigationPropertyResults(this, obj, ["dataLabel", "DataLabel", "format", "Format"]);
        };
        ChartPoint.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartPoint.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartPoint.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartPoint.prototype.toJSON = function () {
            return _toJson(this, {
                "hasDataLabel": this._H,
                "markerBackgroundColor": this._M,
                "markerForegroundColor": this._Ma,
                "markerSize": this._Mar,
                "markerStyle": this._Mark,
                "value": this._V,
            }, {
                "dataLabel": this._D,
                "format": this._F,
            });
        };
        ChartPoint.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartPoint;
    }(OfficeExtension.ClientObject));
    Excel.ChartPoint = ChartPoint;
    var _typeChartPointFormat = "ChartPointFormat";
    var ChartPointFormat = (function (_super) {
        __extends(ChartPointFormat, _super);
        function ChartPointFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartPointFormat.prototype, "_className", {
            get: function () {
                return "ChartPointFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPointFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["fill", "border"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPointFormat.prototype, "border", {
            get: function () {
                _throwIfApiNotSupported("ChartPointFormat.border", _defaultApiSetName, "1.7", _hostName);
                if (!this._B) {
                    this._B = new Excel.ChartBorder(this.context, _createPropertyObjectPath(this.context, this, "Border", false, false, false));
                }
                return this._B;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartPointFormat.prototype, "fill", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartFill(this.context, _createPropertyObjectPath(this.context, this, "Fill", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        ChartPointFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["border"], [
                "fill"
            ]);
        };
        ChartPointFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartPointFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["border", "Border", "fill", "Fill"]);
        };
        ChartPointFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartPointFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartPointFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartPointFormat.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "border": this._B,
            });
        };
        ChartPointFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartPointFormat;
    }(OfficeExtension.ClientObject));
    Excel.ChartPointFormat = ChartPointFormat;
    var _typeChartAxes = "ChartAxes";
    var ChartAxes = (function (_super) {
        __extends(ChartAxes, _super);
        function ChartAxes() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartAxes.prototype, "_className", {
            get: function () {
                return "ChartAxes";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxes.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["categoryAxis", "seriesAxis", "valueAxis"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxes.prototype, "categoryAxis", {
            get: function () {
                if (!this._C) {
                    this._C = new Excel.ChartAxis(this.context, _createPropertyObjectPath(this.context, this, "CategoryAxis", false, false, false));
                }
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxes.prototype, "seriesAxis", {
            get: function () {
                if (!this._S) {
                    this._S = new Excel.ChartAxis(this.context, _createPropertyObjectPath(this.context, this, "SeriesAxis", false, false, false));
                }
                return this._S;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxes.prototype, "valueAxis", {
            get: function () {
                if (!this._V) {
                    this._V = new Excel.ChartAxis(this.context, _createPropertyObjectPath(this.context, this, "ValueAxis", false, false, false));
                }
                return this._V;
            },
            enumerable: true,
            configurable: true
        });
        ChartAxes.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["categoryAxis", "seriesAxis", "valueAxis"], []);
        };
        ChartAxes.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartAxes.prototype.getItem = function (type, group) {
            _throwIfApiNotSupported("ChartAxes.getItem", _defaultApiSetName, "1.7", _hostName);
            return new Excel.ChartAxis(this.context, _createMethodObjectPath(this.context, this, "GetItem", 1, [type, group], false, false, null, false));
        };
        ChartAxes.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["categoryAxis", "CategoryAxis", "seriesAxis", "SeriesAxis", "valueAxis", "ValueAxis"]);
        };
        ChartAxes.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartAxes.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartAxes.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartAxes.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "categoryAxis": this._C,
                "seriesAxis": this._S,
                "valueAxis": this._V,
            });
        };
        ChartAxes.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartAxes;
    }(OfficeExtension.ClientObject));
    Excel.ChartAxes = ChartAxes;
    var _typeChartAxis = "ChartAxis";
    var ChartAxis = (function (_super) {
        __extends(ChartAxis, _super);
        function ChartAxis() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartAxis.prototype, "_className", {
            get: function () {
                return "ChartAxis";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["majorUnit", "maximum", "minimum", "minorUnit", "displayUnit", "showDisplayUnitLabel", "customDisplayUnit", "type", "minorTimeUnitScale", "majorTimeUnitScale", "baseTimeUnit", "categoryType", "axisGroup", "scaleType", "logBase", "left", "top", "height", "width", "reversePlotOrder", "crosses", "crossesAt", "visible", "axisBetweenCategories", "majorTickMark", "minorTickMark", "tickMarkSpacing", "tickLabelPosition", "tickLabelSpacing"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, true, false, false, true, true, true, true, false, true, true, false, false, false, false, true, true, false, true, true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["majorGridlines", "minorGridlines", "title", "format"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartAxisFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "majorGridlines", {
            get: function () {
                if (!this._M) {
                    this._M = new Excel.ChartGridlines(this.context, _createPropertyObjectPath(this.context, this, "MajorGridlines", false, false, false));
                }
                return this._M;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "minorGridlines", {
            get: function () {
                if (!this._Min) {
                    this._Min = new Excel.ChartGridlines(this.context, _createPropertyObjectPath(this.context, this, "MinorGridlines", false, false, false));
                }
                return this._Min;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "title", {
            get: function () {
                if (!this._Tit) {
                    this._Tit = new Excel.ChartAxisTitle(this.context, _createPropertyObjectPath(this.context, this, "Title", false, false, false));
                }
                return this._Tit;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "axisBetweenCategories", {
            get: function () {
                _throwIfNotLoaded("axisBetweenCategories", this._A, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.axisBetweenCategories", _defaultApiSetName, "1.7", _hostName);
                return this._A;
            },
            set: function (value) {
                this._A = value;
                _createSetPropertyAction(this.context, this, "AxisBetweenCategories", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "axisGroup", {
            get: function () {
                _throwIfNotLoaded("axisGroup", this._Ax, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.axisGroup", _defaultApiSetName, "1.7", _hostName);
                return this._Ax;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "baseTimeUnit", {
            get: function () {
                _throwIfNotLoaded("baseTimeUnit", this._B, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.baseTimeUnit", _defaultApiSetName, "1.7", _hostName);
                return this._B;
            },
            set: function (value) {
                this._B = value;
                _createSetPropertyAction(this.context, this, "BaseTimeUnit", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "categoryType", {
            get: function () {
                _throwIfNotLoaded("categoryType", this._C, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.categoryType", _defaultApiSetName, "1.7", _hostName);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "CategoryType", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "crosses", {
            get: function () {
                _throwIfNotLoaded("crosses", this._Cr, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.crosses", _defaultApiSetName, "1.7", _hostName);
                return this._Cr;
            },
            set: function (value) {
                this._Cr = value;
                _createSetPropertyAction(this.context, this, "Crosses", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "crossesAt", {
            get: function () {
                _throwIfNotLoaded("crossesAt", this._Cro, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.crossesAt", _defaultApiSetName, "1.7", _hostName);
                return this._Cro;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "customDisplayUnit", {
            get: function () {
                _throwIfNotLoaded("customDisplayUnit", this._Cu, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.customDisplayUnit", _defaultApiSetName, "1.7", _hostName);
                return this._Cu;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "displayUnit", {
            get: function () {
                _throwIfNotLoaded("displayUnit", this._D, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.displayUnit", _defaultApiSetName, "1.7", _hostName);
                return this._D;
            },
            set: function (value) {
                this._D = value;
                _createSetPropertyAction(this.context, this, "DisplayUnit", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "height", {
            get: function () {
                _throwIfNotLoaded("height", this._H, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.height", _defaultApiSetName, "1.7", _hostName);
                return this._H;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "left", {
            get: function () {
                _throwIfNotLoaded("left", this._L, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.left", _defaultApiSetName, "1.7", _hostName);
                return this._L;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "logBase", {
            get: function () {
                _throwIfNotLoaded("logBase", this._Lo, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.logBase", _defaultApiSetName, "1.7", _hostName);
                return this._Lo;
            },
            set: function (value) {
                this._Lo = value;
                _createSetPropertyAction(this.context, this, "LogBase", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "majorTickMark", {
            get: function () {
                _throwIfNotLoaded("majorTickMark", this._Ma, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.majorTickMark", _defaultApiSetName, "1.7", _hostName);
                return this._Ma;
            },
            set: function (value) {
                this._Ma = value;
                _createSetPropertyAction(this.context, this, "MajorTickMark", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "majorTimeUnitScale", {
            get: function () {
                _throwIfNotLoaded("majorTimeUnitScale", this._Maj, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.majorTimeUnitScale", _defaultApiSetName, "1.7", _hostName);
                return this._Maj;
            },
            set: function (value) {
                this._Maj = value;
                _createSetPropertyAction(this.context, this, "MajorTimeUnitScale", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "majorUnit", {
            get: function () {
                _throwIfNotLoaded("majorUnit", this._Majo, _typeChartAxis, this._isNull);
                return this._Majo;
            },
            set: function (value) {
                this._Majo = value;
                _createSetPropertyAction(this.context, this, "MajorUnit", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "maximum", {
            get: function () {
                _throwIfNotLoaded("maximum", this._Max, _typeChartAxis, this._isNull);
                return this._Max;
            },
            set: function (value) {
                this._Max = value;
                _createSetPropertyAction(this.context, this, "Maximum", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "minimum", {
            get: function () {
                _throwIfNotLoaded("minimum", this._Mi, _typeChartAxis, this._isNull);
                return this._Mi;
            },
            set: function (value) {
                this._Mi = value;
                _createSetPropertyAction(this.context, this, "Minimum", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "minorTickMark", {
            get: function () {
                _throwIfNotLoaded("minorTickMark", this._Mino, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.minorTickMark", _defaultApiSetName, "1.7", _hostName);
                return this._Mino;
            },
            set: function (value) {
                this._Mino = value;
                _createSetPropertyAction(this.context, this, "MinorTickMark", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "minorTimeUnitScale", {
            get: function () {
                _throwIfNotLoaded("minorTimeUnitScale", this._Minor, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.minorTimeUnitScale", _defaultApiSetName, "1.7", _hostName);
                return this._Minor;
            },
            set: function (value) {
                this._Minor = value;
                _createSetPropertyAction(this.context, this, "MinorTimeUnitScale", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "minorUnit", {
            get: function () {
                _throwIfNotLoaded("minorUnit", this._MinorU, _typeChartAxis, this._isNull);
                return this._MinorU;
            },
            set: function (value) {
                this._MinorU = value;
                _createSetPropertyAction(this.context, this, "MinorUnit", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "reversePlotOrder", {
            get: function () {
                _throwIfNotLoaded("reversePlotOrder", this._R, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.reversePlotOrder", _defaultApiSetName, "1.7", _hostName);
                return this._R;
            },
            set: function (value) {
                this._R = value;
                _createSetPropertyAction(this.context, this, "ReversePlotOrder", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "scaleType", {
            get: function () {
                _throwIfNotLoaded("scaleType", this._S, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.scaleType", _defaultApiSetName, "1.7", _hostName);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "ScaleType", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "showDisplayUnitLabel", {
            get: function () {
                _throwIfNotLoaded("showDisplayUnitLabel", this._Sh, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.showDisplayUnitLabel", _defaultApiSetName, "1.7", _hostName);
                return this._Sh;
            },
            set: function (value) {
                this._Sh = value;
                _createSetPropertyAction(this.context, this, "ShowDisplayUnitLabel", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "tickLabelPosition", {
            get: function () {
                _throwIfNotLoaded("tickLabelPosition", this._T, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.tickLabelPosition", _defaultApiSetName, "1.7", _hostName);
                return this._T;
            },
            set: function (value) {
                this._T = value;
                _createSetPropertyAction(this.context, this, "TickLabelPosition", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "tickLabelSpacing", {
            get: function () {
                _throwIfNotLoaded("tickLabelSpacing", this._Ti, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.tickLabelSpacing", _defaultApiSetName, "1.7", _hostName);
                return this._Ti;
            },
            set: function (value) {
                this._Ti = value;
                _createSetPropertyAction(this.context, this, "TickLabelSpacing", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "tickMarkSpacing", {
            get: function () {
                _throwIfNotLoaded("tickMarkSpacing", this._Tic, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.tickMarkSpacing", _defaultApiSetName, "1.7", _hostName);
                return this._Tic;
            },
            set: function (value) {
                this._Tic = value;
                _createSetPropertyAction(this.context, this, "TickMarkSpacing", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "top", {
            get: function () {
                _throwIfNotLoaded("top", this._To, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.top", _defaultApiSetName, "1.7", _hostName);
                return this._To;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "type", {
            get: function () {
                _throwIfNotLoaded("type", this._Ty, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.type", _defaultApiSetName, "1.7", _hostName);
                return this._Ty;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "visible", {
            get: function () {
                _throwIfNotLoaded("visible", this._V, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.visible", _defaultApiSetName, "1.7", _hostName);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "Visible", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxis.prototype, "width", {
            get: function () {
                _throwIfNotLoaded("width", this._W, _typeChartAxis, this._isNull);
                _throwIfApiNotSupported("ChartAxis.width", _defaultApiSetName, "1.7", _hostName);
                return this._W;
            },
            enumerable: true,
            configurable: true
        });
        ChartAxis.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["majorUnit", "maximum", "minimum", "minorUnit", "displayUnit", "showDisplayUnitLabel", "minorTimeUnitScale", "majorTimeUnitScale", "baseTimeUnit", "categoryType", "scaleType", "logBase", "reversePlotOrder", "crosses", "visible", "axisBetweenCategories", "majorTickMark", "minorTickMark", "tickMarkSpacing", "tickLabelPosition", "tickLabelSpacing"], ["majorGridlines", "minorGridlines", "title", "format"], []);
        };
        ChartAxis.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartAxis.prototype.setCategoryNames = function (sourceData) {
            _throwIfApiNotSupported("ChartAxis.setCategoryNames", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "SetCategoryNames", 0, [sourceData], false);
        };
        ChartAxis.prototype.setCrossesAt = function (value) {
            _throwIfApiNotSupported("ChartAxis.setCrossesAt", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "SetCrossesAt", 0, [value], false);
        };
        ChartAxis.prototype.setCustomDisplayUnit = function (value) {
            _throwIfApiNotSupported("ChartAxis.setCustomDisplayUnit", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "SetCustomDisplayUnit", 0, [value], false);
        };
        ChartAxis.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["AxisBetweenCategories"])) {
                this._A = obj["AxisBetweenCategories"];
            }
            if (!_isUndefined(obj["AxisGroup"])) {
                this._Ax = obj["AxisGroup"];
            }
            if (!_isUndefined(obj["BaseTimeUnit"])) {
                this._B = obj["BaseTimeUnit"];
            }
            if (!_isUndefined(obj["CategoryType"])) {
                this._C = obj["CategoryType"];
            }
            if (!_isUndefined(obj["Crosses"])) {
                this._Cr = obj["Crosses"];
            }
            if (!_isUndefined(obj["CrossesAt"])) {
                this._Cro = obj["CrossesAt"];
            }
            if (!_isUndefined(obj["CustomDisplayUnit"])) {
                this._Cu = obj["CustomDisplayUnit"];
            }
            if (!_isUndefined(obj["DisplayUnit"])) {
                this._D = obj["DisplayUnit"];
            }
            if (!_isUndefined(obj["Height"])) {
                this._H = obj["Height"];
            }
            if (!_isUndefined(obj["Left"])) {
                this._L = obj["Left"];
            }
            if (!_isUndefined(obj["LogBase"])) {
                this._Lo = obj["LogBase"];
            }
            if (!_isUndefined(obj["MajorTickMark"])) {
                this._Ma = obj["MajorTickMark"];
            }
            if (!_isUndefined(obj["MajorTimeUnitScale"])) {
                this._Maj = obj["MajorTimeUnitScale"];
            }
            if (!_isUndefined(obj["MajorUnit"])) {
                this._Majo = obj["MajorUnit"];
            }
            if (!_isUndefined(obj["Maximum"])) {
                this._Max = obj["Maximum"];
            }
            if (!_isUndefined(obj["Minimum"])) {
                this._Mi = obj["Minimum"];
            }
            if (!_isUndefined(obj["MinorTickMark"])) {
                this._Mino = obj["MinorTickMark"];
            }
            if (!_isUndefined(obj["MinorTimeUnitScale"])) {
                this._Minor = obj["MinorTimeUnitScale"];
            }
            if (!_isUndefined(obj["MinorUnit"])) {
                this._MinorU = obj["MinorUnit"];
            }
            if (!_isUndefined(obj["ReversePlotOrder"])) {
                this._R = obj["ReversePlotOrder"];
            }
            if (!_isUndefined(obj["ScaleType"])) {
                this._S = obj["ScaleType"];
            }
            if (!_isUndefined(obj["ShowDisplayUnitLabel"])) {
                this._Sh = obj["ShowDisplayUnitLabel"];
            }
            if (!_isUndefined(obj["TickLabelPosition"])) {
                this._T = obj["TickLabelPosition"];
            }
            if (!_isUndefined(obj["TickLabelSpacing"])) {
                this._Ti = obj["TickLabelSpacing"];
            }
            if (!_isUndefined(obj["TickMarkSpacing"])) {
                this._Tic = obj["TickMarkSpacing"];
            }
            if (!_isUndefined(obj["Top"])) {
                this._To = obj["Top"];
            }
            if (!_isUndefined(obj["Type"])) {
                this._Ty = obj["Type"];
            }
            if (!_isUndefined(obj["Visible"])) {
                this._V = obj["Visible"];
            }
            if (!_isUndefined(obj["Width"])) {
                this._W = obj["Width"];
            }
            _handleNavigationPropertyResults(this, obj, ["format", "Format", "majorGridlines", "MajorGridlines", "minorGridlines", "MinorGridlines", "title", "Title"]);
        };
        ChartAxis.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartAxis.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartAxis.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartAxis.prototype.toJSON = function () {
            return _toJson(this, {
                "axisBetweenCategories": this._A,
                "axisGroup": this._Ax,
                "baseTimeUnit": this._B,
                "categoryType": this._C,
                "crosses": this._Cr,
                "crossesAt": this._Cro,
                "customDisplayUnit": this._Cu,
                "displayUnit": this._D,
                "height": this._H,
                "left": this._L,
                "logBase": this._Lo,
                "majorTickMark": this._Ma,
                "majorTimeUnitScale": this._Maj,
                "majorUnit": this._Majo,
                "maximum": this._Max,
                "minimum": this._Mi,
                "minorTickMark": this._Mino,
                "minorTimeUnitScale": this._Minor,
                "minorUnit": this._MinorU,
                "reversePlotOrder": this._R,
                "scaleType": this._S,
                "showDisplayUnitLabel": this._Sh,
                "tickLabelPosition": this._T,
                "tickLabelSpacing": this._Ti,
                "tickMarkSpacing": this._Tic,
                "top": this._To,
                "type": this._Ty,
                "visible": this._V,
                "width": this._W,
            }, {
                "format": this._F,
                "majorGridlines": this._M,
                "minorGridlines": this._Min,
                "title": this._Tit,
            });
        };
        ChartAxis.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartAxis;
    }(OfficeExtension.ClientObject));
    Excel.ChartAxis = ChartAxis;
    var _typeChartAxisFormat = "ChartAxisFormat";
    var ChartAxisFormat = (function (_super) {
        __extends(ChartAxisFormat, _super);
        function ChartAxisFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartAxisFormat.prototype, "_className", {
            get: function () {
                return "ChartAxisFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxisFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["font", "line"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxisFormat.prototype, "font", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartFont(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxisFormat.prototype, "line", {
            get: function () {
                if (!this._L) {
                    this._L = new Excel.ChartLineFormat(this.context, _createPropertyObjectPath(this.context, this, "Line", false, false, false));
                }
                return this._L;
            },
            enumerable: true,
            configurable: true
        });
        ChartAxisFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["font", "line"], []);
        };
        ChartAxisFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartAxisFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["font", "Font", "line", "Line"]);
        };
        ChartAxisFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartAxisFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartAxisFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartAxisFormat.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "font": this._F,
                "line": this._L,
            });
        };
        ChartAxisFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartAxisFormat;
    }(OfficeExtension.ClientObject));
    Excel.ChartAxisFormat = ChartAxisFormat;
    var _typeChartAxisTitle = "ChartAxisTitle";
    var ChartAxisTitle = (function (_super) {
        __extends(ChartAxisTitle, _super);
        function ChartAxisTitle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartAxisTitle.prototype, "_className", {
            get: function () {
                return "ChartAxisTitle";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxisTitle.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["text", "visible"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxisTitle.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxisTitle.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["format"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxisTitle.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartAxisTitleFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxisTitle.prototype, "text", {
            get: function () {
                _throwIfNotLoaded("text", this._T, _typeChartAxisTitle, this._isNull);
                return this._T;
            },
            set: function (value) {
                this._T = value;
                _createSetPropertyAction(this.context, this, "Text", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxisTitle.prototype, "visible", {
            get: function () {
                _throwIfNotLoaded("visible", this._V, _typeChartAxisTitle, this._isNull);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "Visible", value);
            },
            enumerable: true,
            configurable: true
        });
        ChartAxisTitle.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["text", "visible"], ["format"], []);
        };
        ChartAxisTitle.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartAxisTitle.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Text"])) {
                this._T = obj["Text"];
            }
            if (!_isUndefined(obj["Visible"])) {
                this._V = obj["Visible"];
            }
            _handleNavigationPropertyResults(this, obj, ["format", "Format"]);
        };
        ChartAxisTitle.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartAxisTitle.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartAxisTitle.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartAxisTitle.prototype.toJSON = function () {
            return _toJson(this, {
                "text": this._T,
                "visible": this._V,
            }, {
                "format": this._F,
            });
        };
        ChartAxisTitle.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartAxisTitle;
    }(OfficeExtension.ClientObject));
    Excel.ChartAxisTitle = ChartAxisTitle;
    var _typeChartAxisTitleFormat = "ChartAxisTitleFormat";
    var ChartAxisTitleFormat = (function (_super) {
        __extends(ChartAxisTitleFormat, _super);
        function ChartAxisTitleFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartAxisTitleFormat.prototype, "_className", {
            get: function () {
                return "ChartAxisTitleFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxisTitleFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["font"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartAxisTitleFormat.prototype, "font", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartFont(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        ChartAxisTitleFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["font"], []);
        };
        ChartAxisTitleFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartAxisTitleFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["font", "Font"]);
        };
        ChartAxisTitleFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartAxisTitleFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartAxisTitleFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartAxisTitleFormat.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "font": this._F,
            });
        };
        ChartAxisTitleFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartAxisTitleFormat;
    }(OfficeExtension.ClientObject));
    Excel.ChartAxisTitleFormat = ChartAxisTitleFormat;
    var _typeChartDataLabels = "ChartDataLabels";
    var ChartDataLabels = (function (_super) {
        __extends(ChartDataLabels, _super);
        function ChartDataLabels() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartDataLabels.prototype, "_className", {
            get: function () {
                return "ChartDataLabels";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabels.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["position", "showValue", "showSeriesName", "showCategoryName", "showLegendKey", "showPercentage", "showBubbleSize", "separator"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabels.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabels.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["format"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabels.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartDataLabelFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabels.prototype, "position", {
            get: function () {
                _throwIfNotLoaded("position", this._P, _typeChartDataLabels, this._isNull);
                return this._P;
            },
            set: function (value) {
                this._P = value;
                _createSetPropertyAction(this.context, this, "Position", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabels.prototype, "separator", {
            get: function () {
                _throwIfNotLoaded("separator", this._S, _typeChartDataLabels, this._isNull);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "Separator", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabels.prototype, "showBubbleSize", {
            get: function () {
                _throwIfNotLoaded("showBubbleSize", this._Sh, _typeChartDataLabels, this._isNull);
                return this._Sh;
            },
            set: function (value) {
                this._Sh = value;
                _createSetPropertyAction(this.context, this, "ShowBubbleSize", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabels.prototype, "showCategoryName", {
            get: function () {
                _throwIfNotLoaded("showCategoryName", this._Sho, _typeChartDataLabels, this._isNull);
                return this._Sho;
            },
            set: function (value) {
                this._Sho = value;
                _createSetPropertyAction(this.context, this, "ShowCategoryName", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabels.prototype, "showLegendKey", {
            get: function () {
                _throwIfNotLoaded("showLegendKey", this._Show, _typeChartDataLabels, this._isNull);
                return this._Show;
            },
            set: function (value) {
                this._Show = value;
                _createSetPropertyAction(this.context, this, "ShowLegendKey", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabels.prototype, "showPercentage", {
            get: function () {
                _throwIfNotLoaded("showPercentage", this._ShowP, _typeChartDataLabels, this._isNull);
                return this._ShowP;
            },
            set: function (value) {
                this._ShowP = value;
                _createSetPropertyAction(this.context, this, "ShowPercentage", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabels.prototype, "showSeriesName", {
            get: function () {
                _throwIfNotLoaded("showSeriesName", this._ShowS, _typeChartDataLabels, this._isNull);
                return this._ShowS;
            },
            set: function (value) {
                this._ShowS = value;
                _createSetPropertyAction(this.context, this, "ShowSeriesName", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabels.prototype, "showValue", {
            get: function () {
                _throwIfNotLoaded("showValue", this._ShowV, _typeChartDataLabels, this._isNull);
                return this._ShowV;
            },
            set: function (value) {
                this._ShowV = value;
                _createSetPropertyAction(this.context, this, "ShowValue", value);
            },
            enumerable: true,
            configurable: true
        });
        ChartDataLabels.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["position", "showValue", "showSeriesName", "showCategoryName", "showLegendKey", "showPercentage", "showBubbleSize", "separator"], ["format"], []);
        };
        ChartDataLabels.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartDataLabels.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Position"])) {
                this._P = obj["Position"];
            }
            if (!_isUndefined(obj["Separator"])) {
                this._S = obj["Separator"];
            }
            if (!_isUndefined(obj["ShowBubbleSize"])) {
                this._Sh = obj["ShowBubbleSize"];
            }
            if (!_isUndefined(obj["ShowCategoryName"])) {
                this._Sho = obj["ShowCategoryName"];
            }
            if (!_isUndefined(obj["ShowLegendKey"])) {
                this._Show = obj["ShowLegendKey"];
            }
            if (!_isUndefined(obj["ShowPercentage"])) {
                this._ShowP = obj["ShowPercentage"];
            }
            if (!_isUndefined(obj["ShowSeriesName"])) {
                this._ShowS = obj["ShowSeriesName"];
            }
            if (!_isUndefined(obj["ShowValue"])) {
                this._ShowV = obj["ShowValue"];
            }
            _handleNavigationPropertyResults(this, obj, ["format", "Format"]);
        };
        ChartDataLabels.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartDataLabels.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartDataLabels.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartDataLabels.prototype.toJSON = function () {
            return _toJson(this, {
                "position": this._P,
                "separator": this._S,
                "showBubbleSize": this._Sh,
                "showCategoryName": this._Sho,
                "showLegendKey": this._Show,
                "showPercentage": this._ShowP,
                "showSeriesName": this._ShowS,
                "showValue": this._ShowV,
            }, {
                "format": this._F,
            });
        };
        ChartDataLabels.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartDataLabels;
    }(OfficeExtension.ClientObject));
    Excel.ChartDataLabels = ChartDataLabels;
    var _typeChartDataLabel = "ChartDataLabel";
    var ChartDataLabel = (function (_super) {
        __extends(ChartDataLabel, _super);
        function ChartDataLabel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartDataLabel.prototype, "_className", {
            get: function () {
                return "ChartDataLabel";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabel.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["position", "showValue", "showSeriesName", "showCategoryName", "showLegendKey", "showPercentage", "showBubbleSize", "separator"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabel.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabel.prototype, "position", {
            get: function () {
                _throwIfNotLoaded("position", this._P, _typeChartDataLabel, this._isNull);
                return this._P;
            },
            set: function (value) {
                this._P = value;
                _createSetPropertyAction(this.context, this, "Position", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabel.prototype, "separator", {
            get: function () {
                _throwIfNotLoaded("separator", this._S, _typeChartDataLabel, this._isNull);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "Separator", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabel.prototype, "showBubbleSize", {
            get: function () {
                _throwIfNotLoaded("showBubbleSize", this._Sh, _typeChartDataLabel, this._isNull);
                return this._Sh;
            },
            set: function (value) {
                this._Sh = value;
                _createSetPropertyAction(this.context, this, "ShowBubbleSize", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabel.prototype, "showCategoryName", {
            get: function () {
                _throwIfNotLoaded("showCategoryName", this._Sho, _typeChartDataLabel, this._isNull);
                return this._Sho;
            },
            set: function (value) {
                this._Sho = value;
                _createSetPropertyAction(this.context, this, "ShowCategoryName", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabel.prototype, "showLegendKey", {
            get: function () {
                _throwIfNotLoaded("showLegendKey", this._Show, _typeChartDataLabel, this._isNull);
                return this._Show;
            },
            set: function (value) {
                this._Show = value;
                _createSetPropertyAction(this.context, this, "ShowLegendKey", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabel.prototype, "showPercentage", {
            get: function () {
                _throwIfNotLoaded("showPercentage", this._ShowP, _typeChartDataLabel, this._isNull);
                return this._ShowP;
            },
            set: function (value) {
                this._ShowP = value;
                _createSetPropertyAction(this.context, this, "ShowPercentage", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabel.prototype, "showSeriesName", {
            get: function () {
                _throwIfNotLoaded("showSeriesName", this._ShowS, _typeChartDataLabel, this._isNull);
                return this._ShowS;
            },
            set: function (value) {
                this._ShowS = value;
                _createSetPropertyAction(this.context, this, "ShowSeriesName", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabel.prototype, "showValue", {
            get: function () {
                _throwIfNotLoaded("showValue", this._ShowV, _typeChartDataLabel, this._isNull);
                return this._ShowV;
            },
            set: function (value) {
                this._ShowV = value;
                _createSetPropertyAction(this.context, this, "ShowValue", value);
            },
            enumerable: true,
            configurable: true
        });
        ChartDataLabel.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["position", "showValue", "showSeriesName", "showCategoryName", "showLegendKey", "showPercentage", "showBubbleSize", "separator"], [], []);
        };
        ChartDataLabel.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartDataLabel.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Position"])) {
                this._P = obj["Position"];
            }
            if (!_isUndefined(obj["Separator"])) {
                this._S = obj["Separator"];
            }
            if (!_isUndefined(obj["ShowBubbleSize"])) {
                this._Sh = obj["ShowBubbleSize"];
            }
            if (!_isUndefined(obj["ShowCategoryName"])) {
                this._Sho = obj["ShowCategoryName"];
            }
            if (!_isUndefined(obj["ShowLegendKey"])) {
                this._Show = obj["ShowLegendKey"];
            }
            if (!_isUndefined(obj["ShowPercentage"])) {
                this._ShowP = obj["ShowPercentage"];
            }
            if (!_isUndefined(obj["ShowSeriesName"])) {
                this._ShowS = obj["ShowSeriesName"];
            }
            if (!_isUndefined(obj["ShowValue"])) {
                this._ShowV = obj["ShowValue"];
            }
        };
        ChartDataLabel.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartDataLabel.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartDataLabel.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartDataLabel.prototype.toJSON = function () {
            return _toJson(this, {
                "position": this._P,
                "separator": this._S,
                "showBubbleSize": this._Sh,
                "showCategoryName": this._Sho,
                "showLegendKey": this._Show,
                "showPercentage": this._ShowP,
                "showSeriesName": this._ShowS,
                "showValue": this._ShowV,
            }, {});
        };
        ChartDataLabel.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartDataLabel;
    }(OfficeExtension.ClientObject));
    Excel.ChartDataLabel = ChartDataLabel;
    var _typeChartDataLabelFormat = "ChartDataLabelFormat";
    var ChartDataLabelFormat = (function (_super) {
        __extends(ChartDataLabelFormat, _super);
        function ChartDataLabelFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartDataLabelFormat.prototype, "_className", {
            get: function () {
                return "ChartDataLabelFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabelFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["font", "fill"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabelFormat.prototype, "fill", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartFill(this.context, _createPropertyObjectPath(this.context, this, "Fill", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartDataLabelFormat.prototype, "font", {
            get: function () {
                if (!this._Fo) {
                    this._Fo = new Excel.ChartFont(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false, false));
                }
                return this._Fo;
            },
            enumerable: true,
            configurable: true
        });
        ChartDataLabelFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["font"], [
                "fill"
            ]);
        };
        ChartDataLabelFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartDataLabelFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["fill", "Fill", "font", "Font"]);
        };
        ChartDataLabelFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartDataLabelFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartDataLabelFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartDataLabelFormat.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "font": this._Fo,
            });
        };
        ChartDataLabelFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartDataLabelFormat;
    }(OfficeExtension.ClientObject));
    Excel.ChartDataLabelFormat = ChartDataLabelFormat;
    var _typeChartGridlines = "ChartGridlines";
    var ChartGridlines = (function (_super) {
        __extends(ChartGridlines, _super);
        function ChartGridlines() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartGridlines.prototype, "_className", {
            get: function () {
                return "ChartGridlines";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartGridlines.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["visible"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartGridlines.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartGridlines.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["format"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartGridlines.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartGridlinesFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartGridlines.prototype, "visible", {
            get: function () {
                _throwIfNotLoaded("visible", this._V, _typeChartGridlines, this._isNull);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "Visible", value);
            },
            enumerable: true,
            configurable: true
        });
        ChartGridlines.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["visible"], ["format"], []);
        };
        ChartGridlines.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartGridlines.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Visible"])) {
                this._V = obj["Visible"];
            }
            _handleNavigationPropertyResults(this, obj, ["format", "Format"]);
        };
        ChartGridlines.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartGridlines.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartGridlines.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartGridlines.prototype.toJSON = function () {
            return _toJson(this, {
                "visible": this._V,
            }, {
                "format": this._F,
            });
        };
        ChartGridlines.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartGridlines;
    }(OfficeExtension.ClientObject));
    Excel.ChartGridlines = ChartGridlines;
    var _typeChartGridlinesFormat = "ChartGridlinesFormat";
    var ChartGridlinesFormat = (function (_super) {
        __extends(ChartGridlinesFormat, _super);
        function ChartGridlinesFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartGridlinesFormat.prototype, "_className", {
            get: function () {
                return "ChartGridlinesFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartGridlinesFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["line"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartGridlinesFormat.prototype, "line", {
            get: function () {
                if (!this._L) {
                    this._L = new Excel.ChartLineFormat(this.context, _createPropertyObjectPath(this.context, this, "Line", false, false, false));
                }
                return this._L;
            },
            enumerable: true,
            configurable: true
        });
        ChartGridlinesFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["line"], []);
        };
        ChartGridlinesFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartGridlinesFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["line", "Line"]);
        };
        ChartGridlinesFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartGridlinesFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartGridlinesFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartGridlinesFormat.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "line": this._L,
            });
        };
        ChartGridlinesFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartGridlinesFormat;
    }(OfficeExtension.ClientObject));
    Excel.ChartGridlinesFormat = ChartGridlinesFormat;
    var _typeChartLegend = "ChartLegend";
    var ChartLegend = (function (_super) {
        __extends(ChartLegend, _super);
        function ChartLegend() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartLegend.prototype, "_className", {
            get: function () {
                return "ChartLegend";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["visible", "position", "overlay", "left", "top", "width", "height", "showShadow"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["format", "legendEntries"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartLegendFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "legendEntries", {
            get: function () {
                _throwIfApiNotSupported("ChartLegend.legendEntries", _defaultApiSetName, "1.7", _hostName);
                if (!this._Le) {
                    this._Le = new Excel.ChartLegendEntryCollection(this.context, _createPropertyObjectPath(this.context, this, "LegendEntries", true, false, false));
                }
                return this._Le;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "height", {
            get: function () {
                _throwIfNotLoaded("height", this._H, _typeChartLegend, this._isNull);
                _throwIfApiNotSupported("ChartLegend.height", _defaultApiSetName, "1.7", _hostName);
                return this._H;
            },
            set: function (value) {
                this._H = value;
                _createSetPropertyAction(this.context, this, "Height", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "left", {
            get: function () {
                _throwIfNotLoaded("left", this._L, _typeChartLegend, this._isNull);
                _throwIfApiNotSupported("ChartLegend.left", _defaultApiSetName, "1.7", _hostName);
                return this._L;
            },
            set: function (value) {
                this._L = value;
                _createSetPropertyAction(this.context, this, "Left", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "overlay", {
            get: function () {
                _throwIfNotLoaded("overlay", this._O, _typeChartLegend, this._isNull);
                return this._O;
            },
            set: function (value) {
                this._O = value;
                _createSetPropertyAction(this.context, this, "Overlay", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "position", {
            get: function () {
                _throwIfNotLoaded("position", this._P, _typeChartLegend, this._isNull);
                return this._P;
            },
            set: function (value) {
                this._P = value;
                _createSetPropertyAction(this.context, this, "Position", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "showShadow", {
            get: function () {
                _throwIfNotLoaded("showShadow", this._S, _typeChartLegend, this._isNull);
                _throwIfApiNotSupported("ChartLegend.showShadow", _defaultApiSetName, "1.7", _hostName);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "ShowShadow", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "top", {
            get: function () {
                _throwIfNotLoaded("top", this._T, _typeChartLegend, this._isNull);
                _throwIfApiNotSupported("ChartLegend.top", _defaultApiSetName, "1.7", _hostName);
                return this._T;
            },
            set: function (value) {
                this._T = value;
                _createSetPropertyAction(this.context, this, "Top", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "visible", {
            get: function () {
                _throwIfNotLoaded("visible", this._V, _typeChartLegend, this._isNull);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "Visible", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegend.prototype, "width", {
            get: function () {
                _throwIfNotLoaded("width", this._W, _typeChartLegend, this._isNull);
                _throwIfApiNotSupported("ChartLegend.width", _defaultApiSetName, "1.7", _hostName);
                return this._W;
            },
            set: function (value) {
                this._W = value;
                _createSetPropertyAction(this.context, this, "Width", value);
            },
            enumerable: true,
            configurable: true
        });
        ChartLegend.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["visible", "position", "overlay", "left", "top", "width", "height", "showShadow"], ["format"], [
                "legendEntries"
            ]);
        };
        ChartLegend.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartLegend.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Height"])) {
                this._H = obj["Height"];
            }
            if (!_isUndefined(obj["Left"])) {
                this._L = obj["Left"];
            }
            if (!_isUndefined(obj["Overlay"])) {
                this._O = obj["Overlay"];
            }
            if (!_isUndefined(obj["Position"])) {
                this._P = obj["Position"];
            }
            if (!_isUndefined(obj["ShowShadow"])) {
                this._S = obj["ShowShadow"];
            }
            if (!_isUndefined(obj["Top"])) {
                this._T = obj["Top"];
            }
            if (!_isUndefined(obj["Visible"])) {
                this._V = obj["Visible"];
            }
            if (!_isUndefined(obj["Width"])) {
                this._W = obj["Width"];
            }
            _handleNavigationPropertyResults(this, obj, ["format", "Format", "legendEntries", "LegendEntries"]);
        };
        ChartLegend.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartLegend.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartLegend.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartLegend.prototype.toJSON = function () {
            return _toJson(this, {
                "height": this._H,
                "left": this._L,
                "overlay": this._O,
                "position": this._P,
                "showShadow": this._S,
                "top": this._T,
                "visible": this._V,
                "width": this._W,
            }, {
                "format": this._F,
                "legendEntries": this._Le,
            });
        };
        ChartLegend.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartLegend;
    }(OfficeExtension.ClientObject));
    Excel.ChartLegend = ChartLegend;
    var _typeChartLegendEntry = "ChartLegendEntry";
    var ChartLegendEntry = (function (_super) {
        __extends(ChartLegendEntry, _super);
        function ChartLegendEntry() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartLegendEntry.prototype, "_className", {
            get: function () {
                return "ChartLegendEntry";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegendEntry.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["visible"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegendEntry.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegendEntry.prototype, "visible", {
            get: function () {
                _throwIfNotLoaded("visible", this._V, _typeChartLegendEntry, this._isNull);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "Visible", value);
            },
            enumerable: true,
            configurable: true
        });
        ChartLegendEntry.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["visible"], [], []);
        };
        ChartLegendEntry.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartLegendEntry.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Visible"])) {
                this._V = obj["Visible"];
            }
        };
        ChartLegendEntry.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartLegendEntry.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartLegendEntry.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartLegendEntry.prototype.toJSON = function () {
            return _toJson(this, {
                "visible": this._V,
            }, {});
        };
        ChartLegendEntry.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartLegendEntry;
    }(OfficeExtension.ClientObject));
    Excel.ChartLegendEntry = ChartLegendEntry;
    var _typeChartLegendEntryCollection = "ChartLegendEntryCollection";
    var ChartLegendEntryCollection = (function (_super) {
        __extends(ChartLegendEntryCollection, _super);
        function ChartLegendEntryCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartLegendEntryCollection.prototype, "_className", {
            get: function () {
                return "ChartLegendEntryCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegendEntryCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegendEntryCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeChartLegendEntryCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        ChartLegendEntryCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        ChartLegendEntryCollection.prototype.getItemAt = function (index) {
            return new Excel.ChartLegendEntry(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        ChartLegendEntryCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.ChartLegendEntry(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(false, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        ChartLegendEntryCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartLegendEntryCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartLegendEntryCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.ChartLegendEntry(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(false, _this.context, _this, childItemData, index)); });
        };
        ChartLegendEntryCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return ChartLegendEntryCollection;
    }(OfficeExtension.ClientObject));
    Excel.ChartLegendEntryCollection = ChartLegendEntryCollection;
    var _typeChartLegendFormat = "ChartLegendFormat";
    var ChartLegendFormat = (function (_super) {
        __extends(ChartLegendFormat, _super);
        function ChartLegendFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartLegendFormat.prototype, "_className", {
            get: function () {
                return "ChartLegendFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegendFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["font", "fill"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegendFormat.prototype, "fill", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartFill(this.context, _createPropertyObjectPath(this.context, this, "Fill", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLegendFormat.prototype, "font", {
            get: function () {
                if (!this._Fo) {
                    this._Fo = new Excel.ChartFont(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false, false));
                }
                return this._Fo;
            },
            enumerable: true,
            configurable: true
        });
        ChartLegendFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["font"], [
                "fill"
            ]);
        };
        ChartLegendFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartLegendFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["fill", "Fill", "font", "Font"]);
        };
        ChartLegendFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartLegendFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartLegendFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartLegendFormat.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "font": this._Fo,
            });
        };
        ChartLegendFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartLegendFormat;
    }(OfficeExtension.ClientObject));
    Excel.ChartLegendFormat = ChartLegendFormat;
    var _typeChartTitle = "ChartTitle";
    var ChartTitle = (function (_super) {
        __extends(ChartTitle, _super);
        function ChartTitle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartTitle.prototype, "_className", {
            get: function () {
                return "ChartTitle";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["visible", "text", "overlay", "horizontalAlignment", "top", "left", "width", "height", "verticalAlignment", "textOrientation", "position", "showShadow"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, true, false, false, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["format"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartTitleFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "height", {
            get: function () {
                _throwIfNotLoaded("height", this._H, _typeChartTitle, this._isNull);
                _throwIfApiNotSupported("ChartTitle.height", _defaultApiSetName, "1.7", _hostName);
                return this._H;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "horizontalAlignment", {
            get: function () {
                _throwIfNotLoaded("horizontalAlignment", this._Ho, _typeChartTitle, this._isNull);
                _throwIfApiNotSupported("ChartTitle.horizontalAlignment", _defaultApiSetName, "1.7", _hostName);
                return this._Ho;
            },
            set: function (value) {
                this._Ho = value;
                _createSetPropertyAction(this.context, this, "HorizontalAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "left", {
            get: function () {
                _throwIfNotLoaded("left", this._L, _typeChartTitle, this._isNull);
                _throwIfApiNotSupported("ChartTitle.left", _defaultApiSetName, "1.7", _hostName);
                return this._L;
            },
            set: function (value) {
                this._L = value;
                _createSetPropertyAction(this.context, this, "Left", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "overlay", {
            get: function () {
                _throwIfNotLoaded("overlay", this._O, _typeChartTitle, this._isNull);
                return this._O;
            },
            set: function (value) {
                this._O = value;
                _createSetPropertyAction(this.context, this, "Overlay", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "position", {
            get: function () {
                _throwIfNotLoaded("position", this._P, _typeChartTitle, this._isNull);
                _throwIfApiNotSupported("ChartTitle.position", _defaultApiSetName, "1.7", _hostName);
                return this._P;
            },
            set: function (value) {
                this._P = value;
                _createSetPropertyAction(this.context, this, "Position", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "showShadow", {
            get: function () {
                _throwIfNotLoaded("showShadow", this._S, _typeChartTitle, this._isNull);
                _throwIfApiNotSupported("ChartTitle.showShadow", _defaultApiSetName, "1.7", _hostName);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "ShowShadow", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "text", {
            get: function () {
                _throwIfNotLoaded("text", this._T, _typeChartTitle, this._isNull);
                return this._T;
            },
            set: function (value) {
                this._T = value;
                _createSetPropertyAction(this.context, this, "Text", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "textOrientation", {
            get: function () {
                _throwIfNotLoaded("textOrientation", this._Te, _typeChartTitle, this._isNull);
                _throwIfApiNotSupported("ChartTitle.textOrientation", _defaultApiSetName, "1.7", _hostName);
                return this._Te;
            },
            set: function (value) {
                this._Te = value;
                _createSetPropertyAction(this.context, this, "TextOrientation", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "top", {
            get: function () {
                _throwIfNotLoaded("top", this._To, _typeChartTitle, this._isNull);
                _throwIfApiNotSupported("ChartTitle.top", _defaultApiSetName, "1.7", _hostName);
                return this._To;
            },
            set: function (value) {
                this._To = value;
                _createSetPropertyAction(this.context, this, "Top", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "verticalAlignment", {
            get: function () {
                _throwIfNotLoaded("verticalAlignment", this._V, _typeChartTitle, this._isNull);
                _throwIfApiNotSupported("ChartTitle.verticalAlignment", _defaultApiSetName, "1.7", _hostName);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "VerticalAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "visible", {
            get: function () {
                _throwIfNotLoaded("visible", this._Vi, _typeChartTitle, this._isNull);
                return this._Vi;
            },
            set: function (value) {
                this._Vi = value;
                _createSetPropertyAction(this.context, this, "Visible", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitle.prototype, "width", {
            get: function () {
                _throwIfNotLoaded("width", this._W, _typeChartTitle, this._isNull);
                _throwIfApiNotSupported("ChartTitle.width", _defaultApiSetName, "1.7", _hostName);
                return this._W;
            },
            enumerable: true,
            configurable: true
        });
        ChartTitle.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["visible", "text", "overlay", "horizontalAlignment", "top", "left", "verticalAlignment", "textOrientation", "position", "showShadow"], ["format"], []);
        };
        ChartTitle.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartTitle.prototype.getSubstring = function (start, length) {
            _throwIfApiNotSupported("ChartTitle.getSubstring", _defaultApiSetName, "1.8", _hostName);
            return new Excel.ChartFormatString(this.context, _createMethodObjectPath(this.context, this, "GetSubstring", 1, [start, length], false, false, null, false));
        };
        ChartTitle.prototype.setFormula = function (formula) {
            _throwIfApiNotSupported("ChartTitle.setFormula", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "SetFormula", 0, [formula], false);
        };
        ChartTitle.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Height"])) {
                this._H = obj["Height"];
            }
            if (!_isUndefined(obj["HorizontalAlignment"])) {
                this._Ho = obj["HorizontalAlignment"];
            }
            if (!_isUndefined(obj["Left"])) {
                this._L = obj["Left"];
            }
            if (!_isUndefined(obj["Overlay"])) {
                this._O = obj["Overlay"];
            }
            if (!_isUndefined(obj["Position"])) {
                this._P = obj["Position"];
            }
            if (!_isUndefined(obj["ShowShadow"])) {
                this._S = obj["ShowShadow"];
            }
            if (!_isUndefined(obj["Text"])) {
                this._T = obj["Text"];
            }
            if (!_isUndefined(obj["TextOrientation"])) {
                this._Te = obj["TextOrientation"];
            }
            if (!_isUndefined(obj["Top"])) {
                this._To = obj["Top"];
            }
            if (!_isUndefined(obj["VerticalAlignment"])) {
                this._V = obj["VerticalAlignment"];
            }
            if (!_isUndefined(obj["Visible"])) {
                this._Vi = obj["Visible"];
            }
            if (!_isUndefined(obj["Width"])) {
                this._W = obj["Width"];
            }
            _handleNavigationPropertyResults(this, obj, ["format", "Format"]);
        };
        ChartTitle.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartTitle.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartTitle.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartTitle.prototype.toJSON = function () {
            return _toJson(this, {
                "height": this._H,
                "horizontalAlignment": this._Ho,
                "left": this._L,
                "overlay": this._O,
                "position": this._P,
                "showShadow": this._S,
                "text": this._T,
                "textOrientation": this._Te,
                "top": this._To,
                "verticalAlignment": this._V,
                "visible": this._Vi,
                "width": this._W,
            }, {
                "format": this._F,
            });
        };
        ChartTitle.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartTitle;
    }(OfficeExtension.ClientObject));
    Excel.ChartTitle = ChartTitle;
    var _typeChartFormatString = "ChartFormatString";
    var ChartFormatString = (function (_super) {
        __extends(ChartFormatString, _super);
        function ChartFormatString() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartFormatString.prototype, "_className", {
            get: function () {
                return "ChartFormatString";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartFormatString.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["font"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartFormatString.prototype, "font", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartFont(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        ChartFormatString.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["font"], []);
        };
        ChartFormatString.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartFormatString.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["font", "Font"]);
        };
        ChartFormatString.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartFormatString.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartFormatString.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartFormatString.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "font": this._F,
            });
        };
        ChartFormatString.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartFormatString;
    }(OfficeExtension.ClientObject));
    Excel.ChartFormatString = ChartFormatString;
    var _typeChartTitleFormat = "ChartTitleFormat";
    var ChartTitleFormat = (function (_super) {
        __extends(ChartTitleFormat, _super);
        function ChartTitleFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartTitleFormat.prototype, "_className", {
            get: function () {
                return "ChartTitleFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitleFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["font", "fill", "border"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitleFormat.prototype, "border", {
            get: function () {
                _throwIfApiNotSupported("ChartTitleFormat.border", _defaultApiSetName, "1.7", _hostName);
                if (!this._B) {
                    this._B = new Excel.ChartBorder(this.context, _createPropertyObjectPath(this.context, this, "Border", false, false, false));
                }
                return this._B;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitleFormat.prototype, "fill", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartFill(this.context, _createPropertyObjectPath(this.context, this, "Fill", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTitleFormat.prototype, "font", {
            get: function () {
                if (!this._Fo) {
                    this._Fo = new Excel.ChartFont(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false, false));
                }
                return this._Fo;
            },
            enumerable: true,
            configurable: true
        });
        ChartTitleFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["font", "border"], [
                "fill"
            ]);
        };
        ChartTitleFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartTitleFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["border", "Border", "fill", "Fill", "font", "Font"]);
        };
        ChartTitleFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartTitleFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartTitleFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartTitleFormat.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "border": this._B,
                "font": this._Fo,
            });
        };
        ChartTitleFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartTitleFormat;
    }(OfficeExtension.ClientObject));
    Excel.ChartTitleFormat = ChartTitleFormat;
    var _typeChartFill = "ChartFill";
    var ChartFill = (function (_super) {
        __extends(ChartFill, _super);
        function ChartFill() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartFill.prototype, "_className", {
            get: function () {
                return "ChartFill";
            },
            enumerable: true,
            configurable: true
        });
        ChartFill.prototype.load = function (option) {
            _load(this, option);
            return this;
        };
        ChartFill.prototype.clear = function () {
            _createMethodAction(this.context, this, "Clear", 0, [], false);
        };
        ChartFill.prototype.setSolidColor = function (color) {
            _createMethodAction(this.context, this, "SetSolidColor", 0, [color], false);
        };
        ChartFill.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
        };
        ChartFill.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartFill.prototype.toJSON = function () {
            return _toJson(this, {}, {});
        };
        return ChartFill;
    }(OfficeExtension.ClientObject));
    Excel.ChartFill = ChartFill;
    var _typeChartBorder = "ChartBorder";
    var ChartBorder = (function (_super) {
        __extends(ChartBorder, _super);
        function ChartBorder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartBorder.prototype, "_className", {
            get: function () {
                return "ChartBorder";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartBorder.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["color", "lineStyle", "weight"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartBorder.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartBorder.prototype, "color", {
            get: function () {
                _throwIfNotLoaded("color", this._C, _typeChartBorder, this._isNull);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Color", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartBorder.prototype, "lineStyle", {
            get: function () {
                _throwIfNotLoaded("lineStyle", this._L, _typeChartBorder, this._isNull);
                return this._L;
            },
            set: function (value) {
                this._L = value;
                _createSetPropertyAction(this.context, this, "LineStyle", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartBorder.prototype, "weight", {
            get: function () {
                _throwIfNotLoaded("weight", this._W, _typeChartBorder, this._isNull);
                return this._W;
            },
            set: function (value) {
                this._W = value;
                _createSetPropertyAction(this.context, this, "Weight", value);
            },
            enumerable: true,
            configurable: true
        });
        ChartBorder.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["color", "lineStyle", "weight"], [], []);
        };
        ChartBorder.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartBorder.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Color"])) {
                this._C = obj["Color"];
            }
            if (!_isUndefined(obj["LineStyle"])) {
                this._L = obj["LineStyle"];
            }
            if (!_isUndefined(obj["Weight"])) {
                this._W = obj["Weight"];
            }
        };
        ChartBorder.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartBorder.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartBorder.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartBorder.prototype.toJSON = function () {
            return _toJson(this, {
                "color": this._C,
                "lineStyle": this._L,
                "weight": this._W,
            }, {});
        };
        ChartBorder.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartBorder;
    }(OfficeExtension.ClientObject));
    Excel.ChartBorder = ChartBorder;
    var _typeChartLineFormat = "ChartLineFormat";
    var ChartLineFormat = (function (_super) {
        __extends(ChartLineFormat, _super);
        function ChartLineFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartLineFormat.prototype, "_className", {
            get: function () {
                return "ChartLineFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLineFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["color", "lineStyle", "weight"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLineFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLineFormat.prototype, "color", {
            get: function () {
                _throwIfNotLoaded("color", this._C, _typeChartLineFormat, this._isNull);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Color", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLineFormat.prototype, "lineStyle", {
            get: function () {
                _throwIfNotLoaded("lineStyle", this._L, _typeChartLineFormat, this._isNull);
                _throwIfApiNotSupported("ChartLineFormat.lineStyle", _defaultApiSetName, "1.7", _hostName);
                return this._L;
            },
            set: function (value) {
                this._L = value;
                _createSetPropertyAction(this.context, this, "LineStyle", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartLineFormat.prototype, "weight", {
            get: function () {
                _throwIfNotLoaded("weight", this._W, _typeChartLineFormat, this._isNull);
                _throwIfApiNotSupported("ChartLineFormat.weight", _defaultApiSetName, "1.7", _hostName);
                return this._W;
            },
            set: function (value) {
                this._W = value;
                _createSetPropertyAction(this.context, this, "Weight", value);
            },
            enumerable: true,
            configurable: true
        });
        ChartLineFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["color", "lineStyle", "weight"], [], []);
        };
        ChartLineFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartLineFormat.prototype.clear = function () {
            _createMethodAction(this.context, this, "Clear", 0, [], false);
        };
        ChartLineFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Color"])) {
                this._C = obj["Color"];
            }
            if (!_isUndefined(obj["LineStyle"])) {
                this._L = obj["LineStyle"];
            }
            if (!_isUndefined(obj["Weight"])) {
                this._W = obj["Weight"];
            }
        };
        ChartLineFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartLineFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartLineFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartLineFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "color": this._C,
                "lineStyle": this._L,
                "weight": this._W,
            }, {});
        };
        ChartLineFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartLineFormat;
    }(OfficeExtension.ClientObject));
    Excel.ChartLineFormat = ChartLineFormat;
    var _typeChartFont = "ChartFont";
    var ChartFont = (function (_super) {
        __extends(ChartFont, _super);
        function ChartFont() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartFont.prototype, "_className", {
            get: function () {
                return "ChartFont";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartFont.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["bold", "color", "italic", "name", "size", "underline"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartFont.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartFont.prototype, "bold", {
            get: function () {
                _throwIfNotLoaded("bold", this._B, _typeChartFont, this._isNull);
                return this._B;
            },
            set: function (value) {
                this._B = value;
                _createSetPropertyAction(this.context, this, "Bold", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartFont.prototype, "color", {
            get: function () {
                _throwIfNotLoaded("color", this._C, _typeChartFont, this._isNull);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Color", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartFont.prototype, "italic", {
            get: function () {
                _throwIfNotLoaded("italic", this._I, _typeChartFont, this._isNull);
                return this._I;
            },
            set: function (value) {
                this._I = value;
                _createSetPropertyAction(this.context, this, "Italic", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartFont.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typeChartFont, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "Name", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartFont.prototype, "size", {
            get: function () {
                _throwIfNotLoaded("size", this._S, _typeChartFont, this._isNull);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "Size", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartFont.prototype, "underline", {
            get: function () {
                _throwIfNotLoaded("underline", this._U, _typeChartFont, this._isNull);
                return this._U;
            },
            set: function (value) {
                this._U = value;
                _createSetPropertyAction(this.context, this, "Underline", value);
            },
            enumerable: true,
            configurable: true
        });
        ChartFont.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["bold", "color", "italic", "name", "size", "underline"], [], []);
        };
        ChartFont.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartFont.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Bold"])) {
                this._B = obj["Bold"];
            }
            if (!_isUndefined(obj["Color"])) {
                this._C = obj["Color"];
            }
            if (!_isUndefined(obj["Italic"])) {
                this._I = obj["Italic"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["Size"])) {
                this._S = obj["Size"];
            }
            if (!_isUndefined(obj["Underline"])) {
                this._U = obj["Underline"];
            }
        };
        ChartFont.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartFont.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartFont.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartFont.prototype.toJSON = function () {
            return _toJson(this, {
                "bold": this._B,
                "color": this._C,
                "italic": this._I,
                "name": this._N,
                "size": this._S,
                "underline": this._U,
            }, {});
        };
        ChartFont.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartFont;
    }(OfficeExtension.ClientObject));
    Excel.ChartFont = ChartFont;
    var _typeChartTrendline = "ChartTrendline";
    var ChartTrendline = (function (_super) {
        __extends(ChartTrendline, _super);
        function ChartTrendline() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartTrendline.prototype, "_className", {
            get: function () {
                return "ChartTrendline";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["type", "polynomialOrder", "movingAveragePeriod", "_Id", "displayEquation", "displayRSquared", "forward", "backward", "name", "intercept"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, false, true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["format"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ChartTrendlineFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "backward", {
            get: function () {
                _throwIfNotLoaded("backward", this._B, _typeChartTrendline, this._isNull);
                return this._B;
            },
            set: function (value) {
                this._B = value;
                _createSetPropertyAction(this.context, this, "Backward", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "displayEquation", {
            get: function () {
                _throwIfNotLoaded("displayEquation", this._D, _typeChartTrendline, this._isNull);
                return this._D;
            },
            set: function (value) {
                this._D = value;
                _createSetPropertyAction(this.context, this, "DisplayEquation", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "displayRSquared", {
            get: function () {
                _throwIfNotLoaded("displayRSquared", this._Di, _typeChartTrendline, this._isNull);
                return this._Di;
            },
            set: function (value) {
                this._Di = value;
                _createSetPropertyAction(this.context, this, "DisplayRSquared", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "forward", {
            get: function () {
                _throwIfNotLoaded("forward", this._Fo, _typeChartTrendline, this._isNull);
                return this._Fo;
            },
            set: function (value) {
                this._Fo = value;
                _createSetPropertyAction(this.context, this, "Forward", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "intercept", {
            get: function () {
                _throwIfNotLoaded("intercept", this._I, _typeChartTrendline, this._isNull);
                return this._I;
            },
            set: function (value) {
                this._I = value;
                _createSetPropertyAction(this.context, this, "Intercept", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "movingAveragePeriod", {
            get: function () {
                _throwIfNotLoaded("movingAveragePeriod", this._M, _typeChartTrendline, this._isNull);
                return this._M;
            },
            set: function (value) {
                this._M = value;
                _createSetPropertyAction(this.context, this, "MovingAveragePeriod", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typeChartTrendline, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "Name", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "polynomialOrder", {
            get: function () {
                _throwIfNotLoaded("polynomialOrder", this._P, _typeChartTrendline, this._isNull);
                return this._P;
            },
            set: function (value) {
                this._P = value;
                _createSetPropertyAction(this.context, this, "PolynomialOrder", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "type", {
            get: function () {
                _throwIfNotLoaded("type", this._T, _typeChartTrendline, this._isNull);
                return this._T;
            },
            set: function (value) {
                this._T = value;
                _createSetPropertyAction(this.context, this, "Type", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendline.prototype, "_Id", {
            get: function () {
                _throwIfNotLoaded("_Id", this.__I, _typeChartTrendline, this._isNull);
                return this.__I;
            },
            enumerable: true,
            configurable: true
        });
        ChartTrendline.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["type", "polynomialOrder", "movingAveragePeriod", "displayEquation", "displayRSquared", "forward", "backward", "name", "intercept"], ["format"], []);
        };
        ChartTrendline.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartTrendline.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        ChartTrendline.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Backward"])) {
                this._B = obj["Backward"];
            }
            if (!_isUndefined(obj["DisplayEquation"])) {
                this._D = obj["DisplayEquation"];
            }
            if (!_isUndefined(obj["DisplayRSquared"])) {
                this._Di = obj["DisplayRSquared"];
            }
            if (!_isUndefined(obj["Forward"])) {
                this._Fo = obj["Forward"];
            }
            if (!_isUndefined(obj["Intercept"])) {
                this._I = obj["Intercept"];
            }
            if (!_isUndefined(obj["MovingAveragePeriod"])) {
                this._M = obj["MovingAveragePeriod"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["PolynomialOrder"])) {
                this._P = obj["PolynomialOrder"];
            }
            if (!_isUndefined(obj["Type"])) {
                this._T = obj["Type"];
            }
            if (!_isUndefined(obj["_Id"])) {
                this.__I = obj["_Id"];
            }
            _handleNavigationPropertyResults(this, obj, ["format", "Format"]);
        };
        ChartTrendline.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartTrendline.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartTrendline.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["_Id"])) {
                this.__I = value["_Id"];
            }
        };
        ChartTrendline.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartTrendline.prototype.toJSON = function () {
            return _toJson(this, {
                "backward": this._B,
                "displayEquation": this._D,
                "displayRSquared": this._Di,
                "forward": this._Fo,
                "intercept": this._I,
                "movingAveragePeriod": this._M,
                "name": this._N,
                "polynomialOrder": this._P,
                "type": this._T,
            }, {
                "format": this._F,
            });
        };
        ChartTrendline.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartTrendline;
    }(OfficeExtension.ClientObject));
    Excel.ChartTrendline = ChartTrendline;
    var _typeChartTrendlineCollection = "ChartTrendlineCollection";
    var ChartTrendlineCollection = (function (_super) {
        __extends(ChartTrendlineCollection, _super);
        function ChartTrendlineCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartTrendlineCollection.prototype, "_className", {
            get: function () {
                return "ChartTrendlineCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendlineCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendlineCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeChartTrendlineCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        ChartTrendlineCollection.prototype.add = function (type) {
            return new Excel.ChartTrendline(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [type], false, true, null, false));
        };
        ChartTrendlineCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        ChartTrendlineCollection.prototype.getItem = function (index) {
            return new Excel.ChartTrendline(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        ChartTrendlineCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.ChartTrendline(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        ChartTrendlineCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartTrendlineCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartTrendlineCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.ChartTrendline(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        ChartTrendlineCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return ChartTrendlineCollection;
    }(OfficeExtension.ClientObject));
    Excel.ChartTrendlineCollection = ChartTrendlineCollection;
    var _typeChartTrendlineFormat = "ChartTrendlineFormat";
    var ChartTrendlineFormat = (function (_super) {
        __extends(ChartTrendlineFormat, _super);
        function ChartTrendlineFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ChartTrendlineFormat.prototype, "_className", {
            get: function () {
                return "ChartTrendlineFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendlineFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["line"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ChartTrendlineFormat.prototype, "line", {
            get: function () {
                if (!this._L) {
                    this._L = new Excel.ChartLineFormat(this.context, _createPropertyObjectPath(this.context, this, "Line", false, false, false));
                }
                return this._L;
            },
            enumerable: true,
            configurable: true
        });
        ChartTrendlineFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["line"], []);
        };
        ChartTrendlineFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ChartTrendlineFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["line", "Line"]);
        };
        ChartTrendlineFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ChartTrendlineFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ChartTrendlineFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ChartTrendlineFormat.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "line": this._L,
            });
        };
        ChartTrendlineFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ChartTrendlineFormat;
    }(OfficeExtension.ClientObject));
    Excel.ChartTrendlineFormat = ChartTrendlineFormat;
    var _typeVisualCollection = "VisualCollection";
    var VisualCollection = (function (_super) {
        __extends(VisualCollection, _super);
        function VisualCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(VisualCollection.prototype, "_className", {
            get: function () {
                return "VisualCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VisualCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(VisualCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeVisualCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        VisualCollection.prototype.add = function (visualDefinitionGuid, dataSourceType, dataSourceContent) {
            return new Excel.Visual(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [visualDefinitionGuid, dataSourceType, dataSourceContent], false, true, null, false));
        };
        VisualCollection.prototype.getDefinitions = function () {
            var action = _createMethodAction(this.context, this, "GetDefinitions", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        VisualCollection.prototype.getPreview = function (visualDefinitionGuid, width, height, dpi) {
            var action = _createMethodAction(this.context, this, "GetPreview", 0, [visualDefinitionGuid, width, height, dpi], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        VisualCollection.prototype._GetItem = function (id) {
            return new Excel.Visual(this.context, _createIndexerObjectPath(this.context, this, [id]));
        };
        VisualCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.Visual(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        VisualCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        VisualCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        VisualCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.Visual(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        VisualCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return VisualCollection;
    }(OfficeExtension.ClientObject));
    Excel.VisualCollection = VisualCollection;
    var _typeVisual = "Visual";
    var Visual = (function (_super) {
        __extends(Visual, _super);
        function Visual() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Visual.prototype, "_className", {
            get: function () {
                return "Visual";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Visual.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["id"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Visual.prototype, "id", {
            get: function () {
                _throwIfNotLoaded("id", this._I, _typeVisual, this._isNull);
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Visual.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        Visual.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Id"])) {
                this._I = obj["Id"];
            }
        };
        Visual.prototype.load = function (option) {
            return _load(this, option);
        };
        Visual.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        Visual.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["Id"])) {
                this._I = value["Id"];
            }
        };
        Visual.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Visual.prototype.toJSON = function () {
            return _toJson(this, {
                "id": this._I,
            }, {});
        };
        Visual.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return Visual;
    }(OfficeExtension.ClientObject));
    Excel.Visual = Visual;
    var _typeRangeSort = "RangeSort";
    var RangeSort = (function (_super) {
        __extends(RangeSort, _super);
        function RangeSort() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(RangeSort.prototype, "_className", {
            get: function () {
                return "RangeSort";
            },
            enumerable: true,
            configurable: true
        });
        RangeSort.prototype.apply = function (fields, matchCase, hasHeaders, orientation, method) {
            _createMethodAction(this.context, this, "Apply", 0, [fields, matchCase, hasHeaders, orientation, method], false);
        };
        RangeSort.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
        };
        RangeSort.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        RangeSort.prototype.toJSON = function () {
            return _toJson(this, {}, {});
        };
        return RangeSort;
    }(OfficeExtension.ClientObject));
    Excel.RangeSort = RangeSort;
    var _typeTableSort = "TableSort";
    var TableSort = (function (_super) {
        __extends(TableSort, _super);
        function TableSort() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TableSort.prototype, "_className", {
            get: function () {
                return "TableSort";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableSort.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["matchCase", "method", "fields"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableSort.prototype, "fields", {
            get: function () {
                _throwIfNotLoaded("fields", this._F, _typeTableSort, this._isNull);
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableSort.prototype, "matchCase", {
            get: function () {
                _throwIfNotLoaded("matchCase", this._M, _typeTableSort, this._isNull);
                return this._M;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableSort.prototype, "method", {
            get: function () {
                _throwIfNotLoaded("method", this._Me, _typeTableSort, this._isNull);
                return this._Me;
            },
            enumerable: true,
            configurable: true
        });
        TableSort.prototype.apply = function (fields, matchCase, method) {
            _createMethodAction(this.context, this, "Apply", 0, [fields, matchCase, method], false);
        };
        TableSort.prototype.clear = function () {
            _createMethodAction(this.context, this, "Clear", 0, [], false);
        };
        TableSort.prototype.reapply = function () {
            _createMethodAction(this.context, this, "Reapply", 0, [], false);
        };
        TableSort.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Fields"])) {
                this._F = obj["Fields"];
            }
            if (!_isUndefined(obj["MatchCase"])) {
                this._M = obj["MatchCase"];
            }
            if (!_isUndefined(obj["Method"])) {
                this._Me = obj["Method"];
            }
        };
        TableSort.prototype.load = function (option) {
            return _load(this, option);
        };
        TableSort.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        TableSort.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        TableSort.prototype.toJSON = function () {
            return _toJson(this, {
                "fields": this._F,
                "matchCase": this._M,
                "method": this._Me,
            }, {});
        };
        TableSort.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return TableSort;
    }(OfficeExtension.ClientObject));
    Excel.TableSort = TableSort;
    var _typeFilter = "Filter";
    var Filter = (function (_super) {
        __extends(Filter, _super);
        function Filter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Filter.prototype, "_className", {
            get: function () {
                return "Filter";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Filter.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["criteria"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Filter.prototype, "criteria", {
            get: function () {
                _throwIfNotLoaded("criteria", this._C, _typeFilter, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Filter.prototype.apply = function (criteria) {
            _createMethodAction(this.context, this, "Apply", 0, [criteria], false);
        };
        Filter.prototype.applyBottomItemsFilter = function (count) {
            _createMethodAction(this.context, this, "ApplyBottomItemsFilter", 0, [count], false);
        };
        Filter.prototype.applyBottomPercentFilter = function (percent) {
            _createMethodAction(this.context, this, "ApplyBottomPercentFilter", 0, [percent], false);
        };
        Filter.prototype.applyCellColorFilter = function (color) {
            _createMethodAction(this.context, this, "ApplyCellColorFilter", 0, [color], false);
        };
        Filter.prototype.applyCustomFilter = function (criteria1, criteria2, oper) {
            _createMethodAction(this.context, this, "ApplyCustomFilter", 0, [criteria1, criteria2, oper], false);
        };
        Filter.prototype.applyDynamicFilter = function (criteria) {
            _createMethodAction(this.context, this, "ApplyDynamicFilter", 0, [criteria], false);
        };
        Filter.prototype.applyFontColorFilter = function (color) {
            _createMethodAction(this.context, this, "ApplyFontColorFilter", 0, [color], false);
        };
        Filter.prototype.applyIconFilter = function (icon) {
            _createMethodAction(this.context, this, "ApplyIconFilter", 0, [icon], false);
        };
        Filter.prototype.applyTopItemsFilter = function (count) {
            _createMethodAction(this.context, this, "ApplyTopItemsFilter", 0, [count], false);
        };
        Filter.prototype.applyTopPercentFilter = function (percent) {
            _createMethodAction(this.context, this, "ApplyTopPercentFilter", 0, [percent], false);
        };
        Filter.prototype.applyValuesFilter = function (values) {
            _createMethodAction(this.context, this, "ApplyValuesFilter", 0, [values], false);
        };
        Filter.prototype.clear = function () {
            _createMethodAction(this.context, this, "Clear", 0, [], false);
        };
        Filter.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Criteria"])) {
                this._C = obj["Criteria"];
            }
        };
        Filter.prototype.load = function (option) {
            return _load(this, option);
        };
        Filter.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        Filter.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Filter.prototype.toJSON = function () {
            return _toJson(this, {
                "criteria": this._C,
            }, {});
        };
        Filter.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return Filter;
    }(OfficeExtension.ClientObject));
    Excel.Filter = Filter;
    var _typeCustomXmlPartScopedCollection = "CustomXmlPartScopedCollection";
    var CustomXmlPartScopedCollection = (function (_super) {
        __extends(CustomXmlPartScopedCollection, _super);
        function CustomXmlPartScopedCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomXmlPartScopedCollection.prototype, "_className", {
            get: function () {
                return "CustomXmlPartScopedCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomXmlPartScopedCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomXmlPartScopedCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeCustomXmlPartScopedCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        CustomXmlPartScopedCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        CustomXmlPartScopedCollection.prototype.getItem = function (id) {
            return new Excel.CustomXmlPart(this.context, _createIndexerObjectPath(this.context, this, [id]));
        };
        CustomXmlPartScopedCollection.prototype.getItemOrNullObject = function (id) {
            return new Excel.CustomXmlPart(this.context, _createMethodObjectPath(this.context, this, "GetItemOrNullObject", 1, [id], false, false, null, false));
        };
        CustomXmlPartScopedCollection.prototype.getOnlyItem = function () {
            return new Excel.CustomXmlPart(this.context, _createMethodObjectPath(this.context, this, "GetOnlyItem", 1, [], false, false, null, false));
        };
        CustomXmlPartScopedCollection.prototype.getOnlyItemOrNullObject = function () {
            return new Excel.CustomXmlPart(this.context, _createMethodObjectPath(this.context, this, "GetOnlyItemOrNullObject", 1, [], false, false, null, false));
        };
        CustomXmlPartScopedCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.CustomXmlPart(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        CustomXmlPartScopedCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        CustomXmlPartScopedCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        CustomXmlPartScopedCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.CustomXmlPart(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        CustomXmlPartScopedCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return CustomXmlPartScopedCollection;
    }(OfficeExtension.ClientObject));
    Excel.CustomXmlPartScopedCollection = CustomXmlPartScopedCollection;
    var _typeCustomXmlPartCollection = "CustomXmlPartCollection";
    var CustomXmlPartCollection = (function (_super) {
        __extends(CustomXmlPartCollection, _super);
        function CustomXmlPartCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomXmlPartCollection.prototype, "_className", {
            get: function () {
                return "CustomXmlPartCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomXmlPartCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomXmlPartCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeCustomXmlPartCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        CustomXmlPartCollection.prototype.add = function (xml) {
            return new Excel.CustomXmlPart(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [xml], false, true, null, false));
        };
        CustomXmlPartCollection.prototype.getByNamespace = function (namespaceUri) {
            return new Excel.CustomXmlPartScopedCollection(this.context, _createMethodObjectPath(this.context, this, "GetByNamespace", 1, [namespaceUri], true, false, null, false));
        };
        CustomXmlPartCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        CustomXmlPartCollection.prototype.getItem = function (id) {
            return new Excel.CustomXmlPart(this.context, _createIndexerObjectPath(this.context, this, [id]));
        };
        CustomXmlPartCollection.prototype.getItemOrNullObject = function (id) {
            return new Excel.CustomXmlPart(this.context, _createMethodObjectPath(this.context, this, "GetItemOrNullObject", 1, [id], false, false, null, false));
        };
        CustomXmlPartCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.CustomXmlPart(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        CustomXmlPartCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        CustomXmlPartCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        CustomXmlPartCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.CustomXmlPart(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        CustomXmlPartCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return CustomXmlPartCollection;
    }(OfficeExtension.ClientObject));
    Excel.CustomXmlPartCollection = CustomXmlPartCollection;
    var _typeCustomXmlPart = "CustomXmlPart";
    var CustomXmlPart = (function (_super) {
        __extends(CustomXmlPart, _super);
        function CustomXmlPart() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomXmlPart.prototype, "_className", {
            get: function () {
                return "CustomXmlPart";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomXmlPart.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["id", "namespaceUri"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomXmlPart.prototype, "id", {
            get: function () {
                _throwIfNotLoaded("id", this._I, _typeCustomXmlPart, this._isNull);
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomXmlPart.prototype, "namespaceUri", {
            get: function () {
                _throwIfNotLoaded("namespaceUri", this._N, _typeCustomXmlPart, this._isNull);
                return this._N;
            },
            enumerable: true,
            configurable: true
        });
        CustomXmlPart.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        CustomXmlPart.prototype.getXml = function () {
            var action = _createMethodAction(this.context, this, "GetXml", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        CustomXmlPart.prototype.setXml = function (xml) {
            _createMethodAction(this.context, this, "SetXml", 0, [xml], false);
        };
        CustomXmlPart.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Id"])) {
                this._I = obj["Id"];
            }
            if (!_isUndefined(obj["NamespaceUri"])) {
                this._N = obj["NamespaceUri"];
            }
        };
        CustomXmlPart.prototype.load = function (option) {
            return _load(this, option);
        };
        CustomXmlPart.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        CustomXmlPart.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["Id"])) {
                this._I = value["Id"];
            }
        };
        CustomXmlPart.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        CustomXmlPart.prototype.toJSON = function () {
            return _toJson(this, {
                "id": this._I,
                "namespaceUri": this._N,
            }, {});
        };
        CustomXmlPart.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return CustomXmlPart;
    }(OfficeExtension.ClientObject));
    Excel.CustomXmlPart = CustomXmlPart;
    var _type_V1Api = "_V1Api";
    var _V1Api = (function (_super) {
        __extends(_V1Api, _super);
        function _V1Api() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(_V1Api.prototype, "_className", {
            get: function () {
                return "_V1Api";
            },
            enumerable: true,
            configurable: true
        });
        _V1Api.prototype.bindingAddColumns = function (input) {
            var action = _createMethodAction(this.context, this, "BindingAddColumns", 0, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingAddFromNamedItem = function (input) {
            var action = _createMethodAction(this.context, this, "BindingAddFromNamedItem", 1, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingAddFromPrompt = function (input) {
            var action = _createMethodAction(this.context, this, "BindingAddFromPrompt", 1, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingAddFromSelection = function (input) {
            var action = _createMethodAction(this.context, this, "BindingAddFromSelection", 1, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingAddRows = function (input) {
            var action = _createMethodAction(this.context, this, "BindingAddRows", 0, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingClearFormats = function (input) {
            var action = _createMethodAction(this.context, this, "BindingClearFormats", 0, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingDeleteAllDataValues = function (input) {
            var action = _createMethodAction(this.context, this, "BindingDeleteAllDataValues", 0, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingGetAll = function () {
            var action = _createMethodAction(this.context, this, "BindingGetAll", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingGetById = function (input) {
            var action = _createMethodAction(this.context, this, "BindingGetById", 1, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingGetData = function (input) {
            var action = _createMethodAction(this.context, this, "BindingGetData", 1, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingReleaseById = function (input) {
            var action = _createMethodAction(this.context, this, "BindingReleaseById", 1, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingSetData = function (input) {
            var action = _createMethodAction(this.context, this, "BindingSetData", 0, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingSetFormats = function (input) {
            var action = _createMethodAction(this.context, this, "BindingSetFormats", 0, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.bindingSetTableOptions = function (input) {
            var action = _createMethodAction(this.context, this, "BindingSetTableOptions", 0, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.getFilePropertiesAsync = function () {
            _throwIfApiNotSupported("_V1Api.getFilePropertiesAsync", _defaultApiSetName, "1.6", _hostName);
            var action = _createMethodAction(this.context, this, "GetFilePropertiesAsync", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.getSelectedData = function (input) {
            var action = _createMethodAction(this.context, this, "GetSelectedData", 1, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.gotoById = function (input) {
            var action = _createMethodAction(this.context, this, "GotoById", 1, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype.setSelectedData = function (input) {
            var action = _createMethodAction(this.context, this, "SetSelectedData", 0, [input], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        _V1Api.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
        };
        _V1Api.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        _V1Api.prototype.toJSON = function () {
            return _toJson(this, {}, {});
        };
        return _V1Api;
    }(OfficeExtension.ClientObject));
    Excel._V1Api = _V1Api;
    var _typePivotTableCollection = "PivotTableCollection";
    var PivotTableCollection = (function (_super) {
        __extends(PivotTableCollection, _super);
        function PivotTableCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PivotTableCollection.prototype, "_className", {
            get: function () {
                return "PivotTableCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTableCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTableCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typePivotTableCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        PivotTableCollection.prototype.getCount = function () {
            _throwIfApiNotSupported("PivotTableCollection.getCount", _defaultApiSetName, "1.4", _hostName);
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        PivotTableCollection.prototype.getItem = function (name) {
            return new Excel.PivotTable(this.context, _createIndexerObjectPath(this.context, this, [name]));
        };
        PivotTableCollection.prototype.getItemOrNullObject = function (name) {
            _throwIfApiNotSupported("PivotTableCollection.getItemOrNullObject", _defaultApiSetName, "1.4", _hostName);
            return new Excel.PivotTable(this.context, _createMethodObjectPath(this.context, this, "GetItemOrNullObject", 1, [name], false, false, null, false));
        };
        PivotTableCollection.prototype.refreshAll = function () {
            _createMethodAction(this.context, this, "RefreshAll", 0, [], false);
        };
        PivotTableCollection.prototype.add = function (name, address, pivotCache) {
            _throwIfApiNotSupported("PivotTableCollection.add", "Pivot", "1.1", _hostName);
            return new Excel.PivotTable(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [name, address, pivotCache], false, true, null, false));
        };
        PivotTableCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.PivotTable(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        PivotTableCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        PivotTableCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        PivotTableCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.PivotTable(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        PivotTableCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return PivotTableCollection;
    }(OfficeExtension.ClientObject));
    Excel.PivotTableCollection = PivotTableCollection;
    var _typePivotTable = "PivotTable";
    var PivotTable = (function (_super) {
        __extends(PivotTable, _super);
        function PivotTable() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PivotTable.prototype, "_className", {
            get: function () {
                return "PivotTable";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["name", "id", "columnGrandTotals", "value", "rowGrandTotals", "hidden", "summary", "version", "saveData", "hasAutoFormat", "refreshDate", "refreshName", "innerDetail", "displayErrorString", "displayNullString", "enableDrilldown", "enableFieldDialog", "enableWizard", "errorString", "manualUpdate", "nullString", "subtotalHiddenPageItems", "preserveFormatting", "tag", "vacatedStyle", "printTitles", "grandTotalName", "smallGrid", "repeatItemsOnEachPrintedPage", "totalsAnnotation", "alternativeText", "enableDataValueEditing", "enableFieldList", "showPageMultipleItemLabel", "displayEmptyRow", "displayEmptyColumn", "showDrillIndicators", "printDrillIndicators", "displayContextTooltips", "compactRowIndent", "displayFieldCaptions", "inGridDropZones", "showTableStyleLastColumn", "showTableStyleRowStripes", "showTableStyleColumnStripes", "showTableStyleRowHeaders", "showTableStyleColumnHeaders", "allowMultipleFilters", "compactLayoutRowHeader", "compactLayoutColumnHeader", "fieldListSortAscending", "sortUsingCustomLists", "showValuesRow"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, false, true, true, true, false, true, false, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["worksheet", "dataLabelRange", "dataBodyRange", "pivotFields", "calculatedFields"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "worksheet", {
            get: function () {
                if (!this._W) {
                    this._W = new Excel.Worksheet(this.context, _createPropertyObjectPath(this.context, this, "Worksheet", false, false, false));
                }
                return this._W;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "calculatedFields", {
            get: function () {
                _throwIfApiNotSupported("PivotTable.calculatedFields", "Pivot", "1.1", _hostName);
                if (!this._C) {
                    this._C = new Excel.CalculatedFieldCollection(this.context, _createPropertyObjectPath(this.context, this, "CalculatedFields", true, false, false));
                }
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "dataBodyRange", {
            get: function () {
                _throwIfApiNotSupported("PivotTable.dataBodyRange", "Pivot", "1.1", _hostName);
                if (!this._D) {
                    this._D = new Excel.Range(this.context, _createPropertyObjectPath(this.context, this, "DataBodyRange", false, false, false));
                }
                return this._D;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "dataLabelRange", {
            get: function () {
                _throwIfApiNotSupported("PivotTable.dataLabelRange", "Pivot", "1.1", _hostName);
                if (!this._Da) {
                    this._Da = new Excel.Range(this.context, _createPropertyObjectPath(this.context, this, "DataLabelRange", false, false, false));
                }
                return this._Da;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "pivotFields", {
            get: function () {
                _throwIfApiNotSupported("PivotTable.pivotFields", "Pivot", "1.1", _hostName);
                if (!this._P) {
                    this._P = new Excel.PivotFieldCollection(this.context, _createPropertyObjectPath(this.context, this, "PivotFields", true, false, false));
                }
                return this._P;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "columnGrandTotals", {
            get: function () {
                _throwIfNotLoaded("columnGrandTotals", this._Co, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.columnGrandTotals", _defaultApiSetName, "1.8", _hostName);
                return this._Co;
            },
            set: function (value) {
                this._Co = value;
                _createSetPropertyAction(this.context, this, "ColumnGrandTotals", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "id", {
            get: function () {
                _throwIfNotLoaded("id", this._I, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.id", _defaultApiSetName, "1.5", _hostName);
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typePivotTable, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "Name", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "rowGrandTotals", {
            get: function () {
                _throwIfNotLoaded("rowGrandTotals", this._Ro, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.rowGrandTotals", _defaultApiSetName, "1.8", _hostName);
                return this._Ro;
            },
            set: function (value) {
                this._Ro = value;
                _createSetPropertyAction(this.context, this, "RowGrandTotals", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "allowMultipleFilters", {
            get: function () {
                _throwIfNotLoaded("allowMultipleFilters", this._A, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.allowMultipleFilters", "Pivot", "1.1", _hostName);
                return this._A;
            },
            set: function (value) {
                this._A = value;
                _createSetPropertyAction(this.context, this, "AllowMultipleFilters", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "alternativeText", {
            get: function () {
                _throwIfNotLoaded("alternativeText", this._Al, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.alternativeText", "Pivot", "1.1", _hostName);
                return this._Al;
            },
            set: function (value) {
                this._Al = value;
                _createSetPropertyAction(this.context, this, "AlternativeText", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "compactLayoutColumnHeader", {
            get: function () {
                _throwIfNotLoaded("compactLayoutColumnHeader", this._Com, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.compactLayoutColumnHeader", "Pivot", "1.1", _hostName);
                return this._Com;
            },
            set: function (value) {
                this._Com = value;
                _createSetPropertyAction(this.context, this, "CompactLayoutColumnHeader", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "compactLayoutRowHeader", {
            get: function () {
                _throwIfNotLoaded("compactLayoutRowHeader", this._Comp, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.compactLayoutRowHeader", "Pivot", "1.1", _hostName);
                return this._Comp;
            },
            set: function (value) {
                this._Comp = value;
                _createSetPropertyAction(this.context, this, "CompactLayoutRowHeader", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "compactRowIndent", {
            get: function () {
                _throwIfNotLoaded("compactRowIndent", this._Compa, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.compactRowIndent", "Pivot", "1.1", _hostName);
                return this._Compa;
            },
            set: function (value) {
                this._Compa = value;
                _createSetPropertyAction(this.context, this, "CompactRowIndent", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "displayContextTooltips", {
            get: function () {
                _throwIfNotLoaded("displayContextTooltips", this._Di, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.displayContextTooltips", "Pivot", "1.1", _hostName);
                return this._Di;
            },
            set: function (value) {
                this._Di = value;
                _createSetPropertyAction(this.context, this, "DisplayContextTooltips", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "displayEmptyColumn", {
            get: function () {
                _throwIfNotLoaded("displayEmptyColumn", this._Dis, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.displayEmptyColumn", "Pivot", "1.1", _hostName);
                return this._Dis;
            },
            set: function (value) {
                this._Dis = value;
                _createSetPropertyAction(this.context, this, "DisplayEmptyColumn", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "displayEmptyRow", {
            get: function () {
                _throwIfNotLoaded("displayEmptyRow", this._Disp, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.displayEmptyRow", "Pivot", "1.1", _hostName);
                return this._Disp;
            },
            set: function (value) {
                this._Disp = value;
                _createSetPropertyAction(this.context, this, "DisplayEmptyRow", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "displayErrorString", {
            get: function () {
                _throwIfNotLoaded("displayErrorString", this._Displ, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.displayErrorString", "Pivot", "1.1", _hostName);
                return this._Displ;
            },
            set: function (value) {
                this._Displ = value;
                _createSetPropertyAction(this.context, this, "DisplayErrorString", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "displayFieldCaptions", {
            get: function () {
                _throwIfNotLoaded("displayFieldCaptions", this._Displa, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.displayFieldCaptions", "Pivot", "1.1", _hostName);
                return this._Displa;
            },
            set: function (value) {
                this._Displa = value;
                _createSetPropertyAction(this.context, this, "DisplayFieldCaptions", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "displayNullString", {
            get: function () {
                _throwIfNotLoaded("displayNullString", this._Display, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.displayNullString", "Pivot", "1.1", _hostName);
                return this._Display;
            },
            set: function (value) {
                this._Display = value;
                _createSetPropertyAction(this.context, this, "DisplayNullString", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "enableDataValueEditing", {
            get: function () {
                _throwIfNotLoaded("enableDataValueEditing", this._E, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.enableDataValueEditing", "Pivot", "1.1", _hostName);
                return this._E;
            },
            set: function (value) {
                this._E = value;
                _createSetPropertyAction(this.context, this, "EnableDataValueEditing", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "enableDrilldown", {
            get: function () {
                _throwIfNotLoaded("enableDrilldown", this._En, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.enableDrilldown", "Pivot", "1.1", _hostName);
                return this._En;
            },
            set: function (value) {
                this._En = value;
                _createSetPropertyAction(this.context, this, "EnableDrilldown", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "enableFieldDialog", {
            get: function () {
                _throwIfNotLoaded("enableFieldDialog", this._Ena, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.enableFieldDialog", "Pivot", "1.1", _hostName);
                return this._Ena;
            },
            set: function (value) {
                this._Ena = value;
                _createSetPropertyAction(this.context, this, "EnableFieldDialog", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "enableFieldList", {
            get: function () {
                _throwIfNotLoaded("enableFieldList", this._Enab, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.enableFieldList", "Pivot", "1.1", _hostName);
                return this._Enab;
            },
            set: function (value) {
                this._Enab = value;
                _createSetPropertyAction(this.context, this, "EnableFieldList", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "enableWizard", {
            get: function () {
                _throwIfNotLoaded("enableWizard", this._Enabl, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.enableWizard", "Pivot", "1.1", _hostName);
                return this._Enabl;
            },
            set: function (value) {
                this._Enabl = value;
                _createSetPropertyAction(this.context, this, "EnableWizard", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "errorString", {
            get: function () {
                _throwIfNotLoaded("errorString", this._Er, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.errorString", "Pivot", "1.1", _hostName);
                return this._Er;
            },
            set: function (value) {
                this._Er = value;
                _createSetPropertyAction(this.context, this, "ErrorString", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "fieldListSortAscending", {
            get: function () {
                _throwIfNotLoaded("fieldListSortAscending", this._F, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.fieldListSortAscending", "Pivot", "1.1", _hostName);
                return this._F;
            },
            set: function (value) {
                this._F = value;
                _createSetPropertyAction(this.context, this, "FieldListSortAscending", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "grandTotalName", {
            get: function () {
                _throwIfNotLoaded("grandTotalName", this._G, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.grandTotalName", "Pivot", "1.1", _hostName);
                return this._G;
            },
            set: function (value) {
                this._G = value;
                _createSetPropertyAction(this.context, this, "GrandTotalName", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "hasAutoFormat", {
            get: function () {
                _throwIfNotLoaded("hasAutoFormat", this._H, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.hasAutoFormat", "Pivot", "1.1", _hostName);
                return this._H;
            },
            set: function (value) {
                this._H = value;
                _createSetPropertyAction(this.context, this, "HasAutoFormat", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "hidden", {
            get: function () {
                _throwIfNotLoaded("hidden", this._Hi, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.hidden", "Pivot", "1.1", _hostName);
                return this._Hi;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "inGridDropZones", {
            get: function () {
                _throwIfNotLoaded("inGridDropZones", this._In, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.inGridDropZones", "Pivot", "1.1", _hostName);
                return this._In;
            },
            set: function (value) {
                this._In = value;
                _createSetPropertyAction(this.context, this, "InGridDropZones", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "innerDetail", {
            get: function () {
                _throwIfNotLoaded("innerDetail", this._Inn, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.innerDetail", "Pivot", "1.1", _hostName);
                return this._Inn;
            },
            set: function (value) {
                this._Inn = value;
                _createSetPropertyAction(this.context, this, "InnerDetail", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "manualUpdate", {
            get: function () {
                _throwIfNotLoaded("manualUpdate", this._M, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.manualUpdate", "Pivot", "1.1", _hostName);
                return this._M;
            },
            set: function (value) {
                this._M = value;
                _createSetPropertyAction(this.context, this, "ManualUpdate", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "nullString", {
            get: function () {
                _throwIfNotLoaded("nullString", this._Nu, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.nullString", "Pivot", "1.1", _hostName);
                return this._Nu;
            },
            set: function (value) {
                this._Nu = value;
                _createSetPropertyAction(this.context, this, "NullString", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "preserveFormatting", {
            get: function () {
                _throwIfNotLoaded("preserveFormatting", this._Pr, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.preserveFormatting", "Pivot", "1.1", _hostName);
                return this._Pr;
            },
            set: function (value) {
                this._Pr = value;
                _createSetPropertyAction(this.context, this, "PreserveFormatting", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "printDrillIndicators", {
            get: function () {
                _throwIfNotLoaded("printDrillIndicators", this._Pri, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.printDrillIndicators", "Pivot", "1.1", _hostName);
                return this._Pri;
            },
            set: function (value) {
                this._Pri = value;
                _createSetPropertyAction(this.context, this, "PrintDrillIndicators", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "printTitles", {
            get: function () {
                _throwIfNotLoaded("printTitles", this._Prin, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.printTitles", "Pivot", "1.1", _hostName);
                return this._Prin;
            },
            set: function (value) {
                this._Prin = value;
                _createSetPropertyAction(this.context, this, "PrintTitles", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "refreshDate", {
            get: function () {
                _throwIfNotLoaded("refreshDate", this._R, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.refreshDate", "Pivot", "1.1", _hostName);
                return this._R;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "refreshName", {
            get: function () {
                _throwIfNotLoaded("refreshName", this._Re, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.refreshName", "Pivot", "1.1", _hostName);
                return this._Re;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "repeatItemsOnEachPrintedPage", {
            get: function () {
                _throwIfNotLoaded("repeatItemsOnEachPrintedPage", this._Rep, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.repeatItemsOnEachPrintedPage", "Pivot", "1.1", _hostName);
                return this._Rep;
            },
            set: function (value) {
                this._Rep = value;
                _createSetPropertyAction(this.context, this, "RepeatItemsOnEachPrintedPage", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "saveData", {
            get: function () {
                _throwIfNotLoaded("saveData", this._S, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.saveData", "Pivot", "1.1", _hostName);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "SaveData", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "showDrillIndicators", {
            get: function () {
                _throwIfNotLoaded("showDrillIndicators", this._Sh, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.showDrillIndicators", "Pivot", "1.1", _hostName);
                return this._Sh;
            },
            set: function (value) {
                this._Sh = value;
                _createSetPropertyAction(this.context, this, "ShowDrillIndicators", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "showPageMultipleItemLabel", {
            get: function () {
                _throwIfNotLoaded("showPageMultipleItemLabel", this._Sho, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.showPageMultipleItemLabel", "Pivot", "1.1", _hostName);
                return this._Sho;
            },
            set: function (value) {
                this._Sho = value;
                _createSetPropertyAction(this.context, this, "ShowPageMultipleItemLabel", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "showTableStyleColumnHeaders", {
            get: function () {
                _throwIfNotLoaded("showTableStyleColumnHeaders", this._Show, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.showTableStyleColumnHeaders", "Pivot", "1.1", _hostName);
                return this._Show;
            },
            set: function (value) {
                this._Show = value;
                _createSetPropertyAction(this.context, this, "ShowTableStyleColumnHeaders", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "showTableStyleColumnStripes", {
            get: function () {
                _throwIfNotLoaded("showTableStyleColumnStripes", this._ShowT, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.showTableStyleColumnStripes", "Pivot", "1.1", _hostName);
                return this._ShowT;
            },
            set: function (value) {
                this._ShowT = value;
                _createSetPropertyAction(this.context, this, "ShowTableStyleColumnStripes", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "showTableStyleLastColumn", {
            get: function () {
                _throwIfNotLoaded("showTableStyleLastColumn", this._ShowTa, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.showTableStyleLastColumn", "Pivot", "1.1", _hostName);
                return this._ShowTa;
            },
            set: function (value) {
                this._ShowTa = value;
                _createSetPropertyAction(this.context, this, "ShowTableStyleLastColumn", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "showTableStyleRowHeaders", {
            get: function () {
                _throwIfNotLoaded("showTableStyleRowHeaders", this._ShowTab, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.showTableStyleRowHeaders", "Pivot", "1.1", _hostName);
                return this._ShowTab;
            },
            set: function (value) {
                this._ShowTab = value;
                _createSetPropertyAction(this.context, this, "ShowTableStyleRowHeaders", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "showTableStyleRowStripes", {
            get: function () {
                _throwIfNotLoaded("showTableStyleRowStripes", this._ShowTabl, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.showTableStyleRowStripes", "Pivot", "1.1", _hostName);
                return this._ShowTabl;
            },
            set: function (value) {
                this._ShowTabl = value;
                _createSetPropertyAction(this.context, this, "ShowTableStyleRowStripes", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "showValuesRow", {
            get: function () {
                _throwIfNotLoaded("showValuesRow", this._ShowV, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.showValuesRow", "Pivot", "1.1", _hostName);
                return this._ShowV;
            },
            set: function (value) {
                this._ShowV = value;
                _createSetPropertyAction(this.context, this, "ShowValuesRow", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "smallGrid", {
            get: function () {
                _throwIfNotLoaded("smallGrid", this._Sm, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.smallGrid", "Pivot", "1.1", _hostName);
                return this._Sm;
            },
            set: function (value) {
                this._Sm = value;
                _createSetPropertyAction(this.context, this, "SmallGrid", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "sortUsingCustomLists", {
            get: function () {
                _throwIfNotLoaded("sortUsingCustomLists", this._So, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.sortUsingCustomLists", "Pivot", "1.1", _hostName);
                return this._So;
            },
            set: function (value) {
                this._So = value;
                _createSetPropertyAction(this.context, this, "SortUsingCustomLists", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "subtotalHiddenPageItems", {
            get: function () {
                _throwIfNotLoaded("subtotalHiddenPageItems", this._Su, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.subtotalHiddenPageItems", "Pivot", "1.1", _hostName);
                return this._Su;
            },
            set: function (value) {
                this._Su = value;
                _createSetPropertyAction(this.context, this, "SubtotalHiddenPageItems", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "summary", {
            get: function () {
                _throwIfNotLoaded("summary", this._Sum, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.summary", "Pivot", "1.1", _hostName);
                return this._Sum;
            },
            set: function (value) {
                this._Sum = value;
                _createSetPropertyAction(this.context, this, "Summary", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "tag", {
            get: function () {
                _throwIfNotLoaded("tag", this._T, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.tag", "Pivot", "1.1", _hostName);
                return this._T;
            },
            set: function (value) {
                this._T = value;
                _createSetPropertyAction(this.context, this, "Tag", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "totalsAnnotation", {
            get: function () {
                _throwIfNotLoaded("totalsAnnotation", this._To, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.totalsAnnotation", "Pivot", "1.1", _hostName);
                return this._To;
            },
            set: function (value) {
                this._To = value;
                _createSetPropertyAction(this.context, this, "TotalsAnnotation", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "vacatedStyle", {
            get: function () {
                _throwIfNotLoaded("vacatedStyle", this._V, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.vacatedStyle", "Pivot", "1.1", _hostName);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "VacatedStyle", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "value", {
            get: function () {
                _throwIfNotLoaded("value", this._Va, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.value", "Pivot", "1.1", _hostName);
                return this._Va;
            },
            set: function (value) {
                this._Va = value;
                _createSetPropertyAction(this.context, this, "Value", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotTable.prototype, "version", {
            get: function () {
                _throwIfNotLoaded("version", this._Ve, _typePivotTable, this._isNull);
                _throwIfApiNotSupported("PivotTable.version", "Pivot", "1.1", _hostName);
                return this._Ve;
            },
            enumerable: true,
            configurable: true
        });
        PivotTable.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["name", "columnGrandTotals", "value", "rowGrandTotals", "summary", "saveData", "hasAutoFormat", "innerDetail", "displayErrorString", "displayNullString", "enableDrilldown", "enableFieldDialog", "enableWizard", "errorString", "manualUpdate", "nullString", "subtotalHiddenPageItems", "preserveFormatting", "tag", "vacatedStyle", "printTitles", "grandTotalName", "smallGrid", "repeatItemsOnEachPrintedPage", "totalsAnnotation", "alternativeText", "enableDataValueEditing", "enableFieldList", "showPageMultipleItemLabel", "displayEmptyRow", "displayEmptyColumn", "showDrillIndicators", "printDrillIndicators", "displayContextTooltips", "compactRowIndent", "displayFieldCaptions", "inGridDropZones", "showTableStyleLastColumn", "showTableStyleRowStripes", "showTableStyleColumnStripes", "showTableStyleRowHeaders", "showTableStyleColumnHeaders", "allowMultipleFilters", "compactLayoutRowHeader", "compactLayoutColumnHeader", "fieldListSortAscending", "sortUsingCustomLists", "showValuesRow"], ["dataLabelRange", "dataBodyRange"], [
                "calculatedFields",
                "pivotFields",
                "worksheet"
            ]);
        };
        PivotTable.prototype.refresh = function () {
            _createMethodAction(this.context, this, "Refresh", 0, [], false);
        };
        PivotTable.prototype.rowAxisLayout = function (RowLayout) {
            _throwIfApiNotSupported("PivotTable.rowAxisLayout", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "RowAxisLayout", 0, [RowLayout], false);
        };
        PivotTable.prototype.subtotalLocation = function (Location) {
            _throwIfApiNotSupported("PivotTable.subtotalLocation", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "SubtotalLocation", 0, [Location], false);
        };
        PivotTable.prototype.addChart = function (chartType, seriesBy) {
            _throwIfApiNotSupported("PivotTable.addChart", "Pivot", "1.1", _hostName);
            return new Excel.Chart(this.context, _createMethodObjectPath(this.context, this, "AddChart", 0, [chartType, seriesBy], false, false, null, false));
        };
        PivotTable.prototype.addDataField = function (field, caption, func) {
            _throwIfApiNotSupported("PivotTable.addDataField", "Pivot", "1.1", _hostName);
            return new Excel.PivotField(this.context, _createMethodObjectPath(this.context, this, "AddDataField", 0, [field, caption, func], false, false, null, false));
        };
        PivotTable.prototype.clearTable = function () {
            _throwIfApiNotSupported("PivotTable.clearTable", "Pivot", "1.1", _hostName);
            _createMethodAction(this.context, this, "ClearTable", 0, [], false);
        };
        PivotTable.prototype.getColumnField = function (Index) {
            _throwIfApiNotSupported("PivotTable.getColumnField", "Pivot", "1.1", _hostName);
            return new Excel.PivotField(this.context, _createMethodObjectPath(this.context, this, "GetColumnField", 1, [Index], false, false, null, false));
        };
        PivotTable.prototype.getColumnRange = function () {
            _throwIfApiNotSupported("PivotTable.getColumnRange", "Pivot", "1.1", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetColumnRange", 1, [], false, true, null, false));
        };
        PivotTable.prototype.getDataField = function (Index) {
            _throwIfApiNotSupported("PivotTable.getDataField", "Pivot", "1.1", _hostName);
            return new Excel.PivotField(this.context, _createMethodObjectPath(this.context, this, "GetDataField", 1, [Index], false, false, null, false));
        };
        PivotTable.prototype.getDataPivotField = function () {
            _throwIfApiNotSupported("PivotTable.getDataPivotField", "Pivot", "1.1", _hostName);
            return new Excel.PivotField(this.context, _createMethodObjectPath(this.context, this, "GetDataPivotField", 1, [], false, false, null, false));
        };
        PivotTable.prototype.getEntireRange = function () {
            _throwIfApiNotSupported("PivotTable.getEntireRange", "Pivot", "1.1", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetEntireRange", 1, [], false, true, null, false));
        };
        PivotTable.prototype.getHiddenField = function (Index) {
            _throwIfApiNotSupported("PivotTable.getHiddenField", "Pivot", "1.1", _hostName);
            return new Excel.PivotField(this.context, _createMethodObjectPath(this.context, this, "GetHiddenField", 1, [Index], false, false, null, false));
        };
        PivotTable.prototype.getPageRange = function () {
            _throwIfApiNotSupported("PivotTable.getPageRange", "Pivot", "1.1", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetPageRange", 1, [], false, true, null, false));
        };
        PivotTable.prototype.getRowField = function (Index) {
            _throwIfApiNotSupported("PivotTable.getRowField", "Pivot", "1.1", _hostName);
            return new Excel.PivotField(this.context, _createMethodObjectPath(this.context, this, "GetRowField", 1, [Index], false, false, null, false));
        };
        PivotTable.prototype.getRowRange = function () {
            _throwIfApiNotSupported("PivotTable.getRowRange", "Pivot", "1.1", _hostName);
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRowRange", 1, [], false, true, null, false));
        };
        PivotTable.prototype.getVisibleFields = function () {
            _throwIfApiNotSupported("PivotTable.getVisibleFields", "Pivot", "1.1", _hostName);
            return new Excel.PivotFieldCollection(this.context, _createMethodObjectPath(this.context, this, "GetVisibleFields", 1, [], true, false, null, false));
        };
        PivotTable.prototype.listFormulas = function () {
            _throwIfApiNotSupported("PivotTable.listFormulas", "Pivot", "1.1", _hostName);
            _createMethodAction(this.context, this, "ListFormulas", 0, [], false);
        };
        PivotTable.prototype.pivotSelect = function (Name, Mode, UseStandardName) {
            _throwIfApiNotSupported("PivotTable.pivotSelect", "Pivot", "1.1", _hostName);
            _createMethodAction(this.context, this, "PivotSelect", 0, [Name, Mode, UseStandardName], false);
        };
        PivotTable.prototype.refreshTable = function () {
            _throwIfApiNotSupported("PivotTable.refreshTable", "Pivot", "1.1", _hostName);
            var action = _createMethodAction(this.context, this, "RefreshTable", 0, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        PivotTable.prototype.repeatAllLabels = function (Repeat) {
            _throwIfApiNotSupported("PivotTable.repeatAllLabels", "Pivot", "1.1", _hostName);
            _createMethodAction(this.context, this, "RepeatAllLabels", 0, [Repeat], false);
        };
        PivotTable.prototype.update = function () {
            _throwIfApiNotSupported("PivotTable.update", "Pivot", "1.1", _hostName);
            _createMethodAction(this.context, this, "Update", 0, [], false);
        };
        PivotTable.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["ColumnGrandTotals"])) {
                this._Co = obj["ColumnGrandTotals"];
            }
            if (!_isUndefined(obj["Id"])) {
                this._I = obj["Id"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["RowGrandTotals"])) {
                this._Ro = obj["RowGrandTotals"];
            }
            if (!_isUndefined(obj["AllowMultipleFilters"])) {
                this._A = obj["AllowMultipleFilters"];
            }
            if (!_isUndefined(obj["AlternativeText"])) {
                this._Al = obj["AlternativeText"];
            }
            if (!_isUndefined(obj["CompactLayoutColumnHeader"])) {
                this._Com = obj["CompactLayoutColumnHeader"];
            }
            if (!_isUndefined(obj["CompactLayoutRowHeader"])) {
                this._Comp = obj["CompactLayoutRowHeader"];
            }
            if (!_isUndefined(obj["CompactRowIndent"])) {
                this._Compa = obj["CompactRowIndent"];
            }
            if (!_isUndefined(obj["DisplayContextTooltips"])) {
                this._Di = obj["DisplayContextTooltips"];
            }
            if (!_isUndefined(obj["DisplayEmptyColumn"])) {
                this._Dis = obj["DisplayEmptyColumn"];
            }
            if (!_isUndefined(obj["DisplayEmptyRow"])) {
                this._Disp = obj["DisplayEmptyRow"];
            }
            if (!_isUndefined(obj["DisplayErrorString"])) {
                this._Displ = obj["DisplayErrorString"];
            }
            if (!_isUndefined(obj["DisplayFieldCaptions"])) {
                this._Displa = obj["DisplayFieldCaptions"];
            }
            if (!_isUndefined(obj["DisplayNullString"])) {
                this._Display = obj["DisplayNullString"];
            }
            if (!_isUndefined(obj["EnableDataValueEditing"])) {
                this._E = obj["EnableDataValueEditing"];
            }
            if (!_isUndefined(obj["EnableDrilldown"])) {
                this._En = obj["EnableDrilldown"];
            }
            if (!_isUndefined(obj["EnableFieldDialog"])) {
                this._Ena = obj["EnableFieldDialog"];
            }
            if (!_isUndefined(obj["EnableFieldList"])) {
                this._Enab = obj["EnableFieldList"];
            }
            if (!_isUndefined(obj["EnableWizard"])) {
                this._Enabl = obj["EnableWizard"];
            }
            if (!_isUndefined(obj["ErrorString"])) {
                this._Er = obj["ErrorString"];
            }
            if (!_isUndefined(obj["FieldListSortAscending"])) {
                this._F = obj["FieldListSortAscending"];
            }
            if (!_isUndefined(obj["GrandTotalName"])) {
                this._G = obj["GrandTotalName"];
            }
            if (!_isUndefined(obj["HasAutoFormat"])) {
                this._H = obj["HasAutoFormat"];
            }
            if (!_isUndefined(obj["Hidden"])) {
                this._Hi = obj["Hidden"];
            }
            if (!_isUndefined(obj["InGridDropZones"])) {
                this._In = obj["InGridDropZones"];
            }
            if (!_isUndefined(obj["InnerDetail"])) {
                this._Inn = obj["InnerDetail"];
            }
            if (!_isUndefined(obj["ManualUpdate"])) {
                this._M = obj["ManualUpdate"];
            }
            if (!_isUndefined(obj["NullString"])) {
                this._Nu = obj["NullString"];
            }
            if (!_isUndefined(obj["PreserveFormatting"])) {
                this._Pr = obj["PreserveFormatting"];
            }
            if (!_isUndefined(obj["PrintDrillIndicators"])) {
                this._Pri = obj["PrintDrillIndicators"];
            }
            if (!_isUndefined(obj["PrintTitles"])) {
                this._Prin = obj["PrintTitles"];
            }
            if (!_isUndefined(obj["RefreshDate"])) {
                this._R = _adjustToDateTime(obj["RefreshDate"]);
            }
            if (!_isUndefined(obj["RefreshName"])) {
                this._Re = obj["RefreshName"];
            }
            if (!_isUndefined(obj["RepeatItemsOnEachPrintedPage"])) {
                this._Rep = obj["RepeatItemsOnEachPrintedPage"];
            }
            if (!_isUndefined(obj["SaveData"])) {
                this._S = obj["SaveData"];
            }
            if (!_isUndefined(obj["ShowDrillIndicators"])) {
                this._Sh = obj["ShowDrillIndicators"];
            }
            if (!_isUndefined(obj["ShowPageMultipleItemLabel"])) {
                this._Sho = obj["ShowPageMultipleItemLabel"];
            }
            if (!_isUndefined(obj["ShowTableStyleColumnHeaders"])) {
                this._Show = obj["ShowTableStyleColumnHeaders"];
            }
            if (!_isUndefined(obj["ShowTableStyleColumnStripes"])) {
                this._ShowT = obj["ShowTableStyleColumnStripes"];
            }
            if (!_isUndefined(obj["ShowTableStyleLastColumn"])) {
                this._ShowTa = obj["ShowTableStyleLastColumn"];
            }
            if (!_isUndefined(obj["ShowTableStyleRowHeaders"])) {
                this._ShowTab = obj["ShowTableStyleRowHeaders"];
            }
            if (!_isUndefined(obj["ShowTableStyleRowStripes"])) {
                this._ShowTabl = obj["ShowTableStyleRowStripes"];
            }
            if (!_isUndefined(obj["ShowValuesRow"])) {
                this._ShowV = obj["ShowValuesRow"];
            }
            if (!_isUndefined(obj["SmallGrid"])) {
                this._Sm = obj["SmallGrid"];
            }
            if (!_isUndefined(obj["SortUsingCustomLists"])) {
                this._So = obj["SortUsingCustomLists"];
            }
            if (!_isUndefined(obj["SubtotalHiddenPageItems"])) {
                this._Su = obj["SubtotalHiddenPageItems"];
            }
            if (!_isUndefined(obj["Summary"])) {
                this._Sum = obj["Summary"];
            }
            if (!_isUndefined(obj["Tag"])) {
                this._T = obj["Tag"];
            }
            if (!_isUndefined(obj["TotalsAnnotation"])) {
                this._To = obj["TotalsAnnotation"];
            }
            if (!_isUndefined(obj["VacatedStyle"])) {
                this._V = obj["VacatedStyle"];
            }
            if (!_isUndefined(obj["Value"])) {
                this._Va = obj["Value"];
            }
            if (!_isUndefined(obj["Version"])) {
                this._Ve = obj["Version"];
            }
            _handleNavigationPropertyResults(this, obj, ["worksheet", "Worksheet", "calculatedFields", "CalculatedFields", "dataBodyRange", "DataBodyRange", "dataLabelRange", "DataLabelRange", "pivotFields", "PivotFields"]);
        };
        PivotTable.prototype.load = function (option) {
            return _load(this, option);
        };
        PivotTable.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        PivotTable.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["Id"])) {
                this._I = value["Id"];
            }
        };
        PivotTable.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            if (!_isUndefined(obj["RefreshDate"])) {
                obj["refreshDate"] = _adjustToDateTime(obj["refreshDate"]);
            }
            _processRetrieveResult(this, value, result);
        };
        PivotTable.prototype.toJSON = function () {
            return _toJson(this, {
                "allowMultipleFilters": this._A,
                "alternativeText": this._Al,
                "columnGrandTotals": this._Co,
                "compactLayoutColumnHeader": this._Com,
                "compactLayoutRowHeader": this._Comp,
                "compactRowIndent": this._Compa,
                "displayContextTooltips": this._Di,
                "displayEmptyColumn": this._Dis,
                "displayEmptyRow": this._Disp,
                "displayErrorString": this._Displ,
                "displayFieldCaptions": this._Displa,
                "displayNullString": this._Display,
                "enableDataValueEditing": this._E,
                "enableDrilldown": this._En,
                "enableFieldDialog": this._Ena,
                "enableFieldList": this._Enab,
                "enableWizard": this._Enabl,
                "errorString": this._Er,
                "fieldListSortAscending": this._F,
                "grandTotalName": this._G,
                "hasAutoFormat": this._H,
                "hidden": this._Hi,
                "id": this._I,
                "inGridDropZones": this._In,
                "innerDetail": this._Inn,
                "manualUpdate": this._M,
                "name": this._N,
                "nullString": this._Nu,
                "preserveFormatting": this._Pr,
                "printDrillIndicators": this._Pri,
                "printTitles": this._Prin,
                "refreshDate": this._R,
                "refreshName": this._Re,
                "repeatItemsOnEachPrintedPage": this._Rep,
                "rowGrandTotals": this._Ro,
                "saveData": this._S,
                "showDrillIndicators": this._Sh,
                "showPageMultipleItemLabel": this._Sho,
                "showTableStyleColumnHeaders": this._Show,
                "showTableStyleColumnStripes": this._ShowT,
                "showTableStyleLastColumn": this._ShowTa,
                "showTableStyleRowHeaders": this._ShowTab,
                "showTableStyleRowStripes": this._ShowTabl,
                "showValuesRow": this._ShowV,
                "smallGrid": this._Sm,
                "sortUsingCustomLists": this._So,
                "subtotalHiddenPageItems": this._Su,
                "summary": this._Sum,
                "tag": this._T,
                "totalsAnnotation": this._To,
                "vacatedStyle": this._V,
                "value": this._Va,
                "version": this._Ve,
            }, {
                "calculatedFields": this._C,
                "dataBodyRange": this._D,
                "dataLabelRange": this._Da,
                "pivotFields": this._P,
            });
        };
        PivotTable.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return PivotTable;
    }(OfficeExtension.ClientObject));
    Excel.PivotTable = PivotTable;
    var _typeDocumentProperties = "DocumentProperties";
    var DocumentProperties = (function (_super) {
        __extends(DocumentProperties, _super);
        function DocumentProperties() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DocumentProperties.prototype, "_className", {
            get: function () {
                return "DocumentProperties";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["title", "subject", "author", "keywords", "comments", "lastAuthor", "revisionNumber", "creationDate", "category", "manager", "company"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, false, true, false, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["custom"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "custom", {
            get: function () {
                if (!this._Cu) {
                    this._Cu = new Excel.CustomPropertyCollection(this.context, _createPropertyObjectPath(this.context, this, "Custom", true, false, false));
                }
                return this._Cu;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "author", {
            get: function () {
                _throwIfNotLoaded("author", this._A, _typeDocumentProperties, this._isNull);
                return this._A;
            },
            set: function (value) {
                this._A = value;
                _createSetPropertyAction(this.context, this, "Author", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "category", {
            get: function () {
                _throwIfNotLoaded("category", this._C, _typeDocumentProperties, this._isNull);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Category", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "comments", {
            get: function () {
                _throwIfNotLoaded("comments", this._Co, _typeDocumentProperties, this._isNull);
                return this._Co;
            },
            set: function (value) {
                this._Co = value;
                _createSetPropertyAction(this.context, this, "Comments", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "company", {
            get: function () {
                _throwIfNotLoaded("company", this._Com, _typeDocumentProperties, this._isNull);
                return this._Com;
            },
            set: function (value) {
                this._Com = value;
                _createSetPropertyAction(this.context, this, "Company", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "creationDate", {
            get: function () {
                _throwIfNotLoaded("creationDate", this._Cr, _typeDocumentProperties, this._isNull);
                return this._Cr;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "keywords", {
            get: function () {
                _throwIfNotLoaded("keywords", this._K, _typeDocumentProperties, this._isNull);
                return this._K;
            },
            set: function (value) {
                this._K = value;
                _createSetPropertyAction(this.context, this, "Keywords", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "lastAuthor", {
            get: function () {
                _throwIfNotLoaded("lastAuthor", this._L, _typeDocumentProperties, this._isNull);
                return this._L;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "manager", {
            get: function () {
                _throwIfNotLoaded("manager", this._M, _typeDocumentProperties, this._isNull);
                return this._M;
            },
            set: function (value) {
                this._M = value;
                _createSetPropertyAction(this.context, this, "Manager", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "revisionNumber", {
            get: function () {
                _throwIfNotLoaded("revisionNumber", this._R, _typeDocumentProperties, this._isNull);
                return this._R;
            },
            set: function (value) {
                this._R = value;
                _createSetPropertyAction(this.context, this, "RevisionNumber", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "subject", {
            get: function () {
                _throwIfNotLoaded("subject", this._S, _typeDocumentProperties, this._isNull);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "Subject", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentProperties.prototype, "title", {
            get: function () {
                _throwIfNotLoaded("title", this._T, _typeDocumentProperties, this._isNull);
                return this._T;
            },
            set: function (value) {
                this._T = value;
                _createSetPropertyAction(this.context, this, "Title", value);
            },
            enumerable: true,
            configurable: true
        });
        DocumentProperties.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["title", "subject", "author", "keywords", "comments", "revisionNumber", "category", "manager", "company"], [], [
                "custom"
            ]);
        };
        DocumentProperties.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        DocumentProperties.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Author"])) {
                this._A = obj["Author"];
            }
            if (!_isUndefined(obj["Category"])) {
                this._C = obj["Category"];
            }
            if (!_isUndefined(obj["Comments"])) {
                this._Co = obj["Comments"];
            }
            if (!_isUndefined(obj["Company"])) {
                this._Com = obj["Company"];
            }
            if (!_isUndefined(obj["CreationDate"])) {
                this._Cr = _adjustToDateTime(obj["CreationDate"]);
            }
            if (!_isUndefined(obj["Keywords"])) {
                this._K = obj["Keywords"];
            }
            if (!_isUndefined(obj["LastAuthor"])) {
                this._L = obj["LastAuthor"];
            }
            if (!_isUndefined(obj["Manager"])) {
                this._M = obj["Manager"];
            }
            if (!_isUndefined(obj["RevisionNumber"])) {
                this._R = obj["RevisionNumber"];
            }
            if (!_isUndefined(obj["Subject"])) {
                this._S = obj["Subject"];
            }
            if (!_isUndefined(obj["Title"])) {
                this._T = obj["Title"];
            }
            _handleNavigationPropertyResults(this, obj, ["custom", "Custom"]);
        };
        DocumentProperties.prototype.load = function (option) {
            return _load(this, option);
        };
        DocumentProperties.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        DocumentProperties.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            if (!_isUndefined(obj["CreationDate"])) {
                obj["creationDate"] = _adjustToDateTime(obj["creationDate"]);
            }
            _processRetrieveResult(this, value, result);
        };
        DocumentProperties.prototype.toJSON = function () {
            return _toJson(this, {
                "author": this._A,
                "category": this._C,
                "comments": this._Co,
                "company": this._Com,
                "creationDate": this._Cr,
                "keywords": this._K,
                "lastAuthor": this._L,
                "manager": this._M,
                "revisionNumber": this._R,
                "subject": this._S,
                "title": this._T,
            }, {
                "custom": this._Cu,
            });
        };
        DocumentProperties.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return DocumentProperties;
    }(OfficeExtension.ClientObject));
    Excel.DocumentProperties = DocumentProperties;
    var _typeCustomProperty = "CustomProperty";
    var CustomProperty = (function (_super) {
        __extends(CustomProperty, _super);
        function CustomProperty() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomProperty.prototype, "_className", {
            get: function () {
                return "CustomProperty";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomProperty.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["key", "value", "type"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomProperty.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [false, true, false];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomProperty.prototype, "key", {
            get: function () {
                _throwIfNotLoaded("key", this._K, _typeCustomProperty, this._isNull);
                return this._K;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomProperty.prototype, "type", {
            get: function () {
                _throwIfNotLoaded("type", this._T, _typeCustomProperty, this._isNull);
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomProperty.prototype, "value", {
            get: function () {
                _throwIfNotLoaded("value", this._V, _typeCustomProperty, this._isNull);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "Value", value);
            },
            enumerable: true,
            configurable: true
        });
        CustomProperty.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["value"], [], []);
        };
        CustomProperty.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        CustomProperty.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        CustomProperty.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Key"])) {
                this._K = obj["Key"];
            }
            if (!_isUndefined(obj["Type"])) {
                this._T = obj["Type"];
            }
            if (!_isUndefined(obj["Value"])) {
                this._V = obj["Value"];
            }
        };
        CustomProperty.prototype.load = function (option) {
            return _load(this, option);
        };
        CustomProperty.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        CustomProperty.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        CustomProperty.prototype.toJSON = function () {
            return _toJson(this, {
                "key": this._K,
                "type": this._T,
                "value": this._V,
            }, {});
        };
        CustomProperty.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return CustomProperty;
    }(OfficeExtension.ClientObject));
    Excel.CustomProperty = CustomProperty;
    var _typeCustomPropertyCollection = "CustomPropertyCollection";
    var CustomPropertyCollection = (function (_super) {
        __extends(CustomPropertyCollection, _super);
        function CustomPropertyCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomPropertyCollection.prototype, "_className", {
            get: function () {
                return "CustomPropertyCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomPropertyCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomPropertyCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeCustomPropertyCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        CustomPropertyCollection.prototype.add = function (key, value) {
            return new Excel.CustomProperty(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [key, value], false, true, null, false));
        };
        CustomPropertyCollection.prototype.deleteAll = function () {
            _createMethodAction(this.context, this, "DeleteAll", 0, [], false);
        };
        CustomPropertyCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        CustomPropertyCollection.prototype.getItem = function (key) {
            return new Excel.CustomProperty(this.context, _createIndexerObjectPath(this.context, this, [key]));
        };
        CustomPropertyCollection.prototype.getItemOrNullObject = function (key) {
            return new Excel.CustomProperty(this.context, _createMethodObjectPath(this.context, this, "GetItemOrNullObject", 1, [key], false, false, null, false));
        };
        CustomPropertyCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.CustomProperty(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        CustomPropertyCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        CustomPropertyCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        CustomPropertyCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.CustomProperty(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        CustomPropertyCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return CustomPropertyCollection;
    }(OfficeExtension.ClientObject));
    Excel.CustomPropertyCollection = CustomPropertyCollection;
    var _typeConditionalFormatCollection = "ConditionalFormatCollection";
    var ConditionalFormatCollection = (function (_super) {
        __extends(ConditionalFormatCollection, _super);
        function ConditionalFormatCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ConditionalFormatCollection.prototype, "_className", {
            get: function () {
                return "ConditionalFormatCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormatCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormatCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeConditionalFormatCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        ConditionalFormatCollection.prototype.add = function (type) {
            return new Excel.ConditionalFormat(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [type], false, true, null, false));
        };
        ConditionalFormatCollection.prototype.clearAll = function () {
            _createMethodAction(this.context, this, "ClearAll", 0, [], false);
        };
        ConditionalFormatCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        ConditionalFormatCollection.prototype.getItem = function (id) {
            return new Excel.ConditionalFormat(this.context, _createIndexerObjectPath(this.context, this, [id]));
        };
        ConditionalFormatCollection.prototype.getItemAt = function (index) {
            return new Excel.ConditionalFormat(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        ConditionalFormatCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.ConditionalFormat(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        ConditionalFormatCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        ConditionalFormatCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ConditionalFormatCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.ConditionalFormat(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        ConditionalFormatCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return ConditionalFormatCollection;
    }(OfficeExtension.ClientObject));
    Excel.ConditionalFormatCollection = ConditionalFormatCollection;
    var _typeConditionalFormat = "ConditionalFormat";
    var ConditionalFormat = (function (_super) {
        __extends(ConditionalFormat, _super);
        function ConditionalFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ConditionalFormat.prototype, "_className", {
            get: function () {
                return "ConditionalFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["stopIfTrue", "priority", "type", "id"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, false, false];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["dataBarOrNullObject", "dataBar", "customOrNullObject", "custom", "iconSet", "iconSetOrNullObject", "colorScale", "colorScaleOrNullObject", "topBottom", "topBottomOrNullObject", "preset", "presetOrNullObject", "textComparison", "textComparisonOrNullObject", "cellValue", "cellValueOrNullObject"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "cellValue", {
            get: function () {
                if (!this._C) {
                    this._C = new Excel.CellValueConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "CellValue", false, false, false));
                }
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "cellValueOrNullObject", {
            get: function () {
                if (!this._Ce) {
                    this._Ce = new Excel.CellValueConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "CellValueOrNullObject", false, false, false));
                }
                return this._Ce;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "colorScale", {
            get: function () {
                if (!this._Co) {
                    this._Co = new Excel.ColorScaleConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "ColorScale", false, false, false));
                }
                return this._Co;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "colorScaleOrNullObject", {
            get: function () {
                if (!this._Col) {
                    this._Col = new Excel.ColorScaleConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "ColorScaleOrNullObject", false, false, false));
                }
                return this._Col;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "custom", {
            get: function () {
                if (!this._Cu) {
                    this._Cu = new Excel.CustomConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "Custom", false, false, false));
                }
                return this._Cu;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "customOrNullObject", {
            get: function () {
                if (!this._Cus) {
                    this._Cus = new Excel.CustomConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "CustomOrNullObject", false, false, false));
                }
                return this._Cus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "dataBar", {
            get: function () {
                if (!this._D) {
                    this._D = new Excel.DataBarConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "DataBar", false, false, false));
                }
                return this._D;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "dataBarOrNullObject", {
            get: function () {
                if (!this._Da) {
                    this._Da = new Excel.DataBarConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "DataBarOrNullObject", false, false, false));
                }
                return this._Da;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "iconSet", {
            get: function () {
                if (!this._I) {
                    this._I = new Excel.IconSetConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "IconSet", false, false, false));
                }
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "iconSetOrNullObject", {
            get: function () {
                if (!this._Ic) {
                    this._Ic = new Excel.IconSetConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "IconSetOrNullObject", false, false, false));
                }
                return this._Ic;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "preset", {
            get: function () {
                if (!this._P) {
                    this._P = new Excel.PresetCriteriaConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "Preset", false, false, false));
                }
                return this._P;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "presetOrNullObject", {
            get: function () {
                if (!this._Pr) {
                    this._Pr = new Excel.PresetCriteriaConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "PresetOrNullObject", false, false, false));
                }
                return this._Pr;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "textComparison", {
            get: function () {
                if (!this._T) {
                    this._T = new Excel.TextConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "TextComparison", false, false, false));
                }
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "textComparisonOrNullObject", {
            get: function () {
                if (!this._Te) {
                    this._Te = new Excel.TextConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "TextComparisonOrNullObject", false, false, false));
                }
                return this._Te;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "topBottom", {
            get: function () {
                if (!this._To) {
                    this._To = new Excel.TopBottomConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "TopBottom", false, false, false));
                }
                return this._To;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "topBottomOrNullObject", {
            get: function () {
                if (!this._Top) {
                    this._Top = new Excel.TopBottomConditionalFormat(this.context, _createPropertyObjectPath(this.context, this, "TopBottomOrNullObject", false, false, false));
                }
                return this._Top;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "id", {
            get: function () {
                _throwIfNotLoaded("id", this._Id0, _typeConditionalFormat, this._isNull);
                return this._Id0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "priority", {
            get: function () {
                _throwIfNotLoaded("priority", this._Pri, _typeConditionalFormat, this._isNull);
                return this._Pri;
            },
            set: function (value) {
                this._Pri = value;
                _createSetPropertyAction(this.context, this, "Priority", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "stopIfTrue", {
            get: function () {
                _throwIfNotLoaded("stopIfTrue", this._S, _typeConditionalFormat, this._isNull);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "StopIfTrue", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormat.prototype, "type", {
            get: function () {
                _throwIfNotLoaded("type", this._Ty, _typeConditionalFormat, this._isNull);
                return this._Ty;
            },
            enumerable: true,
            configurable: true
        });
        ConditionalFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["stopIfTrue", "priority"], ["dataBarOrNullObject", "dataBar", "customOrNullObject", "custom", "iconSet", "iconSetOrNullObject", "colorScale", "colorScaleOrNullObject", "topBottom", "topBottomOrNullObject", "preset", "presetOrNullObject", "textComparison", "textComparisonOrNullObject", "cellValue", "cellValueOrNullObject"], []);
        };
        ConditionalFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ConditionalFormat.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        ConditionalFormat.prototype.getRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRange", 1, [], false, true, null, false));
        };
        ConditionalFormat.prototype.getRangeOrNullObject = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetRangeOrNullObject", 1, [], false, true, null, false));
        };
        ConditionalFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Id"])) {
                this._Id0 = obj["Id"];
            }
            if (!_isUndefined(obj["Priority"])) {
                this._Pri = obj["Priority"];
            }
            if (!_isUndefined(obj["StopIfTrue"])) {
                this._S = obj["StopIfTrue"];
            }
            if (!_isUndefined(obj["Type"])) {
                this._Ty = obj["Type"];
            }
            _handleNavigationPropertyResults(this, obj, ["cellValue", "CellValue", "cellValueOrNullObject", "CellValueOrNullObject", "colorScale", "ColorScale", "colorScaleOrNullObject", "ColorScaleOrNullObject", "custom", "Custom", "customOrNullObject", "CustomOrNullObject", "dataBar", "DataBar", "dataBarOrNullObject", "DataBarOrNullObject", "iconSet", "IconSet", "iconSetOrNullObject", "IconSetOrNullObject", "preset", "Preset", "presetOrNullObject", "PresetOrNullObject", "textComparison", "TextComparison", "textComparisonOrNullObject", "TextComparisonOrNullObject", "topBottom", "TopBottom", "topBottomOrNullObject", "TopBottomOrNullObject"]);
        };
        ConditionalFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ConditionalFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ConditionalFormat.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["Id"])) {
                this._Id0 = value["Id"];
            }
        };
        ConditionalFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ConditionalFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "id": this._Id0,
                "priority": this._Pri,
                "stopIfTrue": this._S,
                "type": this._Ty,
            }, {
                "cellValue": this._C,
                "cellValueOrNullObject": this._Ce,
                "colorScale": this._Co,
                "colorScaleOrNullObject": this._Col,
                "custom": this._Cu,
                "customOrNullObject": this._Cus,
                "dataBar": this._D,
                "dataBarOrNullObject": this._Da,
                "iconSet": this._I,
                "iconSetOrNullObject": this._Ic,
                "preset": this._P,
                "presetOrNullObject": this._Pr,
                "textComparison": this._T,
                "textComparisonOrNullObject": this._Te,
                "topBottom": this._To,
                "topBottomOrNullObject": this._Top,
            });
        };
        ConditionalFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ConditionalFormat;
    }(OfficeExtension.ClientObject));
    Excel.ConditionalFormat = ConditionalFormat;
    var _typeDataBarConditionalFormat = "DataBarConditionalFormat";
    var DataBarConditionalFormat = (function (_super) {
        __extends(DataBarConditionalFormat, _super);
        function DataBarConditionalFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DataBarConditionalFormat.prototype, "_className", {
            get: function () {
                return "DataBarConditionalFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataBarConditionalFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["showDataBarOnly", "barDirection", "axisFormat", "axisColor", "lowerBoundRule", "upperBoundRule"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataBarConditionalFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataBarConditionalFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["positiveFormat", "negativeFormat"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataBarConditionalFormat.prototype, "negativeFormat", {
            get: function () {
                if (!this._N) {
                    this._N = new Excel.ConditionalDataBarNegativeFormat(this.context, _createPropertyObjectPath(this.context, this, "NegativeFormat", false, false, false));
                }
                return this._N;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataBarConditionalFormat.prototype, "positiveFormat", {
            get: function () {
                if (!this._P) {
                    this._P = new Excel.ConditionalDataBarPositiveFormat(this.context, _createPropertyObjectPath(this.context, this, "PositiveFormat", false, false, false));
                }
                return this._P;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataBarConditionalFormat.prototype, "axisColor", {
            get: function () {
                _throwIfNotLoaded("axisColor", this._A, _typeDataBarConditionalFormat, this._isNull);
                return this._A;
            },
            set: function (value) {
                this._A = value;
                _createSetPropertyAction(this.context, this, "AxisColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataBarConditionalFormat.prototype, "axisFormat", {
            get: function () {
                _throwIfNotLoaded("axisFormat", this._Ax, _typeDataBarConditionalFormat, this._isNull);
                return this._Ax;
            },
            set: function (value) {
                this._Ax = value;
                _createSetPropertyAction(this.context, this, "AxisFormat", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataBarConditionalFormat.prototype, "barDirection", {
            get: function () {
                _throwIfNotLoaded("barDirection", this._B, _typeDataBarConditionalFormat, this._isNull);
                return this._B;
            },
            set: function (value) {
                this._B = value;
                _createSetPropertyAction(this.context, this, "BarDirection", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataBarConditionalFormat.prototype, "lowerBoundRule", {
            get: function () {
                _throwIfNotLoaded("lowerBoundRule", this._L, _typeDataBarConditionalFormat, this._isNull);
                return this._L;
            },
            set: function (value) {
                this._L = value;
                _createSetPropertyAction(this.context, this, "LowerBoundRule", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataBarConditionalFormat.prototype, "showDataBarOnly", {
            get: function () {
                _throwIfNotLoaded("showDataBarOnly", this._S, _typeDataBarConditionalFormat, this._isNull);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "ShowDataBarOnly", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataBarConditionalFormat.prototype, "upperBoundRule", {
            get: function () {
                _throwIfNotLoaded("upperBoundRule", this._U, _typeDataBarConditionalFormat, this._isNull);
                return this._U;
            },
            set: function (value) {
                this._U = value;
                _createSetPropertyAction(this.context, this, "UpperBoundRule", value);
            },
            enumerable: true,
            configurable: true
        });
        DataBarConditionalFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["showDataBarOnly", "barDirection", "axisFormat", "axisColor", "lowerBoundRule", "upperBoundRule"], ["positiveFormat", "negativeFormat"], []);
        };
        DataBarConditionalFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        DataBarConditionalFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["AxisColor"])) {
                this._A = obj["AxisColor"];
            }
            if (!_isUndefined(obj["AxisFormat"])) {
                this._Ax = obj["AxisFormat"];
            }
            if (!_isUndefined(obj["BarDirection"])) {
                this._B = obj["BarDirection"];
            }
            if (!_isUndefined(obj["LowerBoundRule"])) {
                this._L = obj["LowerBoundRule"];
            }
            if (!_isUndefined(obj["ShowDataBarOnly"])) {
                this._S = obj["ShowDataBarOnly"];
            }
            if (!_isUndefined(obj["UpperBoundRule"])) {
                this._U = obj["UpperBoundRule"];
            }
            _handleNavigationPropertyResults(this, obj, ["negativeFormat", "NegativeFormat", "positiveFormat", "PositiveFormat"]);
        };
        DataBarConditionalFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        DataBarConditionalFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        DataBarConditionalFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        DataBarConditionalFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "axisColor": this._A,
                "axisFormat": this._Ax,
                "barDirection": this._B,
                "lowerBoundRule": this._L,
                "showDataBarOnly": this._S,
                "upperBoundRule": this._U,
            }, {
                "negativeFormat": this._N,
                "positiveFormat": this._P,
            });
        };
        DataBarConditionalFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return DataBarConditionalFormat;
    }(OfficeExtension.ClientObject));
    Excel.DataBarConditionalFormat = DataBarConditionalFormat;
    var _typeConditionalDataBarPositiveFormat = "ConditionalDataBarPositiveFormat";
    var ConditionalDataBarPositiveFormat = (function (_super) {
        __extends(ConditionalDataBarPositiveFormat, _super);
        function ConditionalDataBarPositiveFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ConditionalDataBarPositiveFormat.prototype, "_className", {
            get: function () {
                return "ConditionalDataBarPositiveFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalDataBarPositiveFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["fillColor", "gradientFill", "borderColor"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalDataBarPositiveFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalDataBarPositiveFormat.prototype, "borderColor", {
            get: function () {
                _throwIfNotLoaded("borderColor", this._B, _typeConditionalDataBarPositiveFormat, this._isNull);
                return this._B;
            },
            set: function (value) {
                this._B = value;
                _createSetPropertyAction(this.context, this, "BorderColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalDataBarPositiveFormat.prototype, "fillColor", {
            get: function () {
                _throwIfNotLoaded("fillColor", this._F, _typeConditionalDataBarPositiveFormat, this._isNull);
                return this._F;
            },
            set: function (value) {
                this._F = value;
                _createSetPropertyAction(this.context, this, "FillColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalDataBarPositiveFormat.prototype, "gradientFill", {
            get: function () {
                _throwIfNotLoaded("gradientFill", this._G, _typeConditionalDataBarPositiveFormat, this._isNull);
                return this._G;
            },
            set: function (value) {
                this._G = value;
                _createSetPropertyAction(this.context, this, "GradientFill", value);
            },
            enumerable: true,
            configurable: true
        });
        ConditionalDataBarPositiveFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["fillColor", "gradientFill", "borderColor"], [], []);
        };
        ConditionalDataBarPositiveFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ConditionalDataBarPositiveFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["BorderColor"])) {
                this._B = obj["BorderColor"];
            }
            if (!_isUndefined(obj["FillColor"])) {
                this._F = obj["FillColor"];
            }
            if (!_isUndefined(obj["GradientFill"])) {
                this._G = obj["GradientFill"];
            }
        };
        ConditionalDataBarPositiveFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ConditionalDataBarPositiveFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ConditionalDataBarPositiveFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ConditionalDataBarPositiveFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "borderColor": this._B,
                "fillColor": this._F,
                "gradientFill": this._G,
            }, {});
        };
        ConditionalDataBarPositiveFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ConditionalDataBarPositiveFormat;
    }(OfficeExtension.ClientObject));
    Excel.ConditionalDataBarPositiveFormat = ConditionalDataBarPositiveFormat;
    var _typeConditionalDataBarNegativeFormat = "ConditionalDataBarNegativeFormat";
    var ConditionalDataBarNegativeFormat = (function (_super) {
        __extends(ConditionalDataBarNegativeFormat, _super);
        function ConditionalDataBarNegativeFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ConditionalDataBarNegativeFormat.prototype, "_className", {
            get: function () {
                return "ConditionalDataBarNegativeFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalDataBarNegativeFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["fillColor", "matchPositiveFillColor", "borderColor", "matchPositiveBorderColor"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalDataBarNegativeFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalDataBarNegativeFormat.prototype, "borderColor", {
            get: function () {
                _throwIfNotLoaded("borderColor", this._B, _typeConditionalDataBarNegativeFormat, this._isNull);
                return this._B;
            },
            set: function (value) {
                this._B = value;
                _createSetPropertyAction(this.context, this, "BorderColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalDataBarNegativeFormat.prototype, "fillColor", {
            get: function () {
                _throwIfNotLoaded("fillColor", this._F, _typeConditionalDataBarNegativeFormat, this._isNull);
                return this._F;
            },
            set: function (value) {
                this._F = value;
                _createSetPropertyAction(this.context, this, "FillColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalDataBarNegativeFormat.prototype, "matchPositiveBorderColor", {
            get: function () {
                _throwIfNotLoaded("matchPositiveBorderColor", this._M, _typeConditionalDataBarNegativeFormat, this._isNull);
                return this._M;
            },
            set: function (value) {
                this._M = value;
                _createSetPropertyAction(this.context, this, "MatchPositiveBorderColor", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalDataBarNegativeFormat.prototype, "matchPositiveFillColor", {
            get: function () {
                _throwIfNotLoaded("matchPositiveFillColor", this._Ma, _typeConditionalDataBarNegativeFormat, this._isNull);
                return this._Ma;
            },
            set: function (value) {
                this._Ma = value;
                _createSetPropertyAction(this.context, this, "MatchPositiveFillColor", value);
            },
            enumerable: true,
            configurable: true
        });
        ConditionalDataBarNegativeFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["fillColor", "matchPositiveFillColor", "borderColor", "matchPositiveBorderColor"], [], []);
        };
        ConditionalDataBarNegativeFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ConditionalDataBarNegativeFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["BorderColor"])) {
                this._B = obj["BorderColor"];
            }
            if (!_isUndefined(obj["FillColor"])) {
                this._F = obj["FillColor"];
            }
            if (!_isUndefined(obj["MatchPositiveBorderColor"])) {
                this._M = obj["MatchPositiveBorderColor"];
            }
            if (!_isUndefined(obj["MatchPositiveFillColor"])) {
                this._Ma = obj["MatchPositiveFillColor"];
            }
        };
        ConditionalDataBarNegativeFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ConditionalDataBarNegativeFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ConditionalDataBarNegativeFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ConditionalDataBarNegativeFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "borderColor": this._B,
                "fillColor": this._F,
                "matchPositiveBorderColor": this._M,
                "matchPositiveFillColor": this._Ma,
            }, {});
        };
        ConditionalDataBarNegativeFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ConditionalDataBarNegativeFormat;
    }(OfficeExtension.ClientObject));
    Excel.ConditionalDataBarNegativeFormat = ConditionalDataBarNegativeFormat;
    var _typeCustomConditionalFormat = "CustomConditionalFormat";
    var CustomConditionalFormat = (function (_super) {
        __extends(CustomConditionalFormat, _super);
        function CustomConditionalFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomConditionalFormat.prototype, "_className", {
            get: function () {
                return "CustomConditionalFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomConditionalFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["rule", "format"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomConditionalFormat.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ConditionalRangeFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomConditionalFormat.prototype, "rule", {
            get: function () {
                if (!this._R) {
                    this._R = new Excel.ConditionalFormatRule(this.context, _createPropertyObjectPath(this.context, this, "Rule", false, false, false));
                }
                return this._R;
            },
            enumerable: true,
            configurable: true
        });
        CustomConditionalFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, [], ["rule", "format"], []);
        };
        CustomConditionalFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        CustomConditionalFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            _handleNavigationPropertyResults(this, obj, ["format", "Format", "rule", "Rule"]);
        };
        CustomConditionalFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        CustomConditionalFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        CustomConditionalFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        CustomConditionalFormat.prototype.toJSON = function () {
            return _toJson(this, {}, {
                "format": this._F,
                "rule": this._R,
            });
        };
        CustomConditionalFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return CustomConditionalFormat;
    }(OfficeExtension.ClientObject));
    Excel.CustomConditionalFormat = CustomConditionalFormat;
    var _typeConditionalFormatRule = "ConditionalFormatRule";
    var ConditionalFormatRule = (function (_super) {
        __extends(ConditionalFormatRule, _super);
        function ConditionalFormatRule() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ConditionalFormatRule.prototype, "_className", {
            get: function () {
                return "ConditionalFormatRule";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormatRule.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["formula", "formulaLocal", "formulaR1C1"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormatRule.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormatRule.prototype, "formula", {
            get: function () {
                _throwIfNotLoaded("formula", this._F, _typeConditionalFormatRule, this._isNull);
                return this._F;
            },
            set: function (value) {
                this._F = value;
                _createSetPropertyAction(this.context, this, "Formula", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormatRule.prototype, "formulaLocal", {
            get: function () {
                _throwIfNotLoaded("formulaLocal", this._Fo, _typeConditionalFormatRule, this._isNull);
                return this._Fo;
            },
            set: function (value) {
                this._Fo = value;
                _createSetPropertyAction(this.context, this, "FormulaLocal", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalFormatRule.prototype, "formulaR1C1", {
            get: function () {
                _throwIfNotLoaded("formulaR1C1", this._For, _typeConditionalFormatRule, this._isNull);
                return this._For;
            },
            set: function (value) {
                this._For = value;
                _createSetPropertyAction(this.context, this, "FormulaR1C1", value);
            },
            enumerable: true,
            configurable: true
        });
        ConditionalFormatRule.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["formula", "formulaLocal", "formulaR1C1"], [], []);
        };
        ConditionalFormatRule.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ConditionalFormatRule.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Formula"])) {
                this._F = obj["Formula"];
            }
            if (!_isUndefined(obj["FormulaLocal"])) {
                this._Fo = obj["FormulaLocal"];
            }
            if (!_isUndefined(obj["FormulaR1C1"])) {
                this._For = obj["FormulaR1C1"];
            }
        };
        ConditionalFormatRule.prototype.load = function (option) {
            return _load(this, option);
        };
        ConditionalFormatRule.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ConditionalFormatRule.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ConditionalFormatRule.prototype.toJSON = function () {
            return _toJson(this, {
                "formula": this._F,
                "formulaLocal": this._Fo,
                "formulaR1C1": this._For,
            }, {});
        };
        ConditionalFormatRule.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ConditionalFormatRule;
    }(OfficeExtension.ClientObject));
    Excel.ConditionalFormatRule = ConditionalFormatRule;
    var _typeIconSetConditionalFormat = "IconSetConditionalFormat";
    var IconSetConditionalFormat = (function (_super) {
        __extends(IconSetConditionalFormat, _super);
        function IconSetConditionalFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(IconSetConditionalFormat.prototype, "_className", {
            get: function () {
                return "IconSetConditionalFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IconSetConditionalFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["reverseIconOrder", "showIconOnly", "style", "criteria"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IconSetConditionalFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IconSetConditionalFormat.prototype, "criteria", {
            get: function () {
                _throwIfNotLoaded("criteria", this._C, _typeIconSetConditionalFormat, this._isNull);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Criteria", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IconSetConditionalFormat.prototype, "reverseIconOrder", {
            get: function () {
                _throwIfNotLoaded("reverseIconOrder", this._R, _typeIconSetConditionalFormat, this._isNull);
                return this._R;
            },
            set: function (value) {
                this._R = value;
                _createSetPropertyAction(this.context, this, "ReverseIconOrder", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IconSetConditionalFormat.prototype, "showIconOnly", {
            get: function () {
                _throwIfNotLoaded("showIconOnly", this._S, _typeIconSetConditionalFormat, this._isNull);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "ShowIconOnly", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(IconSetConditionalFormat.prototype, "style", {
            get: function () {
                _throwIfNotLoaded("style", this._St, _typeIconSetConditionalFormat, this._isNull);
                return this._St;
            },
            set: function (value) {
                this._St = value;
                _createSetPropertyAction(this.context, this, "Style", value);
            },
            enumerable: true,
            configurable: true
        });
        IconSetConditionalFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["reverseIconOrder", "showIconOnly", "style", "criteria"], [], []);
        };
        IconSetConditionalFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        IconSetConditionalFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Criteria"])) {
                this._C = obj["Criteria"];
            }
            if (!_isUndefined(obj["ReverseIconOrder"])) {
                this._R = obj["ReverseIconOrder"];
            }
            if (!_isUndefined(obj["ShowIconOnly"])) {
                this._S = obj["ShowIconOnly"];
            }
            if (!_isUndefined(obj["Style"])) {
                this._St = obj["Style"];
            }
        };
        IconSetConditionalFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        IconSetConditionalFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        IconSetConditionalFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        IconSetConditionalFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "criteria": this._C,
                "reverseIconOrder": this._R,
                "showIconOnly": this._S,
                "style": this._St,
            }, {});
        };
        IconSetConditionalFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return IconSetConditionalFormat;
    }(OfficeExtension.ClientObject));
    Excel.IconSetConditionalFormat = IconSetConditionalFormat;
    var _typeColorScaleConditionalFormat = "ColorScaleConditionalFormat";
    var ColorScaleConditionalFormat = (function (_super) {
        __extends(ColorScaleConditionalFormat, _super);
        function ColorScaleConditionalFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ColorScaleConditionalFormat.prototype, "_className", {
            get: function () {
                return "ColorScaleConditionalFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColorScaleConditionalFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["threeColorScale", "criteria"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColorScaleConditionalFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [false, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColorScaleConditionalFormat.prototype, "criteria", {
            get: function () {
                _throwIfNotLoaded("criteria", this._C, _typeColorScaleConditionalFormat, this._isNull);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Criteria", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ColorScaleConditionalFormat.prototype, "threeColorScale", {
            get: function () {
                _throwIfNotLoaded("threeColorScale", this._T, _typeColorScaleConditionalFormat, this._isNull);
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        ColorScaleConditionalFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["criteria"], [], []);
        };
        ColorScaleConditionalFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ColorScaleConditionalFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Criteria"])) {
                this._C = obj["Criteria"];
            }
            if (!_isUndefined(obj["ThreeColorScale"])) {
                this._T = obj["ThreeColorScale"];
            }
        };
        ColorScaleConditionalFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ColorScaleConditionalFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ColorScaleConditionalFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ColorScaleConditionalFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "criteria": this._C,
                "threeColorScale": this._T,
            }, {});
        };
        ColorScaleConditionalFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ColorScaleConditionalFormat;
    }(OfficeExtension.ClientObject));
    Excel.ColorScaleConditionalFormat = ColorScaleConditionalFormat;
    var _typeTopBottomConditionalFormat = "TopBottomConditionalFormat";
    var TopBottomConditionalFormat = (function (_super) {
        __extends(TopBottomConditionalFormat, _super);
        function TopBottomConditionalFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TopBottomConditionalFormat.prototype, "_className", {
            get: function () {
                return "TopBottomConditionalFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TopBottomConditionalFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["rule"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TopBottomConditionalFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TopBottomConditionalFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["format"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TopBottomConditionalFormat.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ConditionalRangeFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TopBottomConditionalFormat.prototype, "rule", {
            get: function () {
                _throwIfNotLoaded("rule", this._R, _typeTopBottomConditionalFormat, this._isNull);
                return this._R;
            },
            set: function (value) {
                this._R = value;
                _createSetPropertyAction(this.context, this, "Rule", value);
            },
            enumerable: true,
            configurable: true
        });
        TopBottomConditionalFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["rule"], ["format"], []);
        };
        TopBottomConditionalFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        TopBottomConditionalFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Rule"])) {
                this._R = obj["Rule"];
            }
            _handleNavigationPropertyResults(this, obj, ["format", "Format"]);
        };
        TopBottomConditionalFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        TopBottomConditionalFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        TopBottomConditionalFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        TopBottomConditionalFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "rule": this._R,
            }, {
                "format": this._F,
            });
        };
        TopBottomConditionalFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return TopBottomConditionalFormat;
    }(OfficeExtension.ClientObject));
    Excel.TopBottomConditionalFormat = TopBottomConditionalFormat;
    var _typePresetCriteriaConditionalFormat = "PresetCriteriaConditionalFormat";
    var PresetCriteriaConditionalFormat = (function (_super) {
        __extends(PresetCriteriaConditionalFormat, _super);
        function PresetCriteriaConditionalFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PresetCriteriaConditionalFormat.prototype, "_className", {
            get: function () {
                return "PresetCriteriaConditionalFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PresetCriteriaConditionalFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["rule"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PresetCriteriaConditionalFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PresetCriteriaConditionalFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["format"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PresetCriteriaConditionalFormat.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ConditionalRangeFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PresetCriteriaConditionalFormat.prototype, "rule", {
            get: function () {
                _throwIfNotLoaded("rule", this._R, _typePresetCriteriaConditionalFormat, this._isNull);
                return this._R;
            },
            set: function (value) {
                this._R = value;
                _createSetPropertyAction(this.context, this, "Rule", value);
            },
            enumerable: true,
            configurable: true
        });
        PresetCriteriaConditionalFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["rule"], ["format"], []);
        };
        PresetCriteriaConditionalFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        PresetCriteriaConditionalFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Rule"])) {
                this._R = obj["Rule"];
            }
            _handleNavigationPropertyResults(this, obj, ["format", "Format"]);
        };
        PresetCriteriaConditionalFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        PresetCriteriaConditionalFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        PresetCriteriaConditionalFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        PresetCriteriaConditionalFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "rule": this._R,
            }, {
                "format": this._F,
            });
        };
        PresetCriteriaConditionalFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return PresetCriteriaConditionalFormat;
    }(OfficeExtension.ClientObject));
    Excel.PresetCriteriaConditionalFormat = PresetCriteriaConditionalFormat;
    var _typeTextConditionalFormat = "TextConditionalFormat";
    var TextConditionalFormat = (function (_super) {
        __extends(TextConditionalFormat, _super);
        function TextConditionalFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TextConditionalFormat.prototype, "_className", {
            get: function () {
                return "TextConditionalFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextConditionalFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["rule"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextConditionalFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextConditionalFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["format"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextConditionalFormat.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ConditionalRangeFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextConditionalFormat.prototype, "rule", {
            get: function () {
                _throwIfNotLoaded("rule", this._R, _typeTextConditionalFormat, this._isNull);
                return this._R;
            },
            set: function (value) {
                this._R = value;
                _createSetPropertyAction(this.context, this, "Rule", value);
            },
            enumerable: true,
            configurable: true
        });
        TextConditionalFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["rule"], ["format"], []);
        };
        TextConditionalFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        TextConditionalFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Rule"])) {
                this._R = obj["Rule"];
            }
            _handleNavigationPropertyResults(this, obj, ["format", "Format"]);
        };
        TextConditionalFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        TextConditionalFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        TextConditionalFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        TextConditionalFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "rule": this._R,
            }, {
                "format": this._F,
            });
        };
        TextConditionalFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return TextConditionalFormat;
    }(OfficeExtension.ClientObject));
    Excel.TextConditionalFormat = TextConditionalFormat;
    var _typeCellValueConditionalFormat = "CellValueConditionalFormat";
    var CellValueConditionalFormat = (function (_super) {
        __extends(CellValueConditionalFormat, _super);
        function CellValueConditionalFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CellValueConditionalFormat.prototype, "_className", {
            get: function () {
                return "CellValueConditionalFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CellValueConditionalFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["rule"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CellValueConditionalFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CellValueConditionalFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["format"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CellValueConditionalFormat.prototype, "format", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ConditionalRangeFormat(this.context, _createPropertyObjectPath(this.context, this, "Format", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CellValueConditionalFormat.prototype, "rule", {
            get: function () {
                _throwIfNotLoaded("rule", this._R, _typeCellValueConditionalFormat, this._isNull);
                return this._R;
            },
            set: function (value) {
                this._R = value;
                _createSetPropertyAction(this.context, this, "Rule", value);
            },
            enumerable: true,
            configurable: true
        });
        CellValueConditionalFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["rule"], ["format"], []);
        };
        CellValueConditionalFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        CellValueConditionalFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Rule"])) {
                this._R = obj["Rule"];
            }
            _handleNavigationPropertyResults(this, obj, ["format", "Format"]);
        };
        CellValueConditionalFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        CellValueConditionalFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        CellValueConditionalFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        CellValueConditionalFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "rule": this._R,
            }, {
                "format": this._F,
            });
        };
        CellValueConditionalFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return CellValueConditionalFormat;
    }(OfficeExtension.ClientObject));
    Excel.CellValueConditionalFormat = CellValueConditionalFormat;
    var _typeConditionalRangeFormat = "ConditionalRangeFormat";
    var ConditionalRangeFormat = (function (_super) {
        __extends(ConditionalRangeFormat, _super);
        function ConditionalRangeFormat() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ConditionalRangeFormat.prototype, "_className", {
            get: function () {
                return "ConditionalRangeFormat";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFormat.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["numberFormat"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFormat.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFormat.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["fill", "font", "borders"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFormat.prototype, "borders", {
            get: function () {
                if (!this._B) {
                    this._B = new Excel.ConditionalRangeBorderCollection(this.context, _createPropertyObjectPath(this.context, this, "Borders", true, false, false));
                }
                return this._B;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFormat.prototype, "fill", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.ConditionalRangeFill(this.context, _createPropertyObjectPath(this.context, this, "Fill", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFormat.prototype, "font", {
            get: function () {
                if (!this._Fo) {
                    this._Fo = new Excel.ConditionalRangeFont(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false, false));
                }
                return this._Fo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFormat.prototype, "numberFormat", {
            get: function () {
                _throwIfNotLoaded("numberFormat", this._N, _typeConditionalRangeFormat, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "NumberFormat", value);
            },
            enumerable: true,
            configurable: true
        });
        ConditionalRangeFormat.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["numberFormat"], ["fill", "font"], [
                "borders"
            ]);
        };
        ConditionalRangeFormat.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ConditionalRangeFormat.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["NumberFormat"])) {
                this._N = obj["NumberFormat"];
            }
            _handleNavigationPropertyResults(this, obj, ["borders", "Borders", "fill", "Fill", "font", "Font"]);
        };
        ConditionalRangeFormat.prototype.load = function (option) {
            return _load(this, option);
        };
        ConditionalRangeFormat.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ConditionalRangeFormat.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ConditionalRangeFormat.prototype.toJSON = function () {
            return _toJson(this, {
                "numberFormat": this._N,
            }, {
                "borders": this._B,
                "fill": this._F,
                "font": this._Fo,
            });
        };
        ConditionalRangeFormat.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ConditionalRangeFormat;
    }(OfficeExtension.ClientObject));
    Excel.ConditionalRangeFormat = ConditionalRangeFormat;
    var _typeConditionalRangeFont = "ConditionalRangeFont";
    var ConditionalRangeFont = (function (_super) {
        __extends(ConditionalRangeFont, _super);
        function ConditionalRangeFont() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ConditionalRangeFont.prototype, "_className", {
            get: function () {
                return "ConditionalRangeFont";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFont.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["color", "italic", "bold", "underline", "strikethrough"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFont.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFont.prototype, "bold", {
            get: function () {
                _throwIfNotLoaded("bold", this._B, _typeConditionalRangeFont, this._isNull);
                return this._B;
            },
            set: function (value) {
                this._B = value;
                _createSetPropertyAction(this.context, this, "Bold", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFont.prototype, "color", {
            get: function () {
                _throwIfNotLoaded("color", this._C, _typeConditionalRangeFont, this._isNull);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Color", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFont.prototype, "italic", {
            get: function () {
                _throwIfNotLoaded("italic", this._I, _typeConditionalRangeFont, this._isNull);
                return this._I;
            },
            set: function (value) {
                this._I = value;
                _createSetPropertyAction(this.context, this, "Italic", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFont.prototype, "strikethrough", {
            get: function () {
                _throwIfNotLoaded("strikethrough", this._S, _typeConditionalRangeFont, this._isNull);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "Strikethrough", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFont.prototype, "underline", {
            get: function () {
                _throwIfNotLoaded("underline", this._U, _typeConditionalRangeFont, this._isNull);
                return this._U;
            },
            set: function (value) {
                this._U = value;
                _createSetPropertyAction(this.context, this, "Underline", value);
            },
            enumerable: true,
            configurable: true
        });
        ConditionalRangeFont.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["color", "italic", "bold", "underline", "strikethrough"], [], []);
        };
        ConditionalRangeFont.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ConditionalRangeFont.prototype.clear = function () {
            _createMethodAction(this.context, this, "Clear", 0, [], false);
        };
        ConditionalRangeFont.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Bold"])) {
                this._B = obj["Bold"];
            }
            if (!_isUndefined(obj["Color"])) {
                this._C = obj["Color"];
            }
            if (!_isUndefined(obj["Italic"])) {
                this._I = obj["Italic"];
            }
            if (!_isUndefined(obj["Strikethrough"])) {
                this._S = obj["Strikethrough"];
            }
            if (!_isUndefined(obj["Underline"])) {
                this._U = obj["Underline"];
            }
        };
        ConditionalRangeFont.prototype.load = function (option) {
            return _load(this, option);
        };
        ConditionalRangeFont.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ConditionalRangeFont.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ConditionalRangeFont.prototype.toJSON = function () {
            return _toJson(this, {
                "bold": this._B,
                "color": this._C,
                "italic": this._I,
                "strikethrough": this._S,
                "underline": this._U,
            }, {});
        };
        ConditionalRangeFont.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ConditionalRangeFont;
    }(OfficeExtension.ClientObject));
    Excel.ConditionalRangeFont = ConditionalRangeFont;
    var _typeConditionalRangeFill = "ConditionalRangeFill";
    var ConditionalRangeFill = (function (_super) {
        __extends(ConditionalRangeFill, _super);
        function ConditionalRangeFill() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ConditionalRangeFill.prototype, "_className", {
            get: function () {
                return "ConditionalRangeFill";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFill.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["color"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFill.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeFill.prototype, "color", {
            get: function () {
                _throwIfNotLoaded("color", this._C, _typeConditionalRangeFill, this._isNull);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Color", value);
            },
            enumerable: true,
            configurable: true
        });
        ConditionalRangeFill.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["color"], [], []);
        };
        ConditionalRangeFill.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ConditionalRangeFill.prototype.clear = function () {
            _createMethodAction(this.context, this, "Clear", 0, [], false);
        };
        ConditionalRangeFill.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Color"])) {
                this._C = obj["Color"];
            }
        };
        ConditionalRangeFill.prototype.load = function (option) {
            return _load(this, option);
        };
        ConditionalRangeFill.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ConditionalRangeFill.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ConditionalRangeFill.prototype.toJSON = function () {
            return _toJson(this, {
                "color": this._C,
            }, {});
        };
        ConditionalRangeFill.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ConditionalRangeFill;
    }(OfficeExtension.ClientObject));
    Excel.ConditionalRangeFill = ConditionalRangeFill;
    var _typeConditionalRangeBorder = "ConditionalRangeBorder";
    var ConditionalRangeBorder = (function (_super) {
        __extends(ConditionalRangeBorder, _super);
        function ConditionalRangeBorder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ConditionalRangeBorder.prototype, "_className", {
            get: function () {
                return "ConditionalRangeBorder";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorder.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["sideIndex", "style", "color"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorder.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [false, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorder.prototype, "color", {
            get: function () {
                _throwIfNotLoaded("color", this._C, _typeConditionalRangeBorder, this._isNull);
                return this._C;
            },
            set: function (value) {
                this._C = value;
                _createSetPropertyAction(this.context, this, "Color", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorder.prototype, "sideIndex", {
            get: function () {
                _throwIfNotLoaded("sideIndex", this._S, _typeConditionalRangeBorder, this._isNull);
                return this._S;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorder.prototype, "style", {
            get: function () {
                _throwIfNotLoaded("style", this._St, _typeConditionalRangeBorder, this._isNull);
                return this._St;
            },
            set: function (value) {
                this._St = value;
                _createSetPropertyAction(this.context, this, "Style", value);
            },
            enumerable: true,
            configurable: true
        });
        ConditionalRangeBorder.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["style", "color"], [], []);
        };
        ConditionalRangeBorder.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        ConditionalRangeBorder.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Color"])) {
                this._C = obj["Color"];
            }
            if (!_isUndefined(obj["SideIndex"])) {
                this._S = obj["SideIndex"];
            }
            if (!_isUndefined(obj["Style"])) {
                this._St = obj["Style"];
            }
        };
        ConditionalRangeBorder.prototype.load = function (option) {
            return _load(this, option);
        };
        ConditionalRangeBorder.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ConditionalRangeBorder.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        ConditionalRangeBorder.prototype.toJSON = function () {
            return _toJson(this, {
                "color": this._C,
                "sideIndex": this._S,
                "style": this._St,
            }, {});
        };
        ConditionalRangeBorder.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return ConditionalRangeBorder;
    }(OfficeExtension.ClientObject));
    Excel.ConditionalRangeBorder = ConditionalRangeBorder;
    var _typeConditionalRangeBorderCollection = "ConditionalRangeBorderCollection";
    var ConditionalRangeBorderCollection = (function (_super) {
        __extends(ConditionalRangeBorderCollection, _super);
        function ConditionalRangeBorderCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ConditionalRangeBorderCollection.prototype, "_className", {
            get: function () {
                return "ConditionalRangeBorderCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorderCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorderCollection.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["count"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorderCollection.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["top", "bottom", "left", "right"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorderCollection.prototype, "bottom", {
            get: function () {
                if (!this._B) {
                    this._B = new Excel.ConditionalRangeBorder(this.context, _createPropertyObjectPath(this.context, this, "Bottom", false, false, false));
                }
                return this._B;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorderCollection.prototype, "left", {
            get: function () {
                if (!this._L) {
                    this._L = new Excel.ConditionalRangeBorder(this.context, _createPropertyObjectPath(this.context, this, "Left", false, false, false));
                }
                return this._L;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorderCollection.prototype, "right", {
            get: function () {
                if (!this._R) {
                    this._R = new Excel.ConditionalRangeBorder(this.context, _createPropertyObjectPath(this.context, this, "Right", false, false, false));
                }
                return this._R;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorderCollection.prototype, "top", {
            get: function () {
                if (!this._T) {
                    this._T = new Excel.ConditionalRangeBorder(this.context, _createPropertyObjectPath(this.context, this, "Top", false, false, false));
                }
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorderCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeConditionalRangeBorderCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ConditionalRangeBorderCollection.prototype, "count", {
            get: function () {
                _throwIfNotLoaded("count", this._C, _typeConditionalRangeBorderCollection, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        ConditionalRangeBorderCollection.prototype.getItem = function (index) {
            return new Excel.ConditionalRangeBorder(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        ConditionalRangeBorderCollection.prototype.getItemAt = function (index) {
            return new Excel.ConditionalRangeBorder(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        ConditionalRangeBorderCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Count"])) {
                this._C = obj["Count"];
            }
            _handleNavigationPropertyResults(this, obj, ["bottom", "Bottom", "left", "Left", "right", "Right", "top", "Top"]);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.ConditionalRangeBorder(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        ConditionalRangeBorderCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        ConditionalRangeBorderCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        ConditionalRangeBorderCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.ConditionalRangeBorder(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        ConditionalRangeBorderCollection.prototype.toJSON = function () {
            return _toJson(this, {
                "count": this._C,
            }, {
                "bottom": this._B,
                "left": this._L,
                "right": this._R,
                "top": this._T,
            }, this.m__items);
        };
        return ConditionalRangeBorderCollection;
    }(OfficeExtension.ClientObject));
    Excel.ConditionalRangeBorderCollection = ConditionalRangeBorderCollection;
    var _typeCustomFunction = "CustomFunction";
    Excel.Script = {
        CustomFunctions: {}
    };
    var CustomFunction = (function (_super) {
        __extends(CustomFunction, _super);
        function CustomFunction() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomFunction.prototype, "_className", {
            get: function () {
                return "CustomFunction";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomFunction.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["id", "type", "name", "description", "resultType", "resultDimensionality", "streaming", "parameters", "batching", "cancelable"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomFunction.prototype, "batching", {
            get: function () {
                _throwIfNotLoaded("batching", this._B, _typeCustomFunction, this._isNull);
                return this._B;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomFunction.prototype, "cancelable", {
            get: function () {
                _throwIfNotLoaded("cancelable", this._C, _typeCustomFunction, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomFunction.prototype, "description", {
            get: function () {
                _throwIfNotLoaded("description", this._D, _typeCustomFunction, this._isNull);
                return this._D;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomFunction.prototype, "id", {
            get: function () {
                _throwIfNotLoaded("id", this._I, _typeCustomFunction, this._isNull);
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomFunction.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typeCustomFunction, this._isNull);
                return this._N;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomFunction.prototype, "parameters", {
            get: function () {
                _throwIfNotLoaded("parameters", this._P, _typeCustomFunction, this._isNull);
                return this._P;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomFunction.prototype, "resultDimensionality", {
            get: function () {
                _throwIfNotLoaded("resultDimensionality", this._R, _typeCustomFunction, this._isNull);
                return this._R;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomFunction.prototype, "resultType", {
            get: function () {
                _throwIfNotLoaded("resultType", this._Re, _typeCustomFunction, this._isNull);
                return this._Re;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomFunction.prototype, "streaming", {
            get: function () {
                _throwIfNotLoaded("streaming", this._S, _typeCustomFunction, this._isNull);
                return this._S;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomFunction.prototype, "type", {
            get: function () {
                _throwIfNotLoaded("type", this._T, _typeCustomFunction, this._isNull);
                return this._T;
            },
            enumerable: true,
            configurable: true
        });
        CustomFunction.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        CustomFunction.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Batching"])) {
                this._B = obj["Batching"];
            }
            if (!_isUndefined(obj["Cancelable"])) {
                this._C = obj["Cancelable"];
            }
            if (!_isUndefined(obj["Description"])) {
                this._D = obj["Description"];
            }
            if (!_isUndefined(obj["Id"])) {
                this._I = obj["Id"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["Parameters"])) {
                this._P = obj["Parameters"];
            }
            if (!_isUndefined(obj["ResultDimensionality"])) {
                this._R = obj["ResultDimensionality"];
            }
            if (!_isUndefined(obj["ResultType"])) {
                this._Re = obj["ResultType"];
            }
            if (!_isUndefined(obj["Streaming"])) {
                this._S = obj["Streaming"];
            }
            if (!_isUndefined(obj["Type"])) {
                this._T = obj["Type"];
            }
        };
        CustomFunction.prototype.load = function (option) {
            return _load(this, option);
        };
        CustomFunction.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        CustomFunction.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["Id"])) {
                this._I = value["Id"];
            }
        };
        CustomFunction.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        CustomFunction.prototype.toJSON = function () {
            return _toJson(this, {
                "batching": this._B,
                "cancelable": this._C,
                "description": this._D,
                "id": this._I,
                "name": this._N,
                "parameters": this._P,
                "resultDimensionality": this._R,
                "resultType": this._Re,
                "streaming": this._S,
                "type": this._T,
            }, {});
        };
        CustomFunction.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return CustomFunction;
    }(OfficeExtension.ClientObject));
    Excel.CustomFunction = CustomFunction;
    var _typeCustomFunctionCollection = "CustomFunctionCollection";
    var InvocationContext = (function () {
        function InvocationContext(setResultHandler) {
            this.setResult = setResultHandler;
        }
        Object.defineProperty(InvocationContext.prototype, "onCanceled", {
            get: function () {
                if (!_isNullOrUndefined(this._onCanceled) && typeof (this._onCanceled) === "function") {
                    return this._onCanceled;
                }
                return null;
            },
            set: function (handler) {
                this._onCanceled = handler;
            },
            enumerable: true,
            configurable: true
        });
        return InvocationContext;
    }());
    Excel.InvocationContext = InvocationContext;
    var CustomFunctionProxy = (function () {
        function CustomFunctionProxy() {
            this._whenInit = undefined;
            this._isInit = false;
            this._resultSetterDelayMillis = 50;
            this._resultSetterLifeMillis = 60 * 1000;
            this._resultSetterBuffer = [];
            this._isResultSetterScheduled = false;
            this._batchQuotaMillis = 1000;
            this._invocationContextMap = {};
        }
        CustomFunctionProxy.prototype.addAll = function (context) {
            if (!Excel.Script || !Excel.Script.CustomFunctions) {
                return;
            }
            for (var namespace in Excel.Script.CustomFunctions) {
                for (var name_1 in Excel.Script.CustomFunctions[namespace]) {
                    this.add(context, namespace + "." + name_1);
                }
            }
        };
        CustomFunctionProxy.prototype.add = function (context, name) {
            if (OfficeExtension.Utility.isNullOrEmptyString(name)) {
                throw OfficeExtension._Internal.RuntimeError._createInvalidArgError({ argumentName: "name" });
            }
            if (_isNullOrUndefined(Excel.Script) || _isNullOrUndefined(Excel.Script.CustomFunctions)) {
                throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.invalidOperation, OfficeExtension.Utility._getResourceString(OfficeExtension.ResourceStrings.customFunctionDefintionMissing), "CustomFunctionProxy.add");
            }
            var nameSplit = CustomFunctionProxy.splitName(name);
            var definitionCollection = Excel.Script.CustomFunctions[nameSplit.namespace];
            if (_isNullOrUndefined(definitionCollection)) {
                throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.invalidOperation, OfficeExtension.Utility._getResourceString(OfficeExtension.ResourceStrings.customFunctionDefintionMissing), "CustomFunctionProxy.add");
            }
            var definition = definitionCollection[nameSplit.name];
            if (_isNullOrUndefined(definition)) {
                throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.invalidOperation, OfficeExtension.Utility._getResourceString(OfficeExtension.ResourceStrings.customFunctionDefintionMissing), "CustomFunctionProxy.add");
            }
            this._ensureInit(context);
            var apiCustomFunction = context.workbook.customFunctions._Add(Excel.CustomFunctionType.script, name, definition.description, definition.result.resultType, definition.result.resultDimensionality ? definition.result.resultDimensionality : Excel.CustomFunctionDimensionality.scalar, definition.options && definition.options.stream ? definition.options.stream : false, definition.options && definition.options.batch ? definition.options.batch : false, definition.options && definition.options.cancelable ? definition.options.cancelable : false, definition.parameters);
            return apiCustomFunction;
        };
        CustomFunctionProxy.splitName = function (name) {
            var matches = name.match(/[a-z_][a-z_0-9\.]+/gi);
            if (matches === null || matches.length !== 1 || matches[0] !== name) {
                throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.invalidOperation, OfficeExtension.Utility._getResourceString(OfficeExtension.ResourceStrings.customFunctionNameContainsBadChars), "CustomFunctionProxy.splitName");
            }
            var splitIndex = name.lastIndexOf(".");
            if (splitIndex < 1 || splitIndex === name.length - 1) {
                throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.invalidOperation, OfficeExtension.Utility._getResourceString(OfficeExtension.ResourceStrings.customFunctionNameCannotSplit), "CustomFunctionProxy.splitName");
            }
            var nameSplit = {
                namespace: name.substring(0, splitIndex),
                name: name.substr(splitIndex + 1)
            };
            return nameSplit;
        };
        CustomFunctionProxy.prototype._ensureInit = function (context) {
            var _this = this;
            if (typeof (Excel.Script) === "object" && typeof (Excel.Script._CustomFunctionSettings) === "object") {
                if (typeof (Excel.Script._CustomFunctionSettings.resultSetterDelayMillis) === "number") {
                    var resultSetterDelayMillis = Excel.Script._CustomFunctionSettings.resultSetterDelayMillis;
                    resultSetterDelayMillis = Math.max(0, resultSetterDelayMillis);
                    resultSetterDelayMillis = Math.min(1000, resultSetterDelayMillis);
                    this._resultSetterDelayMillis = resultSetterDelayMillis;
                }
                if (typeof (Excel.Script._CustomFunctionSettings.resultSetterLifeMillis) === "number") {
                    var resultSetterLifeMillis = Excel.Script._CustomFunctionSettings.resultSetterLifeMillis;
                    resultSetterLifeMillis = Math.max(0, resultSetterLifeMillis);
                    resultSetterLifeMillis = Math.min(10 * 60 * 1000, resultSetterLifeMillis);
                    this._resultSetterLifeMillis = resultSetterLifeMillis;
                }
                if (typeof (Excel.Script._CustomFunctionSettings.batchQuotaMillis) === "number") {
                    var batchQuotaMillis = Excel.Script._CustomFunctionSettings.batchQuotaMillis;
                    batchQuotaMillis = Math.max(0, batchQuotaMillis);
                    batchQuotaMillis = Math.min(1000, batchQuotaMillis);
                    this._batchQuotaMillis = batchQuotaMillis;
                }
            }
            if (this._whenInit === undefined) {
                this._whenInit = OfficeExtension.Utility._createPromiseFromResult(null)
                    .then(function () {
                    if (!_this._isInit) {
                        return context.eventRegistration.register(5, "", _this._handleMessage.bind(_this));
                    }
                })
                    .then(function () {
                    _this._isInit = true;
                });
            }
            if (!this._isInit) {
                context._pendingRequest._addPreSyncPromise(this._whenInit);
            }
        };
        CustomFunctionProxy.prototype._handleMessage = function (args) {
            OfficeExtension.Utility.checkArgumentNull(args, "args");
            var entryArray = args.entries;
            var invocationArray = [];
            var cancellationArray = [];
            for (var i = 0; i < entryArray.length; i++) {
                if (entryArray[i].messageCategory !== 1) {
                    continue;
                }
                var majorVersionNumber = 16;
                var minorVersionNumber = 0;
                var buildNumberWithCancellationSupport = 8816;
                var processAsInvocationMessage = versionNumberIsEarlierThan(majorVersionNumber, minorVersionNumber, buildNumberWithCancellationSupport) ||
                    entryArray[i].messageType === 1000;
                if (processAsInvocationMessage) {
                    invocationArray.push(entryArray[i]);
                }
                else if (entryArray[i].messageType === 1001) {
                    cancellationArray.push(entryArray[i]);
                }
                else {
                    throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.generalException, "unexpected message type", "CustomFunctionProxy._handleMessage");
                }
            }
            if (invocationArray.length > 0) {
                var batchArray = this._batchInvocationEntries(invocationArray);
                this._invokeRemainingBatchEntries(batchArray, 0);
            }
            if (cancellationArray.length > 0) {
                this._handleCancellationEntries(cancellationArray);
            }
            return OfficeExtension.Utility._createPromiseFromResult(null);
        };
        CustomFunctionProxy.prototype._handleCancellationEntries = function (entryArray) {
            for (var i = 0; i < entryArray.length; i++) {
                var messageJson = entryArray[i].message;
                if (OfficeExtension.Utility.isNullOrEmptyString(messageJson)) {
                    throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.generalException, "messageJson", "CustomFunctionProxy._handleMessage");
                }
                var message = JSON.parse(messageJson);
                if (_isNullOrUndefined(message)) {
                    throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.generalException, "message", "CustomFunctionProxy._handleMessage");
                }
                var invocationId = message.invocationId;
                var invocationContext = this._invocationContextMap[invocationId];
                if (!_isNullOrUndefined(invocationContext)) {
                    if (_isNullOrUndefined(invocationContext.onCanceled)) {
                        throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.invalidOperation, OfficeExtension.Utility._getResourceString(OfficeExtension.ResourceStrings.customFunctionCancellationHandlerMissing), "CustomFunctionProxy._handleCancellationEntries");
                    }
                    invocationContext.onCanceled();
                }
            }
        };
        CustomFunctionProxy.prototype._batchInvocationEntries = function (entryArray) {
            var _this = this;
            var batchArray = [];
            var _loop_1 = function (i) {
                var messageJson = entryArray[i].message;
                if (OfficeExtension.Utility.isNullOrEmptyString(messageJson)) {
                    throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.generalException, "messageJson", "CustomFunctionProxy._batchInvocationEntries");
                }
                var message = JSON.parse(messageJson);
                if (_isNullOrUndefined(message)) {
                    throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.generalException, "message", "CustomFunctionProxy._batchInvocationEntries");
                }
                if (_isNullOrUndefined(message.invocationId) || message.invocationId < 0) {
                    throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.generalException, "invocationId", "CustomFunctionProxy._batchInvocationEntries");
                }
                if (_isNullOrUndefined(message.functionName)) {
                    throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.generalException, "functionName", "CustomFunctionProxy._batchInvocationEntries");
                }
                var nameSplit = CustomFunctionProxy.splitName(message.functionName);
                var definitionCollection = Excel.Script.CustomFunctions[nameSplit.namespace];
                if (_isNullOrUndefined(definitionCollection)) {
                    throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.invalidOperation, OfficeExtension.Utility._getResourceString(OfficeExtension.ResourceStrings.customFunctionDefintionMissing), "CustomFunctionProxy._batchInvocationEntries");
                }
                var definition = definitionCollection[nameSplit.name];
                if (_isNullOrUndefined(definition)) {
                    throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.invalidOperation, OfficeExtension.Utility._getResourceString(OfficeExtension.ResourceStrings.customFunctionDefintionMissing), "CustomFunctionProxy._batchInvocationEntries");
                }
                if (_isNullOrUndefined(definition.call)) {
                    throw OfficeExtension.Utility.createRuntimeError(ErrorCodes.invalidOperation, OfficeExtension.Utility._getResourceString(OfficeExtension.ResourceStrings.customFunctionImplementationMissing), "CustomFunctionProxy._batchInvocationEntries");
                }
                var isStreaming = false;
                if (!_isNullOrUndefined(definition.options) && (definition.options.stream || definition.options.cancelable)) {
                    var setResult = null;
                    if (definition.options.stream) {
                        isStreaming = true;
                        setResult = (function (result) {
                            _this._setResult(message.invocationId, result);
                        });
                    }
                    var invocationContext = void 0;
                    invocationContext = new InvocationContext(setResult);
                    this_1._invocationContextMap[message.invocationId] = invocationContext;
                    message.parameterValues.push(invocationContext);
                }
                var batchIndex = -1;
                var isBatching = false;
                if (!_isNullOrUndefined(definition.options) && definition.options.batch) {
                    isBatching = true;
                    for (var i_1 = 0; i_1 < batchArray.length; i_1++) {
                        if (batchArray[i_1].call === definition.call) {
                            batchIndex = i_1;
                            break;
                        }
                    }
                }
                if (batchIndex >= 0) {
                    batchArray[batchIndex].invocationIds.push(message.invocationId);
                    batchArray[batchIndex].parameterValueSets.push(message.parameterValues);
                }
                else {
                    batchArray.push({
                        call: definition.call,
                        isBatching: isBatching,
                        isStreaming: isStreaming,
                        invocationIds: [message.invocationId],
                        parameterValueSets: [message.parameterValues]
                    });
                }
            };
            var this_1 = this;
            for (var i = 0; i < entryArray.length; i++) {
                _loop_1(i);
            }
            return batchArray;
        };
        CustomFunctionProxy.prototype._invokeRemainingBatchEntries = function (batchArray, startIndex) {
            var startTimeMillis = Date.now();
            for (var i = startIndex; i < batchArray.length; i++) {
                var currentTimeMillis = Date.now();
                var batchDurationMillis = currentTimeMillis - startTimeMillis;
                if (batchDurationMillis < this._batchQuotaMillis) {
                    this._invokeFunctionAndSetResult(batchArray[i]);
                }
                else {
                    setTimeout(this._invokeRemainingBatchEntries.bind(this), 0, batchArray, i);
                    break;
                }
            }
        };
        CustomFunctionProxy.prototype._invokeFunctionAndSetResult = function (batch) {
            var _this = this;
            var results;
            try {
                if (batch.isBatching) {
                    results = batch.call.call(null, batch.parameterValueSets);
                }
                else {
                    results = [batch.call.apply(null, batch.parameterValueSets[0])];
                }
            }
            catch (ex) {
                for (var i = 0; i < batch.invocationIds.length; i++) {
                    this._setError(batch.invocationIds[i], ex);
                }
                return;
            }
            if (batch.isStreaming) {
            }
            else {
                if (results.length === batch.parameterValueSets.length) {
                    var _loop_2 = function (i) {
                        if (typeof (results[0]) === "object" && typeof (results[i].then) === "function") {
                            results[i].then(function (value) {
                                _this._setResult(batch.invocationIds[i], value);
                            }, function (reason) {
                                _this._setError(batch.invocationIds[i], reason);
                            });
                        }
                        else {
                            this_2._setResult(batch.invocationIds[i], results[i]);
                        }
                    };
                    var this_2 = this;
                    for (var i = 0; i < results.length; i++) {
                        _loop_2(i);
                    }
                }
                else {
                    for (var i = 0; i < batch.invocationIds.length; i++) {
                        this._setError(batch.invocationIds[i], OfficeExtension.Utility._getResourceString(OfficeExtension.ResourceStrings.customFunctionUnexpectedNumberOfEntriesInResultBatch));
                    }
                }
            }
        };
        CustomFunctionProxy.prototype._setResult = function (invocationId, result) {
            this._resultSetterBuffer.push({
                timeCreated: Date.now(),
                call: function (context) { context.workbook.customFunctions._SetInvocationResult(invocationId, result); }
            });
            this._ensureResultSetterIsScheduled();
        };
        CustomFunctionProxy.prototype._setError = function (invocationId, error) {
            var message;
            if (typeof (error) === "object") {
                message = JSON.stringify(error);
            }
            else {
                message = error.toString();
            }
            this._resultSetterBuffer.push({
                timeCreated: Date.now(),
                call: function (context) { context.workbook.customFunctions._SetInvocationError(invocationId, message); }
            });
            this._ensureResultSetterIsScheduled();
        };
        CustomFunctionProxy.prototype._ensureResultSetterIsScheduled = function () {
            if (!this._isResultSetterScheduled && this._resultSetterBuffer.length > 0) {
                setTimeout(this._executeResultSetters.bind(this), this._resultSetterDelayMillis);
                this._isResultSetterScheduled = true;
            }
        };
        CustomFunctionProxy.prototype._executeResultSetters = function () {
            var _this = this;
            this._isResultSetterScheduled = false;
            var resultSetterBufferCopy = [];
            Excel.run(function (context) {
                while (_this._resultSetterBuffer.length > 0) {
                    var resultSetter = _this._resultSetterBuffer.pop();
                    resultSetterBufferCopy.push(resultSetter);
                    resultSetter.call(context);
                }
                return context.sync()
                    .then(function (value) {
                }, function (reason) {
                    _this._restoreResultSetters(resultSetterBufferCopy);
                    _this._ensureResultSetterIsScheduled();
                });
            });
        };
        CustomFunctionProxy.prototype._restoreResultSetters = function (resultSetterBufferCopy) {
            var timeNow = Date.now();
            while (resultSetterBufferCopy.length > 0) {
                var resultSetter = resultSetterBufferCopy.pop();
                if (timeNow - resultSetter.timeCreated <= this._resultSetterLifeMillis) {
                    this._resultSetterBuffer.push(resultSetter);
                }
            }
        };
        return CustomFunctionProxy;
    }());
    Excel.CustomFunctionProxy = CustomFunctionProxy;
    Excel.customFunctionProxy = new CustomFunctionProxy();
    var CustomFunctionCollection = (function (_super) {
        __extends(CustomFunctionCollection, _super);
        function CustomFunctionCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CustomFunctionCollection.prototype, "_className", {
            get: function () {
                return "CustomFunctionCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CustomFunctionCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        CustomFunctionCollection.prototype.addAll = function () {
            this.deleteAll();
            Excel.customFunctionProxy.addAll(this.context);
            this._UpdateAutoCompleteList(false);
        };
        CustomFunctionCollection.prototype.add = function (name) {
            var apiCustomFunction = Excel.customFunctionProxy.add(this.context, name);
            this._UpdateAutoCompleteList(true);
            return apiCustomFunction;
        };
        Object.defineProperty(CustomFunctionCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeCustomFunctionCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        CustomFunctionCollection.prototype.deleteAll = function () {
            _createMethodAction(this.context, this, "DeleteAll", 0, [], false);
        };
        CustomFunctionCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        CustomFunctionCollection.prototype.getItem = function (name) {
            return new Excel.CustomFunction(this.context, _createIndexerObjectPath(this.context, this, [name]));
        };
        CustomFunctionCollection.prototype.getItemOrNullObject = function (name) {
            return new Excel.CustomFunction(this.context, _createMethodObjectPath(this.context, this, "GetItemOrNullObject", 1, [name], false, false, null, false));
        };
        CustomFunctionCollection.prototype.importFromWeb = function (metadataFormat, metadataUrl, name) {
            return new Excel.CustomFunction(this.context, _createMethodObjectPath(this.context, this, "ImportFromWeb", 0, [metadataFormat, metadataUrl, name], false, false, null, false));
        };
        CustomFunctionCollection.prototype._Add = function (type, name, description, resultType, resultDimensionality, streaming, batching, cancelable, parameters) {
            var majorVersionNumber = 16;
            var minorVersionNumber = 0;
            var buildNumberWithBatchingSupport = 8809;
            var buildNumberWithCancellationSupport = 8816;
            if (versionNumberIsEarlierThan(majorVersionNumber, minorVersionNumber, buildNumberWithBatchingSupport)) {
                return new Excel.CustomFunction(this.context, _createMethodObjectPath(this.context, this, "_Add", 0, [type, name, description, resultType, resultDimensionality, streaming, parameters], false, false, null, false));
            }
            else if (versionNumberIsEarlierThan(majorVersionNumber, minorVersionNumber, buildNumberWithCancellationSupport)) {
                return new Excel.CustomFunction(this.context, _createMethodObjectPath(this.context, this, "_Add", 0, [type, name, description, resultType, resultDimensionality, streaming, batching, parameters], false, false, null, false));
            }
            return new Excel.CustomFunction(this.context, _createMethodObjectPath(this.context, this, "_Add", 0, [type, name, description, resultType, resultDimensionality, streaming, batching, cancelable, parameters], false, false, null, false));
        };
        CustomFunctionCollection.prototype._SetInvocationError = function (invocationId, message) {
            _createMethodAction(this.context, this, "_SetInvocationError", 0, [invocationId, message], false);
        };
        CustomFunctionCollection.prototype._SetInvocationResult = function (invocationId, result) {
            _createMethodAction(this.context, this, "_SetInvocationResult", 0, [invocationId, result], false);
        };
        CustomFunctionCollection.prototype._UpdateAutoCompleteList = function (filtered) {
            _createMethodAction(this.context, this, "_UpdateAutoCompleteList", 0, [filtered], false);
        };
        CustomFunctionCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.CustomFunction(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        CustomFunctionCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        CustomFunctionCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        CustomFunctionCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.CustomFunction(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        CustomFunctionCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return CustomFunctionCollection;
    }(OfficeExtension.ClientObject));
    Excel.CustomFunctionCollection = CustomFunctionCollection;
    var _typeStyle = "Style";
    var Style = (function (_super) {
        __extends(Style, _super);
        function Style() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Style.prototype, "_className", {
            get: function () {
                return "Style";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["addIndent", "builtIn", "formulaHidden", "horizontalAlignment", "includeAlignment", "includeBorder", "includeFont", "includeNumber", "includePatterns", "includeProtection", "indentLevel", "locked", "name", "numberFormat", "numberFormatLocal", "orientation", "readingOrder", "shrinkToFit", "verticalAlignment", "wrapText"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, false, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["borders", "font", "fill"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "borders", {
            get: function () {
                if (!this._B) {
                    this._B = new Excel.RangeBorderCollection(this.context, _createPropertyObjectPath(this.context, this, "Borders", true, false, false));
                }
                return this._B;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "fill", {
            get: function () {
                if (!this._F) {
                    this._F = new Excel.RangeFill(this.context, _createPropertyObjectPath(this.context, this, "Fill", false, false, false));
                }
                return this._F;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "font", {
            get: function () {
                if (!this._Fo) {
                    this._Fo = new Excel.RangeFont(this.context, _createPropertyObjectPath(this.context, this, "Font", false, false, false));
                }
                return this._Fo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "addIndent", {
            get: function () {
                _throwIfNotLoaded("addIndent", this._A, _typeStyle, this._isNull);
                return this._A;
            },
            set: function (value) {
                this._A = value;
                _createSetPropertyAction(this.context, this, "AddIndent", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "builtIn", {
            get: function () {
                _throwIfNotLoaded("builtIn", this._Bu, _typeStyle, this._isNull);
                return this._Bu;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "formulaHidden", {
            get: function () {
                _throwIfNotLoaded("formulaHidden", this._For, _typeStyle, this._isNull);
                return this._For;
            },
            set: function (value) {
                this._For = value;
                _createSetPropertyAction(this.context, this, "FormulaHidden", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "horizontalAlignment", {
            get: function () {
                _throwIfNotLoaded("horizontalAlignment", this._H, _typeStyle, this._isNull);
                return this._H;
            },
            set: function (value) {
                this._H = value;
                _createSetPropertyAction(this.context, this, "HorizontalAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "includeAlignment", {
            get: function () {
                _throwIfNotLoaded("includeAlignment", this._I, _typeStyle, this._isNull);
                return this._I;
            },
            set: function (value) {
                this._I = value;
                _createSetPropertyAction(this.context, this, "IncludeAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "includeBorder", {
            get: function () {
                _throwIfNotLoaded("includeBorder", this._In, _typeStyle, this._isNull);
                return this._In;
            },
            set: function (value) {
                this._In = value;
                _createSetPropertyAction(this.context, this, "IncludeBorder", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "includeFont", {
            get: function () {
                _throwIfNotLoaded("includeFont", this._Inc, _typeStyle, this._isNull);
                return this._Inc;
            },
            set: function (value) {
                this._Inc = value;
                _createSetPropertyAction(this.context, this, "IncludeFont", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "includeNumber", {
            get: function () {
                _throwIfNotLoaded("includeNumber", this._Incl, _typeStyle, this._isNull);
                return this._Incl;
            },
            set: function (value) {
                this._Incl = value;
                _createSetPropertyAction(this.context, this, "IncludeNumber", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "includePatterns", {
            get: function () {
                _throwIfNotLoaded("includePatterns", this._Inclu, _typeStyle, this._isNull);
                return this._Inclu;
            },
            set: function (value) {
                this._Inclu = value;
                _createSetPropertyAction(this.context, this, "IncludePatterns", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "includeProtection", {
            get: function () {
                _throwIfNotLoaded("includeProtection", this._Includ, _typeStyle, this._isNull);
                return this._Includ;
            },
            set: function (value) {
                this._Includ = value;
                _createSetPropertyAction(this.context, this, "IncludeProtection", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "indentLevel", {
            get: function () {
                _throwIfNotLoaded("indentLevel", this._Ind, _typeStyle, this._isNull);
                return this._Ind;
            },
            set: function (value) {
                this._Ind = value;
                _createSetPropertyAction(this.context, this, "IndentLevel", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "locked", {
            get: function () {
                _throwIfNotLoaded("locked", this._L, _typeStyle, this._isNull);
                return this._L;
            },
            set: function (value) {
                this._L = value;
                _createSetPropertyAction(this.context, this, "Locked", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typeStyle, this._isNull);
                return this._N;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "numberFormat", {
            get: function () {
                _throwIfNotLoaded("numberFormat", this._Nu, _typeStyle, this._isNull);
                return this._Nu;
            },
            set: function (value) {
                this._Nu = value;
                _createSetPropertyAction(this.context, this, "NumberFormat", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "numberFormatLocal", {
            get: function () {
                _throwIfNotLoaded("numberFormatLocal", this._Num, _typeStyle, this._isNull);
                return this._Num;
            },
            set: function (value) {
                this._Num = value;
                _createSetPropertyAction(this.context, this, "NumberFormatLocal", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "orientation", {
            get: function () {
                _throwIfNotLoaded("orientation", this._O, _typeStyle, this._isNull);
                return this._O;
            },
            set: function (value) {
                this._O = value;
                _createSetPropertyAction(this.context, this, "Orientation", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "readingOrder", {
            get: function () {
                _throwIfNotLoaded("readingOrder", this._R, _typeStyle, this._isNull);
                return this._R;
            },
            set: function (value) {
                this._R = value;
                _createSetPropertyAction(this.context, this, "ReadingOrder", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "shrinkToFit", {
            get: function () {
                _throwIfNotLoaded("shrinkToFit", this._S, _typeStyle, this._isNull);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "ShrinkToFit", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "verticalAlignment", {
            get: function () {
                _throwIfNotLoaded("verticalAlignment", this._V, _typeStyle, this._isNull);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "VerticalAlignment", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Style.prototype, "wrapText", {
            get: function () {
                _throwIfNotLoaded("wrapText", this._W, _typeStyle, this._isNull);
                return this._W;
            },
            set: function (value) {
                this._W = value;
                _createSetPropertyAction(this.context, this, "WrapText", value);
            },
            enumerable: true,
            configurable: true
        });
        Style.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["addIndent", "formulaHidden", "horizontalAlignment", "includeAlignment", "includeBorder", "includeFont", "includeNumber", "includePatterns", "includeProtection", "indentLevel", "locked", "numberFormat", "numberFormatLocal", "orientation", "readingOrder", "shrinkToFit", "verticalAlignment", "wrapText"], ["font", "fill"], [
                "borders"
            ]);
        };
        Style.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        Style.prototype.delete = function () {
            _createMethodAction(this.context, this, "Delete", 0, [], false);
        };
        Style.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["AddIndent"])) {
                this._A = obj["AddIndent"];
            }
            if (!_isUndefined(obj["BuiltIn"])) {
                this._Bu = obj["BuiltIn"];
            }
            if (!_isUndefined(obj["FormulaHidden"])) {
                this._For = obj["FormulaHidden"];
            }
            if (!_isUndefined(obj["HorizontalAlignment"])) {
                this._H = obj["HorizontalAlignment"];
            }
            if (!_isUndefined(obj["IncludeAlignment"])) {
                this._I = obj["IncludeAlignment"];
            }
            if (!_isUndefined(obj["IncludeBorder"])) {
                this._In = obj["IncludeBorder"];
            }
            if (!_isUndefined(obj["IncludeFont"])) {
                this._Inc = obj["IncludeFont"];
            }
            if (!_isUndefined(obj["IncludeNumber"])) {
                this._Incl = obj["IncludeNumber"];
            }
            if (!_isUndefined(obj["IncludePatterns"])) {
                this._Inclu = obj["IncludePatterns"];
            }
            if (!_isUndefined(obj["IncludeProtection"])) {
                this._Includ = obj["IncludeProtection"];
            }
            if (!_isUndefined(obj["IndentLevel"])) {
                this._Ind = obj["IndentLevel"];
            }
            if (!_isUndefined(obj["Locked"])) {
                this._L = obj["Locked"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["NumberFormat"])) {
                this._Nu = obj["NumberFormat"];
            }
            if (!_isUndefined(obj["NumberFormatLocal"])) {
                this._Num = obj["NumberFormatLocal"];
            }
            if (!_isUndefined(obj["Orientation"])) {
                this._O = obj["Orientation"];
            }
            if (!_isUndefined(obj["ReadingOrder"])) {
                this._R = obj["ReadingOrder"];
            }
            if (!_isUndefined(obj["ShrinkToFit"])) {
                this._S = obj["ShrinkToFit"];
            }
            if (!_isUndefined(obj["VerticalAlignment"])) {
                this._V = obj["VerticalAlignment"];
            }
            if (!_isUndefined(obj["WrapText"])) {
                this._W = obj["WrapText"];
            }
            _handleNavigationPropertyResults(this, obj, ["borders", "Borders", "fill", "Fill", "font", "Font"]);
        };
        Style.prototype.load = function (option) {
            return _load(this, option);
        };
        Style.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        Style.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Style.prototype.toJSON = function () {
            return _toJson(this, {
                "addIndent": this._A,
                "builtIn": this._Bu,
                "formulaHidden": this._For,
                "horizontalAlignment": this._H,
                "includeAlignment": this._I,
                "includeBorder": this._In,
                "includeFont": this._Inc,
                "includeNumber": this._Incl,
                "includePatterns": this._Inclu,
                "includeProtection": this._Includ,
                "indentLevel": this._Ind,
                "locked": this._L,
                "name": this._N,
                "numberFormat": this._Nu,
                "numberFormatLocal": this._Num,
                "orientation": this._O,
                "readingOrder": this._R,
                "shrinkToFit": this._S,
                "verticalAlignment": this._V,
                "wrapText": this._W,
            }, {
                "borders": this._B,
                "fill": this._F,
                "font": this._Fo,
            });
        };
        Style.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return Style;
    }(OfficeExtension.ClientObject));
    Excel.Style = Style;
    var _typeStyleCollection = "StyleCollection";
    var StyleCollection = (function (_super) {
        __extends(StyleCollection, _super);
        function StyleCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(StyleCollection.prototype, "_className", {
            get: function () {
                return "StyleCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StyleCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StyleCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeStyleCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        StyleCollection.prototype.add = function (name) {
            _createMethodAction(this.context, this, "Add", 0, [name], false);
        };
        StyleCollection.prototype.getItem = function (name) {
            return new Excel.Style(this.context, _createIndexerObjectPath(this.context, this, [name]));
        };
        StyleCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.Style(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        StyleCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        StyleCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        StyleCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.Style(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        StyleCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return StyleCollection;
    }(OfficeExtension.ClientObject));
    Excel.StyleCollection = StyleCollection;
    var _typeInternalTest = "InternalTest";
    var InternalTest = (function (_super) {
        __extends(InternalTest, _super);
        function InternalTest() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(InternalTest.prototype, "_className", {
            get: function () {
                return "InternalTest";
            },
            enumerable: true,
            configurable: true
        });
        InternalTest.prototype.compareTempFilesAreIdentical = function (filename1, filename2) {
            _throwIfApiNotSupported("InternalTest.compareTempFilesAreIdentical", _defaultApiSetName, "1.8", _hostName);
            var action = _createMethodAction(this.context, this, "CompareTempFilesAreIdentical", 0, [filename1, filename2], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        InternalTest.prototype.delay = function (seconds) {
            var action = _createMethodAction(this.context, this, "Delay", 0, [seconds], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        InternalTest.prototype.deserializeCustomFunctions = function (serializedString) {
            _throwIfApiNotSupported("InternalTest.deserializeCustomFunctions", "CustomFunctions", "1.1", _hostName);
            _createMethodAction(this.context, this, "DeserializeCustomFunctions", 0, [serializedString], false);
        };
        InternalTest.prototype.firstPartyMethod = function () {
            _throwIfApiNotSupported("InternalTest.firstPartyMethod", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "FirstPartyMethod", 1, [], true);
        };
        InternalTest.prototype.saveWorkbookToTempFile = function (filename) {
            _throwIfApiNotSupported("InternalTest.saveWorkbookToTempFile", _defaultApiSetName, "1.8", _hostName);
            _createMethodAction(this.context, this, "SaveWorkbookToTempFile", 0, [filename], false);
        };
        InternalTest.prototype.serializeCustomFunctions = function () {
            _throwIfApiNotSupported("InternalTest.serializeCustomFunctions", "CustomFunctions", "1.1", _hostName);
            var action = _createMethodAction(this.context, this, "SerializeCustomFunctions", 0, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        InternalTest.prototype.triggerMessage = function (messageCategory, messageType, targetId, message) {
            _throwIfApiNotSupported("InternalTest.triggerMessage", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "TriggerMessage", 0, [messageCategory, messageType, targetId, message], false);
        };
        InternalTest.prototype.triggerPostProcess = function () {
            _throwIfApiNotSupported("InternalTest.triggerPostProcess", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "TriggerPostProcess", 0, [], false);
        };
        InternalTest.prototype.triggerTestEvent = function (prop1, worksheet) {
            _throwIfApiNotSupported("InternalTest.triggerTestEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "TriggerTestEvent", 0, [prop1, worksheet], false);
        };
        InternalTest.prototype.triggerTestEventWithFilter = function (prop1, msgType, worksheet) {
            _throwIfApiNotSupported("InternalTest.triggerTestEventWithFilter", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "TriggerTestEventWithFilter", 0, [prop1, msgType, worksheet], false);
        };
        InternalTest.prototype.unregisterAllCustomFunctionExecutionEvents = function () {
            _throwIfApiNotSupported("InternalTest.unregisterAllCustomFunctionExecutionEvents", "CustomFunctions", "1.1", _hostName);
            _createMethodAction(this.context, this, "UnregisterAllCustomFunctionExecutionEvents", 0, [], false);
        };
        InternalTest.prototype._RegisterCustomFunctionExecutionBeginEvent = function () {
            _throwIfApiNotSupported("InternalTest._RegisterCustomFunctionExecutionBeginEvent", "CustomFunctions", "1.1", _hostName);
            _createMethodAction(this.context, this, "_RegisterCustomFunctionExecutionBeginEvent", 0, [], false);
        };
        InternalTest.prototype._RegisterCustomFunctionExecutionEndEvent = function () {
            _throwIfApiNotSupported("InternalTest._RegisterCustomFunctionExecutionEndEvent", "CustomFunctions", "1.1", _hostName);
            _createMethodAction(this.context, this, "_RegisterCustomFunctionExecutionEndEvent", 0, [], false);
        };
        InternalTest.prototype._RegisterTest1Event = function () {
            _throwIfApiNotSupported("InternalTest._RegisterTest1Event", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterTest1Event", 0, [], false);
        };
        InternalTest.prototype._RegisterTestEvent = function () {
            _throwIfApiNotSupported("InternalTest._RegisterTestEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_RegisterTestEvent", 0, [], false);
        };
        InternalTest.prototype._UnregisterCustomFunctionExecutionBeginEvent = function () {
            _throwIfApiNotSupported("InternalTest._UnregisterCustomFunctionExecutionBeginEvent", "CustomFunctions", "1.1", _hostName);
            _createMethodAction(this.context, this, "_UnregisterCustomFunctionExecutionBeginEvent", 0, [], false);
        };
        InternalTest.prototype._UnregisterCustomFunctionExecutionEndEvent = function () {
            _throwIfApiNotSupported("InternalTest._UnregisterCustomFunctionExecutionEndEvent", "CustomFunctions", "1.1", _hostName);
            _createMethodAction(this.context, this, "_UnregisterCustomFunctionExecutionEndEvent", 0, [], false);
        };
        InternalTest.prototype._UnregisterTest1Event = function () {
            _throwIfApiNotSupported("InternalTest._UnregisterTest1Event", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterTest1Event", 0, [], false);
        };
        InternalTest.prototype._UnregisterTestEvent = function () {
            _throwIfApiNotSupported("InternalTest._UnregisterTestEvent", _defaultApiSetName, "1.7", _hostName);
            _createMethodAction(this.context, this, "_UnregisterTestEvent", 0, [], false);
        };
        InternalTest.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
        };
        InternalTest.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Object.defineProperty(InternalTest.prototype, "onCustomFunctionExecutionBeginEvent", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("InternalTest.onCustomFunctionExecutionBeginEvent", "CustomFunctions", "1.1", _hostName);
                if (!this.m_customFunctionExecutionBeginEvent) {
                    this.m_customFunctionExecutionBeginEvent = new OfficeExtension.GenericEventHandlers(this.context, this, "CustomFunctionExecutionBeginEvent", {
                        eventType: 200,
                        registerFunc: function () { return _this._RegisterCustomFunctionExecutionBeginEvent(); },
                        unregisterFunc: function () { return _this._UnregisterCustomFunctionExecutionBeginEvent(); },
                        getTargetIdFunc: function () { return ""; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                lowerTicks: value.lowerTicks,
                                higherTicks: value.higherTicks
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_customFunctionExecutionBeginEvent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InternalTest.prototype, "onCustomFunctionExecutionEndEvent", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("InternalTest.onCustomFunctionExecutionEndEvent", "CustomFunctions", "1.1", _hostName);
                if (!this.m_customFunctionExecutionEndEvent) {
                    this.m_customFunctionExecutionEndEvent = new OfficeExtension.GenericEventHandlers(this.context, this, "CustomFunctionExecutionEndEvent", {
                        eventType: 201,
                        registerFunc: function () { return _this._RegisterCustomFunctionExecutionEndEvent(); },
                        unregisterFunc: function () { return _this._UnregisterCustomFunctionExecutionEndEvent(); },
                        getTargetIdFunc: function () { return ""; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                lowerTicks: value.lowerTicks,
                                higherTicks: value.higherTicks
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_customFunctionExecutionEndEvent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InternalTest.prototype, "onTest1Event", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("InternalTest.onTest1Event", _defaultApiSetName, "1.7", _hostName);
                if (!this.m_test1Event) {
                    this.m_test1Event = new OfficeExtension.GenericEventHandlers(this.context, this, "Test1Event", {
                        eventType: 2,
                        registerFunc: function () { return _this._RegisterTest1Event(); },
                        unregisterFunc: function () { return _this._UnregisterTest1Event(); },
                        getTargetIdFunc: function () { return ""; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                prop1: value.prop1,
                                worksheet: _this.context.workbook.worksheets.getItem(value.worksheetId)
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_test1Event;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InternalTest.prototype, "onTestEvent", {
            get: function () {
                var _this = this;
                _throwIfApiNotSupported("InternalTest.onTestEvent", _defaultApiSetName, "1.7", _hostName);
                if (!this.m_testEvent) {
                    this.m_testEvent = new OfficeExtension.GenericEventHandlers(this.context, this, "TestEvent", {
                        eventType: 1,
                        registerFunc: function () { return _this._RegisterTestEvent(); },
                        unregisterFunc: function () { return _this._UnregisterTestEvent(); },
                        getTargetIdFunc: function () { return ""; },
                        eventArgsTransformFunc: function (value) {
                            var newArgs = {
                                prop1: value.prop1,
                                worksheet: _this.context.workbook.worksheets.getItem(value.worksheetId)
                            };
                            return OfficeExtension.Utility._createPromiseFromResult(newArgs);
                        }
                    });
                }
                return this.m_testEvent;
            },
            enumerable: true,
            configurable: true
        });
        InternalTest.prototype.toJSON = function () {
            return _toJson(this, {}, {});
        };
        return InternalTest;
    }(OfficeExtension.ClientObject));
    Excel.InternalTest = InternalTest;
    var _typePageLayout = "PageLayout";
    var PageLayout = (function (_super) {
        __extends(PageLayout, _super);
        function PageLayout() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PageLayout.prototype, "_className", {
            get: function () {
                return "PageLayout";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageLayout.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["orientation", "paperSize", "blackAndWhite", "printErrors"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageLayout.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageLayout.prototype, "blackAndWhite", {
            get: function () {
                _throwIfNotLoaded("blackAndWhite", this._B, _typePageLayout, this._isNull);
                return this._B;
            },
            set: function (value) {
                this._B = value;
                _createSetPropertyAction(this.context, this, "BlackAndWhite", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageLayout.prototype, "orientation", {
            get: function () {
                _throwIfNotLoaded("orientation", this._O, _typePageLayout, this._isNull);
                return this._O;
            },
            set: function (value) {
                this._O = value;
                _createSetPropertyAction(this.context, this, "Orientation", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageLayout.prototype, "paperSize", {
            get: function () {
                _throwIfNotLoaded("paperSize", this._P, _typePageLayout, this._isNull);
                return this._P;
            },
            set: function (value) {
                this._P = value;
                _createSetPropertyAction(this.context, this, "PaperSize", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PageLayout.prototype, "printErrors", {
            get: function () {
                _throwIfNotLoaded("printErrors", this._Pr, _typePageLayout, this._isNull);
                return this._Pr;
            },
            set: function (value) {
                this._Pr = value;
                _createSetPropertyAction(this.context, this, "PrintErrors", value);
            },
            enumerable: true,
            configurable: true
        });
        PageLayout.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["orientation", "paperSize", "blackAndWhite", "printErrors"], [], []);
        };
        PageLayout.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        PageLayout.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["BlackAndWhite"])) {
                this._B = obj["BlackAndWhite"];
            }
            if (!_isUndefined(obj["Orientation"])) {
                this._O = obj["Orientation"];
            }
            if (!_isUndefined(obj["PaperSize"])) {
                this._P = obj["PaperSize"];
            }
            if (!_isUndefined(obj["PrintErrors"])) {
                this._Pr = obj["PrintErrors"];
            }
        };
        PageLayout.prototype.load = function (option) {
            return _load(this, option);
        };
        PageLayout.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        PageLayout.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        PageLayout.prototype.toJSON = function () {
            return _toJson(this, {
                "blackAndWhite": this._B,
                "orientation": this._O,
                "paperSize": this._P,
                "printErrors": this._Pr,
            }, {});
        };
        PageLayout.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return PageLayout;
    }(OfficeExtension.ClientObject));
    Excel.PageLayout = PageLayout;
    var _typeDataConnectionCollection = "DataConnectionCollection";
    var DataConnectionCollection = (function (_super) {
        __extends(DataConnectionCollection, _super);
        function DataConnectionCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DataConnectionCollection.prototype, "_className", {
            get: function () {
                return "DataConnectionCollection";
            },
            enumerable: true,
            configurable: true
        });
        DataConnectionCollection.prototype.refreshAll = function () {
            _createMethodAction(this.context, this, "RefreshAll", 0, [], false);
        };
        DataConnectionCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
        };
        DataConnectionCollection.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        DataConnectionCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {});
        };
        return DataConnectionCollection;
    }(OfficeExtension.ClientObject));
    Excel.DataConnectionCollection = DataConnectionCollection;
    var _typeAreaCollection = "AreaCollection";
    var AreaCollection = (function (_super) {
        __extends(AreaCollection, _super);
        function AreaCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(AreaCollection.prototype, "_className", {
            get: function () {
                return "AreaCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AreaCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AreaCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeAreaCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        AreaCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        AreaCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.Range(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(false, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        AreaCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        AreaCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        AreaCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.Range(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(false, _this.context, _this, childItemData, index)); });
        };
        AreaCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return AreaCollection;
    }(OfficeExtension.ClientObject));
    Excel.AreaCollection = AreaCollection;
    var AxisType;
    (function (AxisType) {
        AxisType.invalid = "Invalid";
        AxisType.category = "Category";
        AxisType.value = "Value";
        AxisType.series = "Series";
    })(AxisType = Excel.AxisType || (Excel.AxisType = {}));
    var AxisGroup;
    (function (AxisGroup) {
        AxisGroup.primary = "Primary";
        AxisGroup.secondary = "Secondary";
    })(AxisGroup = Excel.AxisGroup || (Excel.AxisGroup = {}));
    var AxisScaleType;
    (function (AxisScaleType) {
        AxisScaleType.linear = "Linear";
        AxisScaleType.logarithmic = "Logarithmic";
    })(AxisScaleType = Excel.AxisScaleType || (Excel.AxisScaleType = {}));
    var AxisCrosses;
    (function (AxisCrosses) {
        AxisCrosses.automatic = "Automatic";
        AxisCrosses.maximum = "Maximum";
        AxisCrosses.minimum = "Minimum";
        AxisCrosses.custom = "Custom";
    })(AxisCrosses = Excel.AxisCrosses || (Excel.AxisCrosses = {}));
    var AxisTickMark;
    (function (AxisTickMark) {
        AxisTickMark.none = "None";
        AxisTickMark.cross = "Cross";
        AxisTickMark.inside = "Inside";
        AxisTickMark.outside = "Outside";
    })(AxisTickMark = Excel.AxisTickMark || (Excel.AxisTickMark = {}));
    var AxisTickLabelPosition;
    (function (AxisTickLabelPosition) {
        AxisTickLabelPosition.nextToAxis = "NextToAxis";
        AxisTickLabelPosition.high = "High";
        AxisTickLabelPosition.low = "Low";
        AxisTickLabelPosition.none = "None";
    })(AxisTickLabelPosition = Excel.AxisTickLabelPosition || (Excel.AxisTickLabelPosition = {}));
    var BindingType;
    (function (BindingType) {
        BindingType.range = "Range";
        BindingType.table = "Table";
        BindingType.text = "Text";
    })(BindingType = Excel.BindingType || (Excel.BindingType = {}));
    var BorderIndex;
    (function (BorderIndex) {
        BorderIndex.edgeTop = "EdgeTop";
        BorderIndex.edgeBottom = "EdgeBottom";
        BorderIndex.edgeLeft = "EdgeLeft";
        BorderIndex.edgeRight = "EdgeRight";
        BorderIndex.insideVertical = "InsideVertical";
        BorderIndex.insideHorizontal = "InsideHorizontal";
        BorderIndex.diagonalDown = "DiagonalDown";
        BorderIndex.diagonalUp = "DiagonalUp";
    })(BorderIndex = Excel.BorderIndex || (Excel.BorderIndex = {}));
    var BorderLineStyle;
    (function (BorderLineStyle) {
        BorderLineStyle.none = "None";
        BorderLineStyle.continuous = "Continuous";
        BorderLineStyle.dash = "Dash";
        BorderLineStyle.dashDot = "DashDot";
        BorderLineStyle.dashDotDot = "DashDotDot";
        BorderLineStyle.dot = "Dot";
        BorderLineStyle.double = "Double";
        BorderLineStyle.slantDashDot = "SlantDashDot";
    })(BorderLineStyle = Excel.BorderLineStyle || (Excel.BorderLineStyle = {}));
    var BorderWeight;
    (function (BorderWeight) {
        BorderWeight.hairline = "Hairline";
        BorderWeight.thin = "Thin";
        BorderWeight.medium = "Medium";
        BorderWeight.thick = "Thick";
    })(BorderWeight = Excel.BorderWeight || (Excel.BorderWeight = {}));
    var CalculationMode;
    (function (CalculationMode) {
        CalculationMode.automatic = "Automatic";
        CalculationMode.automaticExceptTables = "AutomaticExceptTables";
        CalculationMode.manual = "Manual";
    })(CalculationMode = Excel.CalculationMode || (Excel.CalculationMode = {}));
    var CalculationType;
    (function (CalculationType) {
        CalculationType.recalculate = "Recalculate";
        CalculationType.full = "Full";
        CalculationType.fullRebuild = "FullRebuild";
    })(CalculationType = Excel.CalculationType || (Excel.CalculationType = {}));
    var ClearApplyTo;
    (function (ClearApplyTo) {
        ClearApplyTo.all = "All";
        ClearApplyTo.formats = "Formats";
        ClearApplyTo.contents = "Contents";
        ClearApplyTo.hyperlinks = "Hyperlinks";
        ClearApplyTo.removeHyperlinks = "RemoveHyperlinks";
    })(ClearApplyTo = Excel.ClearApplyTo || (Excel.ClearApplyTo = {}));
    var ChartAxisDisplayUnit;
    (function (ChartAxisDisplayUnit) {
        ChartAxisDisplayUnit.none = "None";
        ChartAxisDisplayUnit.hundreds = "Hundreds";
        ChartAxisDisplayUnit.thousands = "Thousands";
        ChartAxisDisplayUnit.tenThousands = "TenThousands";
        ChartAxisDisplayUnit.hundredThousands = "HundredThousands";
        ChartAxisDisplayUnit.millions = "Millions";
        ChartAxisDisplayUnit.tenMillions = "TenMillions";
        ChartAxisDisplayUnit.hundredMillions = "HundredMillions";
        ChartAxisDisplayUnit.billions = "Billions";
        ChartAxisDisplayUnit.trillions = "Trillions";
        ChartAxisDisplayUnit.custom = "Custom";
    })(ChartAxisDisplayUnit = Excel.ChartAxisDisplayUnit || (Excel.ChartAxisDisplayUnit = {}));
    var ChartAxisTimeUnit;
    (function (ChartAxisTimeUnit) {
        ChartAxisTimeUnit.days = "Days";
        ChartAxisTimeUnit.months = "Months";
        ChartAxisTimeUnit.years = "Years";
    })(ChartAxisTimeUnit = Excel.ChartAxisTimeUnit || (Excel.ChartAxisTimeUnit = {}));
    var ChartAxisCategoryType;
    (function (ChartAxisCategoryType) {
        ChartAxisCategoryType.automatic = "Automatic";
        ChartAxisCategoryType.textAxis = "TextAxis";
        ChartAxisCategoryType.dateAxis = "DateAxis";
    })(ChartAxisCategoryType = Excel.ChartAxisCategoryType || (Excel.ChartAxisCategoryType = {}));
    var ChartLineStyle;
    (function (ChartLineStyle) {
        ChartLineStyle.none = "None";
        ChartLineStyle.continuous = "Continuous";
        ChartLineStyle.dash = "Dash";
        ChartLineStyle.dashDot = "DashDot";
        ChartLineStyle.dashDotDot = "DashDotDot";
        ChartLineStyle.dot = "Dot";
        ChartLineStyle.grey25 = "Grey25";
        ChartLineStyle.grey50 = "Grey50";
        ChartLineStyle.grey75 = "Grey75";
        ChartLineStyle.automatic = "Automatic";
    })(ChartLineStyle = Excel.ChartLineStyle || (Excel.ChartLineStyle = {}));
    var ChartDataLabelPosition;
    (function (ChartDataLabelPosition) {
        ChartDataLabelPosition.invalid = "Invalid";
        ChartDataLabelPosition.none = "None";
        ChartDataLabelPosition.center = "Center";
        ChartDataLabelPosition.insideEnd = "InsideEnd";
        ChartDataLabelPosition.insideBase = "InsideBase";
        ChartDataLabelPosition.outsideEnd = "OutsideEnd";
        ChartDataLabelPosition.left = "Left";
        ChartDataLabelPosition.right = "Right";
        ChartDataLabelPosition.top = "Top";
        ChartDataLabelPosition.bottom = "Bottom";
        ChartDataLabelPosition.bestFit = "BestFit";
        ChartDataLabelPosition.callout = "Callout";
    })(ChartDataLabelPosition = Excel.ChartDataLabelPosition || (Excel.ChartDataLabelPosition = {}));
    var ChartTitlePosition;
    (function (ChartTitlePosition) {
        ChartTitlePosition.automatic = "Automatic";
        ChartTitlePosition.top = "Top";
        ChartTitlePosition.bottom = "Bottom";
        ChartTitlePosition.left = "Left";
        ChartTitlePosition.right = "Right";
    })(ChartTitlePosition = Excel.ChartTitlePosition || (Excel.ChartTitlePosition = {}));
    var ChartLegendPosition;
    (function (ChartLegendPosition) {
        ChartLegendPosition.invalid = "Invalid";
        ChartLegendPosition.top = "Top";
        ChartLegendPosition.bottom = "Bottom";
        ChartLegendPosition.left = "Left";
        ChartLegendPosition.right = "Right";
        ChartLegendPosition.corner = "Corner";
        ChartLegendPosition.custom = "Custom";
    })(ChartLegendPosition = Excel.ChartLegendPosition || (Excel.ChartLegendPosition = {}));
    var ChartMarkerStyle;
    (function (ChartMarkerStyle) {
        ChartMarkerStyle.invalid = "Invalid";
        ChartMarkerStyle.automatic = "Automatic";
        ChartMarkerStyle.none = "None";
        ChartMarkerStyle.square = "Square";
        ChartMarkerStyle.diamond = "Diamond";
        ChartMarkerStyle.triangle = "Triangle";
        ChartMarkerStyle.x = "X";
        ChartMarkerStyle.star = "Star";
        ChartMarkerStyle.dot = "Dot";
        ChartMarkerStyle.dash = "Dash";
        ChartMarkerStyle.circle = "Circle";
        ChartMarkerStyle.plus = "Plus";
        ChartMarkerStyle.picture = "Picture";
    })(ChartMarkerStyle = Excel.ChartMarkerStyle || (Excel.ChartMarkerStyle = {}));
    var ChartSeriesBy;
    (function (ChartSeriesBy) {
        ChartSeriesBy.auto = "Auto";
        ChartSeriesBy.columns = "Columns";
        ChartSeriesBy.rows = "Rows";
    })(ChartSeriesBy = Excel.ChartSeriesBy || (Excel.ChartSeriesBy = {}));
    var ChartTextHorizontalAlignment;
    (function (ChartTextHorizontalAlignment) {
        ChartTextHorizontalAlignment.center = "Center";
        ChartTextHorizontalAlignment.left = "Left";
        ChartTextHorizontalAlignment.right = "Right";
        ChartTextHorizontalAlignment.justify = "Justify";
        ChartTextHorizontalAlignment.distributed = "Distributed";
    })(ChartTextHorizontalAlignment = Excel.ChartTextHorizontalAlignment || (Excel.ChartTextHorizontalAlignment = {}));
    var ChartTextVerticalAlignment;
    (function (ChartTextVerticalAlignment) {
        ChartTextVerticalAlignment.center = "Center";
        ChartTextVerticalAlignment.bottom = "Bottom";
        ChartTextVerticalAlignment.top = "Top";
        ChartTextVerticalAlignment.justify = "Justify";
        ChartTextVerticalAlignment.distributed = "Distributed";
    })(ChartTextVerticalAlignment = Excel.ChartTextVerticalAlignment || (Excel.ChartTextVerticalAlignment = {}));
    var ChartType;
    (function (ChartType) {
        ChartType.invalid = "Invalid";
        ChartType.columnClustered = "ColumnClustered";
        ChartType.columnStacked = "ColumnStacked";
        ChartType.columnStacked100 = "ColumnStacked100";
        ChartType._3DColumnClustered = "3DColumnClustered";
        ChartType._3DColumnStacked = "3DColumnStacked";
        ChartType._3DColumnStacked100 = "3DColumnStacked100";
        ChartType.barClustered = "BarClustered";
        ChartType.barStacked = "BarStacked";
        ChartType.barStacked100 = "BarStacked100";
        ChartType._3DBarClustered = "3DBarClustered";
        ChartType._3DBarStacked = "3DBarStacked";
        ChartType._3DBarStacked100 = "3DBarStacked100";
        ChartType.lineStacked = "LineStacked";
        ChartType.lineStacked100 = "LineStacked100";
        ChartType.lineMarkers = "LineMarkers";
        ChartType.lineMarkersStacked = "LineMarkersStacked";
        ChartType.lineMarkersStacked100 = "LineMarkersStacked100";
        ChartType.pieOfPie = "PieOfPie";
        ChartType.pieExploded = "PieExploded";
        ChartType._3DPieExploded = "3DPieExploded";
        ChartType.barOfPie = "BarOfPie";
        ChartType.xyscatterSmooth = "XYScatterSmooth";
        ChartType.xyscatterSmoothNoMarkers = "XYScatterSmoothNoMarkers";
        ChartType.xyscatterLines = "XYScatterLines";
        ChartType.xyscatterLinesNoMarkers = "XYScatterLinesNoMarkers";
        ChartType.areaStacked = "AreaStacked";
        ChartType.areaStacked100 = "AreaStacked100";
        ChartType._3DAreaStacked = "3DAreaStacked";
        ChartType._3DAreaStacked100 = "3DAreaStacked100";
        ChartType.doughnutExploded = "DoughnutExploded";
        ChartType.radarMarkers = "RadarMarkers";
        ChartType.radarFilled = "RadarFilled";
        ChartType.surface = "Surface";
        ChartType.surfaceWireframe = "SurfaceWireframe";
        ChartType.surfaceTopView = "SurfaceTopView";
        ChartType.surfaceTopViewWireframe = "SurfaceTopViewWireframe";
        ChartType.bubble = "Bubble";
        ChartType.bubble3DEffect = "Bubble3DEffect";
        ChartType.stockHLC = "StockHLC";
        ChartType.stockOHLC = "StockOHLC";
        ChartType.stockVHLC = "StockVHLC";
        ChartType.stockVOHLC = "StockVOHLC";
        ChartType.cylinderColClustered = "CylinderColClustered";
        ChartType.cylinderColStacked = "CylinderColStacked";
        ChartType.cylinderColStacked100 = "CylinderColStacked100";
        ChartType.cylinderBarClustered = "CylinderBarClustered";
        ChartType.cylinderBarStacked = "CylinderBarStacked";
        ChartType.cylinderBarStacked100 = "CylinderBarStacked100";
        ChartType.cylinderCol = "CylinderCol";
        ChartType.coneColClustered = "ConeColClustered";
        ChartType.coneColStacked = "ConeColStacked";
        ChartType.coneColStacked100 = "ConeColStacked100";
        ChartType.coneBarClustered = "ConeBarClustered";
        ChartType.coneBarStacked = "ConeBarStacked";
        ChartType.coneBarStacked100 = "ConeBarStacked100";
        ChartType.coneCol = "ConeCol";
        ChartType.pyramidColClustered = "PyramidColClustered";
        ChartType.pyramidColStacked = "PyramidColStacked";
        ChartType.pyramidColStacked100 = "PyramidColStacked100";
        ChartType.pyramidBarClustered = "PyramidBarClustered";
        ChartType.pyramidBarStacked = "PyramidBarStacked";
        ChartType.pyramidBarStacked100 = "PyramidBarStacked100";
        ChartType.pyramidCol = "PyramidCol";
        ChartType._3DColumn = "3DColumn";
        ChartType.line = "Line";
        ChartType._3DLine = "3DLine";
        ChartType._3DPie = "3DPie";
        ChartType.pie = "Pie";
        ChartType.xyscatter = "XYScatter";
        ChartType._3DArea = "3DArea";
        ChartType.area = "Area";
        ChartType.doughnut = "Doughnut";
        ChartType.radar = "Radar";
    })(ChartType = Excel.ChartType || (Excel.ChartType = {}));
    var ChartUnderlineStyle;
    (function (ChartUnderlineStyle) {
        ChartUnderlineStyle.none = "None";
        ChartUnderlineStyle.single = "Single";
    })(ChartUnderlineStyle = Excel.ChartUnderlineStyle || (Excel.ChartUnderlineStyle = {}));
    var VisualCategory;
    (function (VisualCategory) {
        VisualCategory.column = "Column";
        VisualCategory.bar = "Bar";
        VisualCategory.line = "Line";
        VisualCategory.area = "Area";
        VisualCategory.pie = "Pie";
        VisualCategory.donut = "Donut";
        VisualCategory.scatter = "Scatter";
        VisualCategory.bubble = "Bubble";
        VisualCategory.statistical = "Statistical";
        VisualCategory.stock = "Stock";
        VisualCategory.combo = "Combo";
        VisualCategory.hierarchy = "Hierarchy";
        VisualCategory.surface = "Surface";
        VisualCategory.map = "Map";
        VisualCategory.funnel = "Funnel";
        VisualCategory.radar = "Radar";
        VisualCategory.waterfall = "Waterfall";
        VisualCategory.threeD = "ThreeD";
        VisualCategory.other = "Other";
    })(VisualCategory = Excel.VisualCategory || (Excel.VisualCategory = {}));
    var ConditionalDataBarAxisFormat;
    (function (ConditionalDataBarAxisFormat) {
        ConditionalDataBarAxisFormat.automatic = "Automatic";
        ConditionalDataBarAxisFormat.none = "None";
        ConditionalDataBarAxisFormat.cellMidPoint = "CellMidPoint";
    })(ConditionalDataBarAxisFormat = Excel.ConditionalDataBarAxisFormat || (Excel.ConditionalDataBarAxisFormat = {}));
    var ConditionalDataBarDirection;
    (function (ConditionalDataBarDirection) {
        ConditionalDataBarDirection.context = "Context";
        ConditionalDataBarDirection.leftToRight = "LeftToRight";
        ConditionalDataBarDirection.rightToLeft = "RightToLeft";
    })(ConditionalDataBarDirection = Excel.ConditionalDataBarDirection || (Excel.ConditionalDataBarDirection = {}));
    var ConditionalFormatDirection;
    (function (ConditionalFormatDirection) {
        ConditionalFormatDirection.top = "Top";
        ConditionalFormatDirection.bottom = "Bottom";
    })(ConditionalFormatDirection = Excel.ConditionalFormatDirection || (Excel.ConditionalFormatDirection = {}));
    var ConditionalFormatType;
    (function (ConditionalFormatType) {
        ConditionalFormatType.custom = "Custom";
        ConditionalFormatType.dataBar = "DataBar";
        ConditionalFormatType.colorScale = "ColorScale";
        ConditionalFormatType.iconSet = "IconSet";
        ConditionalFormatType.topBottom = "TopBottom";
        ConditionalFormatType.presetCriteria = "PresetCriteria";
        ConditionalFormatType.containsText = "ContainsText";
        ConditionalFormatType.cellValue = "CellValue";
    })(ConditionalFormatType = Excel.ConditionalFormatType || (Excel.ConditionalFormatType = {}));
    var ConditionalFormatRuleType;
    (function (ConditionalFormatRuleType) {
        ConditionalFormatRuleType.invalid = "Invalid";
        ConditionalFormatRuleType.automatic = "Automatic";
        ConditionalFormatRuleType.lowestValue = "LowestValue";
        ConditionalFormatRuleType.highestValue = "HighestValue";
        ConditionalFormatRuleType.number = "Number";
        ConditionalFormatRuleType.percent = "Percent";
        ConditionalFormatRuleType.formula = "Formula";
        ConditionalFormatRuleType.percentile = "Percentile";
    })(ConditionalFormatRuleType = Excel.ConditionalFormatRuleType || (Excel.ConditionalFormatRuleType = {}));
    var ConditionalFormatIconRuleType;
    (function (ConditionalFormatIconRuleType) {
        ConditionalFormatIconRuleType.invalid = "Invalid";
        ConditionalFormatIconRuleType.number = "Number";
        ConditionalFormatIconRuleType.percent = "Percent";
        ConditionalFormatIconRuleType.formula = "Formula";
        ConditionalFormatIconRuleType.percentile = "Percentile";
    })(ConditionalFormatIconRuleType = Excel.ConditionalFormatIconRuleType || (Excel.ConditionalFormatIconRuleType = {}));
    var ConditionalFormatColorCriterionType;
    (function (ConditionalFormatColorCriterionType) {
        ConditionalFormatColorCriterionType.invalid = "Invalid";
        ConditionalFormatColorCriterionType.lowestValue = "LowestValue";
        ConditionalFormatColorCriterionType.highestValue = "HighestValue";
        ConditionalFormatColorCriterionType.number = "Number";
        ConditionalFormatColorCriterionType.percent = "Percent";
        ConditionalFormatColorCriterionType.formula = "Formula";
        ConditionalFormatColorCriterionType.percentile = "Percentile";
    })(ConditionalFormatColorCriterionType = Excel.ConditionalFormatColorCriterionType || (Excel.ConditionalFormatColorCriterionType = {}));
    var ConditionalTopBottomCriterionType;
    (function (ConditionalTopBottomCriterionType) {
        ConditionalTopBottomCriterionType.invalid = "Invalid";
        ConditionalTopBottomCriterionType.topItems = "TopItems";
        ConditionalTopBottomCriterionType.topPercent = "TopPercent";
        ConditionalTopBottomCriterionType.bottomItems = "BottomItems";
        ConditionalTopBottomCriterionType.bottomPercent = "BottomPercent";
    })(ConditionalTopBottomCriterionType = Excel.ConditionalTopBottomCriterionType || (Excel.ConditionalTopBottomCriterionType = {}));
    var ConditionalFormatPresetCriterion;
    (function (ConditionalFormatPresetCriterion) {
        ConditionalFormatPresetCriterion.invalid = "Invalid";
        ConditionalFormatPresetCriterion.blanks = "Blanks";
        ConditionalFormatPresetCriterion.nonBlanks = "NonBlanks";
        ConditionalFormatPresetCriterion.errors = "Errors";
        ConditionalFormatPresetCriterion.nonErrors = "NonErrors";
        ConditionalFormatPresetCriterion.yesterday = "Yesterday";
        ConditionalFormatPresetCriterion.today = "Today";
        ConditionalFormatPresetCriterion.tomorrow = "Tomorrow";
        ConditionalFormatPresetCriterion.lastSevenDays = "LastSevenDays";
        ConditionalFormatPresetCriterion.lastWeek = "LastWeek";
        ConditionalFormatPresetCriterion.thisWeek = "ThisWeek";
        ConditionalFormatPresetCriterion.nextWeek = "NextWeek";
        ConditionalFormatPresetCriterion.lastMonth = "LastMonth";
        ConditionalFormatPresetCriterion.thisMonth = "ThisMonth";
        ConditionalFormatPresetCriterion.nextMonth = "NextMonth";
        ConditionalFormatPresetCriterion.aboveAverage = "AboveAverage";
        ConditionalFormatPresetCriterion.belowAverage = "BelowAverage";
        ConditionalFormatPresetCriterion.equalOrAboveAverage = "EqualOrAboveAverage";
        ConditionalFormatPresetCriterion.equalOrBelowAverage = "EqualOrBelowAverage";
        ConditionalFormatPresetCriterion.oneStdDevAboveAverage = "OneStdDevAboveAverage";
        ConditionalFormatPresetCriterion.oneStdDevBelowAverage = "OneStdDevBelowAverage";
        ConditionalFormatPresetCriterion.twoStdDevAboveAverage = "TwoStdDevAboveAverage";
        ConditionalFormatPresetCriterion.twoStdDevBelowAverage = "TwoStdDevBelowAverage";
        ConditionalFormatPresetCriterion.threeStdDevAboveAverage = "ThreeStdDevAboveAverage";
        ConditionalFormatPresetCriterion.threeStdDevBelowAverage = "ThreeStdDevBelowAverage";
        ConditionalFormatPresetCriterion.uniqueValues = "UniqueValues";
        ConditionalFormatPresetCriterion.duplicateValues = "DuplicateValues";
    })(ConditionalFormatPresetCriterion = Excel.ConditionalFormatPresetCriterion || (Excel.ConditionalFormatPresetCriterion = {}));
    var ConditionalTextOperator;
    (function (ConditionalTextOperator) {
        ConditionalTextOperator.invalid = "Invalid";
        ConditionalTextOperator.contains = "Contains";
        ConditionalTextOperator.notContains = "NotContains";
        ConditionalTextOperator.beginsWith = "BeginsWith";
        ConditionalTextOperator.endsWith = "EndsWith";
    })(ConditionalTextOperator = Excel.ConditionalTextOperator || (Excel.ConditionalTextOperator = {}));
    var ConditionalCellValueOperator;
    (function (ConditionalCellValueOperator) {
        ConditionalCellValueOperator.invalid = "Invalid";
        ConditionalCellValueOperator.between = "Between";
        ConditionalCellValueOperator.notBetween = "NotBetween";
        ConditionalCellValueOperator.equalTo = "EqualTo";
        ConditionalCellValueOperator.notEqualTo = "NotEqualTo";
        ConditionalCellValueOperator.greaterThan = "GreaterThan";
        ConditionalCellValueOperator.lessThan = "LessThan";
        ConditionalCellValueOperator.greaterThanOrEqual = "GreaterThanOrEqual";
        ConditionalCellValueOperator.lessThanOrEqual = "LessThanOrEqual";
    })(ConditionalCellValueOperator = Excel.ConditionalCellValueOperator || (Excel.ConditionalCellValueOperator = {}));
    var ConditionalIconCriterionOperator;
    (function (ConditionalIconCriterionOperator) {
        ConditionalIconCriterionOperator.invalid = "Invalid";
        ConditionalIconCriterionOperator.greaterThan = "GreaterThan";
        ConditionalIconCriterionOperator.greaterThanOrEqual = "GreaterThanOrEqual";
    })(ConditionalIconCriterionOperator = Excel.ConditionalIconCriterionOperator || (Excel.ConditionalIconCriterionOperator = {}));
    var ConditionalRangeBorderIndex;
    (function (ConditionalRangeBorderIndex) {
        ConditionalRangeBorderIndex.edgeTop = "EdgeTop";
        ConditionalRangeBorderIndex.edgeBottom = "EdgeBottom";
        ConditionalRangeBorderIndex.edgeLeft = "EdgeLeft";
        ConditionalRangeBorderIndex.edgeRight = "EdgeRight";
    })(ConditionalRangeBorderIndex = Excel.ConditionalRangeBorderIndex || (Excel.ConditionalRangeBorderIndex = {}));
    var ConditionalRangeBorderLineStyle;
    (function (ConditionalRangeBorderLineStyle) {
        ConditionalRangeBorderLineStyle.none = "None";
        ConditionalRangeBorderLineStyle.continuous = "Continuous";
        ConditionalRangeBorderLineStyle.dash = "Dash";
        ConditionalRangeBorderLineStyle.dashDot = "DashDot";
        ConditionalRangeBorderLineStyle.dashDotDot = "DashDotDot";
        ConditionalRangeBorderLineStyle.dot = "Dot";
    })(ConditionalRangeBorderLineStyle = Excel.ConditionalRangeBorderLineStyle || (Excel.ConditionalRangeBorderLineStyle = {}));
    var ConditionalRangeFontUnderlineStyle;
    (function (ConditionalRangeFontUnderlineStyle) {
        ConditionalRangeFontUnderlineStyle.none = "None";
        ConditionalRangeFontUnderlineStyle.single = "Single";
        ConditionalRangeFontUnderlineStyle.double = "Double";
    })(ConditionalRangeFontUnderlineStyle = Excel.ConditionalRangeFontUnderlineStyle || (Excel.ConditionalRangeFontUnderlineStyle = {}));
    var CustomFunctionType;
    (function (CustomFunctionType) {
        CustomFunctionType.invalid = "Invalid";
        CustomFunctionType.script = "Script";
        CustomFunctionType.webService = "WebService";
    })(CustomFunctionType = Excel.CustomFunctionType || (Excel.CustomFunctionType = {}));
    var CustomFunctionMetadataFormat;
    (function (CustomFunctionMetadataFormat) {
        CustomFunctionMetadataFormat.invalid = "Invalid";
        CustomFunctionMetadataFormat.openApi = "OpenApi";
    })(CustomFunctionMetadataFormat = Excel.CustomFunctionMetadataFormat || (Excel.CustomFunctionMetadataFormat = {}));
    var CustomFunctionValueType;
    (function (CustomFunctionValueType) {
        CustomFunctionValueType.invalid = "Invalid";
        CustomFunctionValueType.boolean = "Boolean";
        CustomFunctionValueType.number = "Number";
        CustomFunctionValueType.string = "String";
        CustomFunctionValueType.isodate = "ISODate";
    })(CustomFunctionValueType = Excel.CustomFunctionValueType || (Excel.CustomFunctionValueType = {}));
    var CustomFunctionDimensionality;
    (function (CustomFunctionDimensionality) {
        CustomFunctionDimensionality.invalid = "Invalid";
        CustomFunctionDimensionality.scalar = "Scalar";
        CustomFunctionDimensionality.matrix = "Matrix";
    })(CustomFunctionDimensionality = Excel.CustomFunctionDimensionality || (Excel.CustomFunctionDimensionality = {}));
    var DataValidationType;
    (function (DataValidationType) {
        DataValidationType.invalid = "Invalid";
        DataValidationType.none = "None";
        DataValidationType.wholeNumber = "WholeNumber";
        DataValidationType.decimal = "Decimal";
        DataValidationType.list = "List";
        DataValidationType.date = "Date";
        DataValidationType.time = "Time";
        DataValidationType.textLength = "TextLength";
        DataValidationType.custom = "Custom";
        DataValidationType.inconsistent = "Inconsistent";
        DataValidationType.mixedCriteria = "MixedCriteria";
    })(DataValidationType = Excel.DataValidationType || (Excel.DataValidationType = {}));
    var DataValidationOperator;
    (function (DataValidationOperator) {
        DataValidationOperator.invalid = "Invalid";
        DataValidationOperator.between = "Between";
        DataValidationOperator.notBetween = "NotBetween";
        DataValidationOperator.equalTo = "EqualTo";
        DataValidationOperator.notEqualTo = "NotEqualTo";
        DataValidationOperator.greaterThan = "GreaterThan";
        DataValidationOperator.lessThan = "LessThan";
        DataValidationOperator.greaterThanOrEqualTo = "GreaterThanOrEqualTo";
        DataValidationOperator.lessThanOrEqualTo = "LessThanOrEqualTo";
    })(DataValidationOperator = Excel.DataValidationOperator || (Excel.DataValidationOperator = {}));
    var DataValidationAlertStyle;
    (function (DataValidationAlertStyle) {
        DataValidationAlertStyle.invalid = "Invalid";
        DataValidationAlertStyle.stop = "Stop";
        DataValidationAlertStyle.warning = "Warning";
        DataValidationAlertStyle.information = "Information";
    })(DataValidationAlertStyle = Excel.DataValidationAlertStyle || (Excel.DataValidationAlertStyle = {}));
    var DeleteShiftDirection;
    (function (DeleteShiftDirection) {
        DeleteShiftDirection.up = "Up";
        DeleteShiftDirection.left = "Left";
    })(DeleteShiftDirection = Excel.DeleteShiftDirection || (Excel.DeleteShiftDirection = {}));
    var DynamicFilterCriteria;
    (function (DynamicFilterCriteria) {
        DynamicFilterCriteria.unknown = "Unknown";
        DynamicFilterCriteria.aboveAverage = "AboveAverage";
        DynamicFilterCriteria.allDatesInPeriodApril = "AllDatesInPeriodApril";
        DynamicFilterCriteria.allDatesInPeriodAugust = "AllDatesInPeriodAugust";
        DynamicFilterCriteria.allDatesInPeriodDecember = "AllDatesInPeriodDecember";
        DynamicFilterCriteria.allDatesInPeriodFebruray = "AllDatesInPeriodFebruray";
        DynamicFilterCriteria.allDatesInPeriodJanuary = "AllDatesInPeriodJanuary";
        DynamicFilterCriteria.allDatesInPeriodJuly = "AllDatesInPeriodJuly";
        DynamicFilterCriteria.allDatesInPeriodJune = "AllDatesInPeriodJune";
        DynamicFilterCriteria.allDatesInPeriodMarch = "AllDatesInPeriodMarch";
        DynamicFilterCriteria.allDatesInPeriodMay = "AllDatesInPeriodMay";
        DynamicFilterCriteria.allDatesInPeriodNovember = "AllDatesInPeriodNovember";
        DynamicFilterCriteria.allDatesInPeriodOctober = "AllDatesInPeriodOctober";
        DynamicFilterCriteria.allDatesInPeriodQuarter1 = "AllDatesInPeriodQuarter1";
        DynamicFilterCriteria.allDatesInPeriodQuarter2 = "AllDatesInPeriodQuarter2";
        DynamicFilterCriteria.allDatesInPeriodQuarter3 = "AllDatesInPeriodQuarter3";
        DynamicFilterCriteria.allDatesInPeriodQuarter4 = "AllDatesInPeriodQuarter4";
        DynamicFilterCriteria.allDatesInPeriodSeptember = "AllDatesInPeriodSeptember";
        DynamicFilterCriteria.belowAverage = "BelowAverage";
        DynamicFilterCriteria.lastMonth = "LastMonth";
        DynamicFilterCriteria.lastQuarter = "LastQuarter";
        DynamicFilterCriteria.lastWeek = "LastWeek";
        DynamicFilterCriteria.lastYear = "LastYear";
        DynamicFilterCriteria.nextMonth = "NextMonth";
        DynamicFilterCriteria.nextQuarter = "NextQuarter";
        DynamicFilterCriteria.nextWeek = "NextWeek";
        DynamicFilterCriteria.nextYear = "NextYear";
        DynamicFilterCriteria.thisMonth = "ThisMonth";
        DynamicFilterCriteria.thisQuarter = "ThisQuarter";
        DynamicFilterCriteria.thisWeek = "ThisWeek";
        DynamicFilterCriteria.thisYear = "ThisYear";
        DynamicFilterCriteria.today = "Today";
        DynamicFilterCriteria.tomorrow = "Tomorrow";
        DynamicFilterCriteria.yearToDate = "YearToDate";
        DynamicFilterCriteria.yesterday = "Yesterday";
    })(DynamicFilterCriteria = Excel.DynamicFilterCriteria || (Excel.DynamicFilterCriteria = {}));
    var FilterDatetimeSpecificity;
    (function (FilterDatetimeSpecificity) {
        FilterDatetimeSpecificity.year = "Year";
        FilterDatetimeSpecificity.month = "Month";
        FilterDatetimeSpecificity.day = "Day";
        FilterDatetimeSpecificity.hour = "Hour";
        FilterDatetimeSpecificity.minute = "Minute";
        FilterDatetimeSpecificity.second = "Second";
    })(FilterDatetimeSpecificity = Excel.FilterDatetimeSpecificity || (Excel.FilterDatetimeSpecificity = {}));
    var FilterOn;
    (function (FilterOn) {
        FilterOn.bottomItems = "BottomItems";
        FilterOn.bottomPercent = "BottomPercent";
        FilterOn.cellColor = "CellColor";
        FilterOn.dynamic = "Dynamic";
        FilterOn.fontColor = "FontColor";
        FilterOn.values = "Values";
        FilterOn.topItems = "TopItems";
        FilterOn.topPercent = "TopPercent";
        FilterOn.icon = "Icon";
        FilterOn.custom = "Custom";
    })(FilterOn = Excel.FilterOn || (Excel.FilterOn = {}));
    var FilterOperator;
    (function (FilterOperator) {
        FilterOperator.and = "And";
        FilterOperator.or = "Or";
    })(FilterOperator = Excel.FilterOperator || (Excel.FilterOperator = {}));
    var HorizontalAlignment;
    (function (HorizontalAlignment) {
        HorizontalAlignment.general = "General";
        HorizontalAlignment.left = "Left";
        HorizontalAlignment.center = "Center";
        HorizontalAlignment.right = "Right";
        HorizontalAlignment.fill = "Fill";
        HorizontalAlignment.justify = "Justify";
        HorizontalAlignment.centerAcrossSelection = "CenterAcrossSelection";
        HorizontalAlignment.distributed = "Distributed";
    })(HorizontalAlignment = Excel.HorizontalAlignment || (Excel.HorizontalAlignment = {}));
    var IconSet;
    (function (IconSet) {
        IconSet.invalid = "Invalid";
        IconSet.threeArrows = "ThreeArrows";
        IconSet.threeArrowsGray = "ThreeArrowsGray";
        IconSet.threeFlags = "ThreeFlags";
        IconSet.threeTrafficLights1 = "ThreeTrafficLights1";
        IconSet.threeTrafficLights2 = "ThreeTrafficLights2";
        IconSet.threeSigns = "ThreeSigns";
        IconSet.threeSymbols = "ThreeSymbols";
        IconSet.threeSymbols2 = "ThreeSymbols2";
        IconSet.fourArrows = "FourArrows";
        IconSet.fourArrowsGray = "FourArrowsGray";
        IconSet.fourRedToBlack = "FourRedToBlack";
        IconSet.fourRating = "FourRating";
        IconSet.fourTrafficLights = "FourTrafficLights";
        IconSet.fiveArrows = "FiveArrows";
        IconSet.fiveArrowsGray = "FiveArrowsGray";
        IconSet.fiveRating = "FiveRating";
        IconSet.fiveQuarters = "FiveQuarters";
        IconSet.threeStars = "ThreeStars";
        IconSet.threeTriangles = "ThreeTriangles";
        IconSet.fiveBoxes = "FiveBoxes";
    })(IconSet = Excel.IconSet || (Excel.IconSet = {}));
    var ImageFittingMode;
    (function (ImageFittingMode) {
        ImageFittingMode.fit = "Fit";
        ImageFittingMode.fitAndCenter = "FitAndCenter";
        ImageFittingMode.fill = "Fill";
    })(ImageFittingMode = Excel.ImageFittingMode || (Excel.ImageFittingMode = {}));
    var InsertShiftDirection;
    (function (InsertShiftDirection) {
        InsertShiftDirection.down = "Down";
        InsertShiftDirection.right = "Right";
    })(InsertShiftDirection = Excel.InsertShiftDirection || (Excel.InsertShiftDirection = {}));
    var NamedItemScope;
    (function (NamedItemScope) {
        NamedItemScope.worksheet = "Worksheet";
        NamedItemScope.workbook = "Workbook";
    })(NamedItemScope = Excel.NamedItemScope || (Excel.NamedItemScope = {}));
    var NamedItemType;
    (function (NamedItemType) {
        NamedItemType.string = "String";
        NamedItemType.integer = "Integer";
        NamedItemType.double = "Double";
        NamedItemType.boolean = "Boolean";
        NamedItemType.range = "Range";
        NamedItemType.error = "Error";
        NamedItemType.array = "Array";
    })(NamedItemType = Excel.NamedItemType || (Excel.NamedItemType = {}));
    var RangeUnderlineStyle;
    (function (RangeUnderlineStyle) {
        RangeUnderlineStyle.none = "None";
        RangeUnderlineStyle.single = "Single";
        RangeUnderlineStyle.double = "Double";
        RangeUnderlineStyle.singleAccountant = "SingleAccountant";
        RangeUnderlineStyle.doubleAccountant = "DoubleAccountant";
    })(RangeUnderlineStyle = Excel.RangeUnderlineStyle || (Excel.RangeUnderlineStyle = {}));
    var SheetVisibility;
    (function (SheetVisibility) {
        SheetVisibility.visible = "Visible";
        SheetVisibility.hidden = "Hidden";
        SheetVisibility.veryHidden = "VeryHidden";
    })(SheetVisibility = Excel.SheetVisibility || (Excel.SheetVisibility = {}));
    var RangeValueType;
    (function (RangeValueType) {
        RangeValueType.unknown = "Unknown";
        RangeValueType.empty = "Empty";
        RangeValueType.string = "String";
        RangeValueType.integer = "Integer";
        RangeValueType.double = "Double";
        RangeValueType.boolean = "Boolean";
        RangeValueType.error = "Error";
        RangeValueType.richValue = "RichValue";
    })(RangeValueType = Excel.RangeValueType || (Excel.RangeValueType = {}));
    var SortOrientation;
    (function (SortOrientation) {
        SortOrientation.rows = "Rows";
        SortOrientation.columns = "Columns";
    })(SortOrientation = Excel.SortOrientation || (Excel.SortOrientation = {}));
    var SortOn;
    (function (SortOn) {
        SortOn.value = "Value";
        SortOn.cellColor = "CellColor";
        SortOn.fontColor = "FontColor";
        SortOn.icon = "Icon";
    })(SortOn = Excel.SortOn || (Excel.SortOn = {}));
    var SortDataOption;
    (function (SortDataOption) {
        SortDataOption.normal = "Normal";
        SortDataOption.textAsNumber = "TextAsNumber";
    })(SortDataOption = Excel.SortDataOption || (Excel.SortDataOption = {}));
    var SortMethod;
    (function (SortMethod) {
        SortMethod.pinYin = "PinYin";
        SortMethod.strokeCount = "StrokeCount";
    })(SortMethod = Excel.SortMethod || (Excel.SortMethod = {}));
    var VerticalAlignment;
    (function (VerticalAlignment) {
        VerticalAlignment.top = "Top";
        VerticalAlignment.center = "Center";
        VerticalAlignment.bottom = "Bottom";
        VerticalAlignment.justify = "Justify";
        VerticalAlignment.distributed = "Distributed";
    })(VerticalAlignment = Excel.VerticalAlignment || (Excel.VerticalAlignment = {}));
    var DocumentPropertyType;
    (function (DocumentPropertyType) {
        DocumentPropertyType.number = "Number";
        DocumentPropertyType.boolean = "Boolean";
        DocumentPropertyType.date = "Date";
        DocumentPropertyType.string = "String";
        DocumentPropertyType.float = "Float";
    })(DocumentPropertyType = Excel.DocumentPropertyType || (Excel.DocumentPropertyType = {}));
    var EventSource;
    (function (EventSource) {
        EventSource.local = "Local";
        EventSource.remote = "Remote";
    })(EventSource = Excel.EventSource || (Excel.EventSource = {}));
    var DataChangeType;
    (function (DataChangeType) {
        DataChangeType.others = "Others";
        DataChangeType.rangeEdited = "RangeEdited";
        DataChangeType.rowInserted = "RowInserted";
        DataChangeType.rowDeleted = "RowDeleted";
        DataChangeType.columnInserted = "ColumnInserted";
        DataChangeType.columnDeleted = "ColumnDeleted";
        DataChangeType.cellInserted = "CellInserted";
        DataChangeType.cellDeleted = "CellDeleted";
    })(DataChangeType = Excel.DataChangeType || (Excel.DataChangeType = {}));
    var EventType;
    (function (EventType) {
        EventType.worksheetDataChanged = "WorksheetDataChanged";
        EventType.worksheetSelectionChanged = "WorksheetSelectionChanged";
        EventType.worksheetAdded = "WorksheetAdded";
        EventType.worksheetActivated = "WorksheetActivated";
        EventType.worksheetDeactivated = "WorksheetDeactivated";
        EventType.tableDataChanged = "TableDataChanged";
        EventType.tableSelectionChanged = "TableSelectionChanged";
        EventType.worksheetDeleted = "WorksheetDeleted";
        EventType.chartAdded = "ChartAdded";
        EventType.chartActivated = "ChartActivated";
        EventType.chartDeactivated = "ChartDeactivated";
        EventType.chartDeleted = "ChartDeleted";
        EventType.worksheetCalculated = "WorksheetCalculated";
    })(EventType = Excel.EventType || (Excel.EventType = {}));
    var DocumentPropertyItem;
    (function (DocumentPropertyItem) {
        DocumentPropertyItem.title = "Title";
        DocumentPropertyItem.subject = "Subject";
        DocumentPropertyItem.author = "Author";
        DocumentPropertyItem.keywords = "Keywords";
        DocumentPropertyItem.comments = "Comments";
        DocumentPropertyItem.template = "Template";
        DocumentPropertyItem.lastAuth = "LastAuth";
        DocumentPropertyItem.revision = "Revision";
        DocumentPropertyItem.appName = "AppName";
        DocumentPropertyItem.lastPrint = "LastPrint";
        DocumentPropertyItem.creation = "Creation";
        DocumentPropertyItem.lastSave = "LastSave";
        DocumentPropertyItem.category = "Category";
        DocumentPropertyItem.format = "Format";
        DocumentPropertyItem.manager = "Manager";
        DocumentPropertyItem.company = "Company";
    })(DocumentPropertyItem = Excel.DocumentPropertyItem || (Excel.DocumentPropertyItem = {}));
    var TrendlineType;
    (function (TrendlineType) {
        TrendlineType.linear = "Linear";
        TrendlineType.exponential = "Exponential";
        TrendlineType.logarithmic = "Logarithmic";
        TrendlineType.movingAverage = "MovingAverage";
        TrendlineType.polynomial = "Polynomial";
        TrendlineType.power = "Power";
    })(TrendlineType = Excel.TrendlineType || (Excel.TrendlineType = {}));
    var SubtotalLocationType;
    (function (SubtotalLocationType) {
        SubtotalLocationType.atTop = "AtTop";
        SubtotalLocationType.atBottom = "AtBottom";
    })(SubtotalLocationType = Excel.SubtotalLocationType || (Excel.SubtotalLocationType = {}));
    var LayoutRowType;
    (function (LayoutRowType) {
        LayoutRowType.compactRow = "CompactRow";
        LayoutRowType.tabularRow = "TabularRow";
        LayoutRowType.outlineRow = "OutlineRow";
    })(LayoutRowType = Excel.LayoutRowType || (Excel.LayoutRowType = {}));
    var ProtectionSelectionMode;
    (function (ProtectionSelectionMode) {
        ProtectionSelectionMode.normal = "Normal";
        ProtectionSelectionMode.unlocked = "Unlocked";
        ProtectionSelectionMode.none = "None";
    })(ProtectionSelectionMode = Excel.ProtectionSelectionMode || (Excel.ProtectionSelectionMode = {}));
    var PageOrientation;
    (function (PageOrientation) {
        PageOrientation.portrait = "Portrait";
        PageOrientation.landscape = "Landscape";
    })(PageOrientation = Excel.PageOrientation || (Excel.PageOrientation = {}));
    var PaperType;
    (function (PaperType) {
        PaperType.letter = "Letter";
        PaperType.letterSmall = "LetterSmall";
        PaperType.tabloid = "Tabloid";
        PaperType.ledger = "Ledger";
        PaperType.legal = "Legal";
        PaperType.statement = "Statement";
        PaperType.executive = "Executive";
        PaperType.a3 = "A3";
        PaperType.a4 = "A4";
        PaperType.a4Small = "A4Small";
        PaperType.a5 = "A5";
        PaperType.b4 = "B4";
        PaperType.b5 = "B5";
        PaperType.folio = "Folio";
        PaperType.quatro = "Quatro";
        PaperType.paper10x14 = "Paper10x14";
        PaperType.paper11x17 = "Paper11x17";
        PaperType.note = "Note";
        PaperType.envelope9 = "Envelope9";
        PaperType.envelope10 = "Envelope10";
        PaperType.envelope11 = "Envelope11";
        PaperType.envelope12 = "Envelope12";
        PaperType.envelope14 = "Envelope14";
        PaperType.csheet = "Csheet";
        PaperType.dsheet = "Dsheet";
        PaperType.esheet = "Esheet";
        PaperType.envelopeDL = "EnvelopeDL";
        PaperType.envelopeC5 = "EnvelopeC5";
        PaperType.envelopeC3 = "EnvelopeC3";
        PaperType.envelopeC4 = "EnvelopeC4";
        PaperType.envelopeC6 = "EnvelopeC6";
        PaperType.envelopeC65 = "EnvelopeC65";
        PaperType.envelopeB4 = "EnvelopeB4";
        PaperType.envelopeB5 = "EnvelopeB5";
        PaperType.envelopeB6 = "EnvelopeB6";
        PaperType.envelopeItaly = "EnvelopeItaly";
        PaperType.envelopeMonarch = "EnvelopeMonarch";
        PaperType.envelopePersonal = "EnvelopePersonal";
        PaperType.fanfoldUS = "FanfoldUS";
        PaperType.fanfoldStdGerman = "FanfoldStdGerman";
        PaperType.fanfoldLegalGerman = "FanfoldLegalGerman";
    })(PaperType = Excel.PaperType || (Excel.PaperType = {}));
    var ReadingOrder;
    (function (ReadingOrder) {
        ReadingOrder.context = "Context";
        ReadingOrder.leftToRight = "LeftToRight";
        ReadingOrder.rightToLeft = "RightToLeft";
    })(ReadingOrder = Excel.ReadingOrder || (Excel.ReadingOrder = {}));
    var BuiltInStyle;
    (function (BuiltInStyle) {
        BuiltInStyle.normal = "Normal";
        BuiltInStyle.comma = "Comma";
        BuiltInStyle.currency = "Currency";
        BuiltInStyle.percent = "Percent";
        BuiltInStyle.wholeComma = "WholeComma";
        BuiltInStyle.wholeDollar = "WholeDollar";
        BuiltInStyle.hlink = "Hlink";
        BuiltInStyle.hlinkTrav = "HlinkTrav";
        BuiltInStyle.note = "Note";
        BuiltInStyle.warningText = "WarningText";
        BuiltInStyle.emphasis1 = "Emphasis1";
        BuiltInStyle.emphasis2 = "Emphasis2";
        BuiltInStyle.emphasis3 = "Emphasis3";
        BuiltInStyle.sheetTitle = "SheetTitle";
        BuiltInStyle.heading1 = "Heading1";
        BuiltInStyle.heading2 = "Heading2";
        BuiltInStyle.heading3 = "Heading3";
        BuiltInStyle.heading4 = "Heading4";
        BuiltInStyle.input = "Input";
        BuiltInStyle.output = "Output";
        BuiltInStyle.calculation = "Calculation";
        BuiltInStyle.checkCell = "CheckCell";
        BuiltInStyle.linkedCell = "LinkedCell";
        BuiltInStyle.total = "Total";
        BuiltInStyle.good = "Good";
        BuiltInStyle.bad = "Bad";
        BuiltInStyle.neutral = "Neutral";
        BuiltInStyle.accent1 = "Accent1";
        BuiltInStyle.accent1_20 = "Accent1_20";
        BuiltInStyle.accent1_40 = "Accent1_40";
        BuiltInStyle.accent1_60 = "Accent1_60";
        BuiltInStyle.accent2 = "Accent2";
        BuiltInStyle.accent2_20 = "Accent2_20";
        BuiltInStyle.accent2_40 = "Accent2_40";
        BuiltInStyle.accent2_60 = "Accent2_60";
        BuiltInStyle.accent3 = "Accent3";
        BuiltInStyle.accent3_20 = "Accent3_20";
        BuiltInStyle.accent3_40 = "Accent3_40";
        BuiltInStyle.accent3_60 = "Accent3_60";
        BuiltInStyle.accent4 = "Accent4";
        BuiltInStyle.accent4_20 = "Accent4_20";
        BuiltInStyle.accent4_40 = "Accent4_40";
        BuiltInStyle.accent4_60 = "Accent4_60";
        BuiltInStyle.accent5 = "Accent5";
        BuiltInStyle.accent5_20 = "Accent5_20";
        BuiltInStyle.accent5_40 = "Accent5_40";
        BuiltInStyle.accent5_60 = "Accent5_60";
        BuiltInStyle.accent6 = "Accent6";
        BuiltInStyle.accent6_20 = "Accent6_20";
        BuiltInStyle.accent6_40 = "Accent6_40";
        BuiltInStyle.accent6_60 = "Accent6_60";
        BuiltInStyle.explanatoryText = "ExplanatoryText";
    })(BuiltInStyle = Excel.BuiltInStyle || (Excel.BuiltInStyle = {}));
    var PrintErrorType;
    (function (PrintErrorType) {
        PrintErrorType.errorsDisplayed = "ErrorsDisplayed";
        PrintErrorType.errorsBlank = "ErrorsBlank";
        PrintErrorType.errorsDash = "ErrorsDash";
        PrintErrorType.errorsNotAvailable = "ErrorsNotAvailable";
    })(PrintErrorType = Excel.PrintErrorType || (Excel.PrintErrorType = {}));
    var WorksheetPositionType;
    (function (WorksheetPositionType) {
        WorksheetPositionType.none = "None";
        WorksheetPositionType.before = "Before";
        WorksheetPositionType.after = "After";
        WorksheetPositionType.beginning = "Beginning";
        WorksheetPositionType.end = "End";
    })(WorksheetPositionType = Excel.WorksheetPositionType || (Excel.WorksheetPositionType = {}));
    var _typeFunctionResult = "FunctionResult";
    var FunctionResult = (function (_super) {
        __extends(FunctionResult, _super);
        function FunctionResult() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(FunctionResult.prototype, "_className", {
            get: function () {
                return "FunctionResult<T>";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionResult.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["error", "value"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionResult.prototype, "error", {
            get: function () {
                _throwIfNotLoaded("error", this._E, _typeFunctionResult, this._isNull);
                return this._E;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FunctionResult.prototype, "value", {
            get: function () {
                _throwIfNotLoaded("value", this._V, _typeFunctionResult, this._isNull);
                return this._V;
            },
            enumerable: true,
            configurable: true
        });
        FunctionResult.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Error"])) {
                this._E = obj["Error"];
            }
            if (!_isUndefined(obj["Value"])) {
                this._V = obj["Value"];
            }
        };
        FunctionResult.prototype.load = function (option) {
            return _load(this, option);
        };
        FunctionResult.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        FunctionResult.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        FunctionResult.prototype.toJSON = function () {
            return _toJson(this, {
                "error": this._E,
                "value": this._V,
            }, {});
        };
        FunctionResult.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return FunctionResult;
    }(OfficeExtension.ClientObject));
    Excel.FunctionResult = FunctionResult;
    var _typeFunctions = "Functions";
    var Functions = (function (_super) {
        __extends(Functions, _super);
        function Functions() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(Functions.prototype, "_className", {
            get: function () {
                return "Functions";
            },
            enumerable: true,
            configurable: true
        });
        Functions.prototype.abs = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Abs", 0, [number], false, true, null, false));
        };
        Functions.prototype.accrInt = function (issue, firstInterest, settlement, rate, par, frequency, basis, calcMethod) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "AccrInt", 0, [issue, firstInterest, settlement, rate, par, frequency, basis, calcMethod], false, true, null, false));
        };
        Functions.prototype.accrIntM = function (issue, settlement, rate, par, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "AccrIntM", 0, [issue, settlement, rate, par, basis], false, true, null, false));
        };
        Functions.prototype.acos = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Acos", 0, [number], false, true, null, false));
        };
        Functions.prototype.acosh = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Acosh", 0, [number], false, true, null, false));
        };
        Functions.prototype.acot = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Acot", 0, [number], false, true, null, false));
        };
        Functions.prototype.acoth = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Acoth", 0, [number], false, true, null, false));
        };
        Functions.prototype.amorDegrc = function (cost, datePurchased, firstPeriod, salvage, period, rate, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "AmorDegrc", 0, [cost, datePurchased, firstPeriod, salvage, period, rate, basis], false, true, null, false));
        };
        Functions.prototype.amorLinc = function (cost, datePurchased, firstPeriod, salvage, period, rate, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "AmorLinc", 0, [cost, datePurchased, firstPeriod, salvage, period, rate, basis], false, true, null, false));
        };
        Functions.prototype.and = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "And", 0, [values], false, true, null, false));
        };
        Functions.prototype.arabic = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Arabic", 0, [text], false, true, null, false));
        };
        Functions.prototype.areas = function (reference) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Areas", 0, [reference], false, true, null, false));
        };
        Functions.prototype.asc = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Asc", 0, [text], false, true, null, false));
        };
        Functions.prototype.asin = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Asin", 0, [number], false, true, null, false));
        };
        Functions.prototype.asinh = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Asinh", 0, [number], false, true, null, false));
        };
        Functions.prototype.atan = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Atan", 0, [number], false, true, null, false));
        };
        Functions.prototype.atan2 = function (xNum, yNum) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Atan2", 0, [xNum, yNum], false, true, null, false));
        };
        Functions.prototype.atanh = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Atanh", 0, [number], false, true, null, false));
        };
        Functions.prototype.aveDev = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "AveDev", 0, [values], false, true, null, false));
        };
        Functions.prototype.average = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Average", 0, [values], false, true, null, false));
        };
        Functions.prototype.averageA = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "AverageA", 0, [values], false, true, null, false));
        };
        Functions.prototype.averageIf = function (range, criteria, averageRange) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "AverageIf", 0, [range, criteria, averageRange], false, true, null, false));
        };
        Functions.prototype.averageIfs = function (averageRange) {
            var values = [];
            for (var _a = 1; _a < arguments.length; _a++) {
                values[_a - 1] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "AverageIfs", 0, [averageRange, values], false, true, null, false));
        };
        Functions.prototype.bahtText = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "BahtText", 0, [number], false, true, null, false));
        };
        Functions.prototype.base = function (number, radix, minLength) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Base", 0, [number, radix, minLength], false, true, null, false));
        };
        Functions.prototype.besselI = function (x, n) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "BesselI", 0, [x, n], false, true, null, false));
        };
        Functions.prototype.besselJ = function (x, n) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "BesselJ", 0, [x, n], false, true, null, false));
        };
        Functions.prototype.besselK = function (x, n) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "BesselK", 0, [x, n], false, true, null, false));
        };
        Functions.prototype.besselY = function (x, n) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "BesselY", 0, [x, n], false, true, null, false));
        };
        Functions.prototype.beta_Dist = function (x, alpha, beta, cumulative, A, B) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Beta_Dist", 0, [x, alpha, beta, cumulative, A, B], false, true, null, false));
        };
        Functions.prototype.beta_Inv = function (probability, alpha, beta, A, B) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Beta_Inv", 0, [probability, alpha, beta, A, B], false, true, null, false));
        };
        Functions.prototype.bin2Dec = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Bin2Dec", 0, [number], false, true, null, false));
        };
        Functions.prototype.bin2Hex = function (number, places) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Bin2Hex", 0, [number, places], false, true, null, false));
        };
        Functions.prototype.bin2Oct = function (number, places) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Bin2Oct", 0, [number, places], false, true, null, false));
        };
        Functions.prototype.binom_Dist = function (numberS, trials, probabilityS, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Binom_Dist", 0, [numberS, trials, probabilityS, cumulative], false, true, null, false));
        };
        Functions.prototype.binom_Dist_Range = function (trials, probabilityS, numberS, numberS2) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Binom_Dist_Range", 0, [trials, probabilityS, numberS, numberS2], false, true, null, false));
        };
        Functions.prototype.binom_Inv = function (trials, probabilityS, alpha) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Binom_Inv", 0, [trials, probabilityS, alpha], false, true, null, false));
        };
        Functions.prototype.bitand = function (number1, number2) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Bitand", 0, [number1, number2], false, true, null, false));
        };
        Functions.prototype.bitlshift = function (number, shiftAmount) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Bitlshift", 0, [number, shiftAmount], false, true, null, false));
        };
        Functions.prototype.bitor = function (number1, number2) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Bitor", 0, [number1, number2], false, true, null, false));
        };
        Functions.prototype.bitrshift = function (number, shiftAmount) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Bitrshift", 0, [number, shiftAmount], false, true, null, false));
        };
        Functions.prototype.bitxor = function (number1, number2) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Bitxor", 0, [number1, number2], false, true, null, false));
        };
        Functions.prototype.ceiling_Math = function (number, significance, mode) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Ceiling_Math", 0, [number, significance, mode], false, true, null, false));
        };
        Functions.prototype.ceiling_Precise = function (number, significance) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Ceiling_Precise", 0, [number, significance], false, true, null, false));
        };
        Functions.prototype.char = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Char", 0, [number], false, true, null, false));
        };
        Functions.prototype.chiSq_Dist = function (x, degFreedom, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ChiSq_Dist", 0, [x, degFreedom, cumulative], false, true, null, false));
        };
        Functions.prototype.chiSq_Dist_RT = function (x, degFreedom) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ChiSq_Dist_RT", 0, [x, degFreedom], false, true, null, false));
        };
        Functions.prototype.chiSq_Inv = function (probability, degFreedom) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ChiSq_Inv", 0, [probability, degFreedom], false, true, null, false));
        };
        Functions.prototype.chiSq_Inv_RT = function (probability, degFreedom) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ChiSq_Inv_RT", 0, [probability, degFreedom], false, true, null, false));
        };
        Functions.prototype.choose = function (indexNum) {
            var values = [];
            for (var _a = 1; _a < arguments.length; _a++) {
                values[_a - 1] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Choose", 0, [indexNum, values], false, true, null, false));
        };
        Functions.prototype.clean = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Clean", 0, [text], false, true, null, false));
        };
        Functions.prototype.code = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Code", 0, [text], false, true, null, false));
        };
        Functions.prototype.columns = function (array) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Columns", 0, [array], false, true, null, false));
        };
        Functions.prototype.combin = function (number, numberChosen) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Combin", 0, [number, numberChosen], false, true, null, false));
        };
        Functions.prototype.combina = function (number, numberChosen) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Combina", 0, [number, numberChosen], false, true, null, false));
        };
        Functions.prototype.complex = function (realNum, iNum, suffix) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Complex", 0, [realNum, iNum, suffix], false, true, null, false));
        };
        Functions.prototype.concatenate = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Concatenate", 0, [values], false, true, null, false));
        };
        Functions.prototype.confidence_Norm = function (alpha, standardDev, size) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Confidence_Norm", 0, [alpha, standardDev, size], false, true, null, false));
        };
        Functions.prototype.confidence_T = function (alpha, standardDev, size) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Confidence_T", 0, [alpha, standardDev, size], false, true, null, false));
        };
        Functions.prototype.convert = function (number, fromUnit, toUnit) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Convert", 0, [number, fromUnit, toUnit], false, true, null, false));
        };
        Functions.prototype.cos = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Cos", 0, [number], false, true, null, false));
        };
        Functions.prototype.cosh = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Cosh", 0, [number], false, true, null, false));
        };
        Functions.prototype.cot = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Cot", 0, [number], false, true, null, false));
        };
        Functions.prototype.coth = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Coth", 0, [number], false, true, null, false));
        };
        Functions.prototype.count = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Count", 0, [values], false, true, null, false));
        };
        Functions.prototype.countA = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "CountA", 0, [values], false, true, null, false));
        };
        Functions.prototype.countBlank = function (range) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "CountBlank", 0, [range], false, true, null, false));
        };
        Functions.prototype.countIf = function (range, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "CountIf", 0, [range, criteria], false, true, null, false));
        };
        Functions.prototype.countIfs = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "CountIfs", 0, [values], false, true, null, false));
        };
        Functions.prototype.coupDayBs = function (settlement, maturity, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "CoupDayBs", 0, [settlement, maturity, frequency, basis], false, true, null, false));
        };
        Functions.prototype.coupDays = function (settlement, maturity, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "CoupDays", 0, [settlement, maturity, frequency, basis], false, true, null, false));
        };
        Functions.prototype.coupDaysNc = function (settlement, maturity, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "CoupDaysNc", 0, [settlement, maturity, frequency, basis], false, true, null, false));
        };
        Functions.prototype.coupNcd = function (settlement, maturity, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "CoupNcd", 0, [settlement, maturity, frequency, basis], false, true, null, false));
        };
        Functions.prototype.coupNum = function (settlement, maturity, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "CoupNum", 0, [settlement, maturity, frequency, basis], false, true, null, false));
        };
        Functions.prototype.coupPcd = function (settlement, maturity, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "CoupPcd", 0, [settlement, maturity, frequency, basis], false, true, null, false));
        };
        Functions.prototype.csc = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Csc", 0, [number], false, true, null, false));
        };
        Functions.prototype.csch = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Csch", 0, [number], false, true, null, false));
        };
        Functions.prototype.cumIPmt = function (rate, nper, pv, startPeriod, endPeriod, type) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "CumIPmt", 0, [rate, nper, pv, startPeriod, endPeriod, type], false, true, null, false));
        };
        Functions.prototype.cumPrinc = function (rate, nper, pv, startPeriod, endPeriod, type) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "CumPrinc", 0, [rate, nper, pv, startPeriod, endPeriod, type], false, true, null, false));
        };
        Functions.prototype.daverage = function (database, field, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DAverage", 0, [database, field, criteria], false, true, null, false));
        };
        Functions.prototype.dcount = function (database, field, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DCount", 0, [database, field, criteria], false, true, null, false));
        };
        Functions.prototype.dcountA = function (database, field, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DCountA", 0, [database, field, criteria], false, true, null, false));
        };
        Functions.prototype.dget = function (database, field, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DGet", 0, [database, field, criteria], false, true, null, false));
        };
        Functions.prototype.dmax = function (database, field, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DMax", 0, [database, field, criteria], false, true, null, false));
        };
        Functions.prototype.dmin = function (database, field, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DMin", 0, [database, field, criteria], false, true, null, false));
        };
        Functions.prototype.dproduct = function (database, field, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DProduct", 0, [database, field, criteria], false, true, null, false));
        };
        Functions.prototype.dstDev = function (database, field, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DStDev", 0, [database, field, criteria], false, true, null, false));
        };
        Functions.prototype.dstDevP = function (database, field, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DStDevP", 0, [database, field, criteria], false, true, null, false));
        };
        Functions.prototype.dsum = function (database, field, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DSum", 0, [database, field, criteria], false, true, null, false));
        };
        Functions.prototype.dvar = function (database, field, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DVar", 0, [database, field, criteria], false, true, null, false));
        };
        Functions.prototype.dvarP = function (database, field, criteria) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DVarP", 0, [database, field, criteria], false, true, null, false));
        };
        Functions.prototype.date = function (year, month, day) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Date", 0, [year, month, day], false, true, null, false));
        };
        Functions.prototype.datevalue = function (dateText) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Datevalue", 0, [dateText], false, true, null, false));
        };
        Functions.prototype.day = function (serialNumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Day", 0, [serialNumber], false, true, null, false));
        };
        Functions.prototype.days = function (endDate, startDate) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Days", 0, [endDate, startDate], false, true, null, false));
        };
        Functions.prototype.days360 = function (startDate, endDate, method) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Days360", 0, [startDate, endDate, method], false, true, null, false));
        };
        Functions.prototype.db = function (cost, salvage, life, period, month) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Db", 0, [cost, salvage, life, period, month], false, true, null, false));
        };
        Functions.prototype.dbcs = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Dbcs", 0, [text], false, true, null, false));
        };
        Functions.prototype.ddb = function (cost, salvage, life, period, factor) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Ddb", 0, [cost, salvage, life, period, factor], false, true, null, false));
        };
        Functions.prototype.dec2Bin = function (number, places) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Dec2Bin", 0, [number, places], false, true, null, false));
        };
        Functions.prototype.dec2Hex = function (number, places) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Dec2Hex", 0, [number, places], false, true, null, false));
        };
        Functions.prototype.dec2Oct = function (number, places) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Dec2Oct", 0, [number, places], false, true, null, false));
        };
        Functions.prototype.decimal = function (number, radix) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Decimal", 0, [number, radix], false, true, null, false));
        };
        Functions.prototype.degrees = function (angle) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Degrees", 0, [angle], false, true, null, false));
        };
        Functions.prototype.delta = function (number1, number2) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Delta", 0, [number1, number2], false, true, null, false));
        };
        Functions.prototype.devSq = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DevSq", 0, [values], false, true, null, false));
        };
        Functions.prototype.disc = function (settlement, maturity, pr, redemption, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Disc", 0, [settlement, maturity, pr, redemption, basis], false, true, null, false));
        };
        Functions.prototype.dollar = function (number, decimals) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Dollar", 0, [number, decimals], false, true, null, false));
        };
        Functions.prototype.dollarDe = function (fractionalDollar, fraction) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DollarDe", 0, [fractionalDollar, fraction], false, true, null, false));
        };
        Functions.prototype.dollarFr = function (decimalDollar, fraction) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "DollarFr", 0, [decimalDollar, fraction], false, true, null, false));
        };
        Functions.prototype.duration = function (settlement, maturity, coupon, yld, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Duration", 0, [settlement, maturity, coupon, yld, frequency, basis], false, true, null, false));
        };
        Functions.prototype.ecma_Ceiling = function (number, significance) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ECMA_Ceiling", 0, [number, significance], false, true, null, false));
        };
        Functions.prototype.edate = function (startDate, months) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "EDate", 0, [startDate, months], false, true, null, false));
        };
        Functions.prototype.effect = function (nominalRate, npery) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Effect", 0, [nominalRate, npery], false, true, null, false));
        };
        Functions.prototype.eoMonth = function (startDate, months) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "EoMonth", 0, [startDate, months], false, true, null, false));
        };
        Functions.prototype.erf = function (lowerLimit, upperLimit) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Erf", 0, [lowerLimit, upperLimit], false, true, null, false));
        };
        Functions.prototype.erfC = function (x) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ErfC", 0, [x], false, true, null, false));
        };
        Functions.prototype.erfC_Precise = function (X) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ErfC_Precise", 0, [X], false, true, null, false));
        };
        Functions.prototype.erf_Precise = function (X) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Erf_Precise", 0, [X], false, true, null, false));
        };
        Functions.prototype.error_Type = function (errorVal) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Error_Type", 0, [errorVal], false, true, null, false));
        };
        Functions.prototype.even = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Even", 0, [number], false, true, null, false));
        };
        Functions.prototype.exact = function (text1, text2) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Exact", 0, [text1, text2], false, true, null, false));
        };
        Functions.prototype.exp = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Exp", 0, [number], false, true, null, false));
        };
        Functions.prototype.expon_Dist = function (x, lambda, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Expon_Dist", 0, [x, lambda, cumulative], false, true, null, false));
        };
        Functions.prototype.fvschedule = function (principal, schedule) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "FVSchedule", 0, [principal, schedule], false, true, null, false));
        };
        Functions.prototype.f_Dist = function (x, degFreedom1, degFreedom2, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "F_Dist", 0, [x, degFreedom1, degFreedom2, cumulative], false, true, null, false));
        };
        Functions.prototype.f_Dist_RT = function (x, degFreedom1, degFreedom2) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "F_Dist_RT", 0, [x, degFreedom1, degFreedom2], false, true, null, false));
        };
        Functions.prototype.f_Inv = function (probability, degFreedom1, degFreedom2) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "F_Inv", 0, [probability, degFreedom1, degFreedom2], false, true, null, false));
        };
        Functions.prototype.f_Inv_RT = function (probability, degFreedom1, degFreedom2) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "F_Inv_RT", 0, [probability, degFreedom1, degFreedom2], false, true, null, false));
        };
        Functions.prototype.fact = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Fact", 0, [number], false, true, null, false));
        };
        Functions.prototype.factDouble = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "FactDouble", 0, [number], false, true, null, false));
        };
        Functions.prototype.false = function () {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "False", 0, [], false, true, null, false));
        };
        Functions.prototype.find = function (findText, withinText, startNum) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Find", 0, [findText, withinText, startNum], false, true, null, false));
        };
        Functions.prototype.findB = function (findText, withinText, startNum) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "FindB", 0, [findText, withinText, startNum], false, true, null, false));
        };
        Functions.prototype.fisher = function (x) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Fisher", 0, [x], false, true, null, false));
        };
        Functions.prototype.fisherInv = function (y) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "FisherInv", 0, [y], false, true, null, false));
        };
        Functions.prototype.fixed = function (number, decimals, noCommas) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Fixed", 0, [number, decimals, noCommas], false, true, null, false));
        };
        Functions.prototype.floor_Math = function (number, significance, mode) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Floor_Math", 0, [number, significance, mode], false, true, null, false));
        };
        Functions.prototype.floor_Precise = function (number, significance) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Floor_Precise", 0, [number, significance], false, true, null, false));
        };
        Functions.prototype.fv = function (rate, nper, pmt, pv, type) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Fv", 0, [rate, nper, pmt, pv, type], false, true, null, false));
        };
        Functions.prototype.gamma = function (x) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Gamma", 0, [x], false, true, null, false));
        };
        Functions.prototype.gammaLn = function (x) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "GammaLn", 0, [x], false, true, null, false));
        };
        Functions.prototype.gammaLn_Precise = function (x) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "GammaLn_Precise", 0, [x], false, true, null, false));
        };
        Functions.prototype.gamma_Dist = function (x, alpha, beta, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Gamma_Dist", 0, [x, alpha, beta, cumulative], false, true, null, false));
        };
        Functions.prototype.gamma_Inv = function (probability, alpha, beta) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Gamma_Inv", 0, [probability, alpha, beta], false, true, null, false));
        };
        Functions.prototype.gauss = function (x) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Gauss", 0, [x], false, true, null, false));
        };
        Functions.prototype.gcd = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Gcd", 0, [values], false, true, null, false));
        };
        Functions.prototype.geStep = function (number, step) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "GeStep", 0, [number, step], false, true, null, false));
        };
        Functions.prototype.geoMean = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "GeoMean", 0, [values], false, true, null, false));
        };
        Functions.prototype.hlookup = function (lookupValue, tableArray, rowIndexNum, rangeLookup) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "HLookup", 0, [lookupValue, tableArray, rowIndexNum, rangeLookup], false, true, null, false));
        };
        Functions.prototype.harMean = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "HarMean", 0, [values], false, true, null, false));
        };
        Functions.prototype.hex2Bin = function (number, places) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Hex2Bin", 0, [number, places], false, true, null, false));
        };
        Functions.prototype.hex2Dec = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Hex2Dec", 0, [number], false, true, null, false));
        };
        Functions.prototype.hex2Oct = function (number, places) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Hex2Oct", 0, [number, places], false, true, null, false));
        };
        Functions.prototype.hour = function (serialNumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Hour", 0, [serialNumber], false, true, null, false));
        };
        Functions.prototype.hypGeom_Dist = function (sampleS, numberSample, populationS, numberPop, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "HypGeom_Dist", 0, [sampleS, numberSample, populationS, numberPop, cumulative], false, true, null, false));
        };
        Functions.prototype.hyperlink = function (linkLocation, friendlyName) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Hyperlink", 0, [linkLocation, friendlyName], false, true, null, false));
        };
        Functions.prototype.iso_Ceiling = function (number, significance) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ISO_Ceiling", 0, [number, significance], false, true, null, false));
        };
        Functions.prototype.if = function (logicalTest, valueIfTrue, valueIfFalse) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "If", 0, [logicalTest, valueIfTrue, valueIfFalse], false, true, null, false));
        };
        Functions.prototype.imAbs = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImAbs", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imArgument = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImArgument", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imConjugate = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImConjugate", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imCos = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImCos", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imCosh = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImCosh", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imCot = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImCot", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imCsc = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImCsc", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imCsch = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImCsch", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imDiv = function (inumber1, inumber2) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImDiv", 0, [inumber1, inumber2], false, true, null, false));
        };
        Functions.prototype.imExp = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImExp", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imLn = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImLn", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imLog10 = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImLog10", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imLog2 = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImLog2", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imPower = function (inumber, number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImPower", 0, [inumber, number], false, true, null, false));
        };
        Functions.prototype.imProduct = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImProduct", 0, [values], false, true, null, false));
        };
        Functions.prototype.imReal = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImReal", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imSec = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImSec", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imSech = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImSech", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imSin = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImSin", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imSinh = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImSinh", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imSqrt = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImSqrt", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imSub = function (inumber1, inumber2) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImSub", 0, [inumber1, inumber2], false, true, null, false));
        };
        Functions.prototype.imSum = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImSum", 0, [values], false, true, null, false));
        };
        Functions.prototype.imTan = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ImTan", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.imaginary = function (inumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Imaginary", 0, [inumber], false, true, null, false));
        };
        Functions.prototype.int = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Int", 0, [number], false, true, null, false));
        };
        Functions.prototype.intRate = function (settlement, maturity, investment, redemption, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "IntRate", 0, [settlement, maturity, investment, redemption, basis], false, true, null, false));
        };
        Functions.prototype.ipmt = function (rate, per, nper, pv, fv, type) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Ipmt", 0, [rate, per, nper, pv, fv, type], false, true, null, false));
        };
        Functions.prototype.irr = function (values, guess) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Irr", 0, [values, guess], false, true, null, false));
        };
        Functions.prototype.isErr = function (value) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "IsErr", 0, [value], false, true, null, false));
        };
        Functions.prototype.isError = function (value) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "IsError", 0, [value], false, true, null, false));
        };
        Functions.prototype.isEven = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "IsEven", 0, [number], false, true, null, false));
        };
        Functions.prototype.isFormula = function (reference) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "IsFormula", 0, [reference], false, true, null, false));
        };
        Functions.prototype.isLogical = function (value) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "IsLogical", 0, [value], false, true, null, false));
        };
        Functions.prototype.isNA = function (value) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "IsNA", 0, [value], false, true, null, false));
        };
        Functions.prototype.isNonText = function (value) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "IsNonText", 0, [value], false, true, null, false));
        };
        Functions.prototype.isNumber = function (value) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "IsNumber", 0, [value], false, true, null, false));
        };
        Functions.prototype.isOdd = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "IsOdd", 0, [number], false, true, null, false));
        };
        Functions.prototype.isText = function (value) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "IsText", 0, [value], false, true, null, false));
        };
        Functions.prototype.isoWeekNum = function (date) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "IsoWeekNum", 0, [date], false, true, null, false));
        };
        Functions.prototype.ispmt = function (rate, per, nper, pv) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Ispmt", 0, [rate, per, nper, pv], false, true, null, false));
        };
        Functions.prototype.isref = function (value) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Isref", 0, [value], false, true, null, false));
        };
        Functions.prototype.kurt = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Kurt", 0, [values], false, true, null, false));
        };
        Functions.prototype.large = function (array, k) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Large", 0, [array, k], false, true, null, false));
        };
        Functions.prototype.lcm = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Lcm", 0, [values], false, true, null, false));
        };
        Functions.prototype.left = function (text, numChars) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Left", 0, [text, numChars], false, true, null, false));
        };
        Functions.prototype.leftb = function (text, numBytes) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Leftb", 0, [text, numBytes], false, true, null, false));
        };
        Functions.prototype.len = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Len", 0, [text], false, true, null, false));
        };
        Functions.prototype.lenb = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Lenb", 0, [text], false, true, null, false));
        };
        Functions.prototype.ln = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Ln", 0, [number], false, true, null, false));
        };
        Functions.prototype.log = function (number, base) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Log", 0, [number, base], false, true, null, false));
        };
        Functions.prototype.log10 = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Log10", 0, [number], false, true, null, false));
        };
        Functions.prototype.logNorm_Dist = function (x, mean, standardDev, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "LogNorm_Dist", 0, [x, mean, standardDev, cumulative], false, true, null, false));
        };
        Functions.prototype.logNorm_Inv = function (probability, mean, standardDev) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "LogNorm_Inv", 0, [probability, mean, standardDev], false, true, null, false));
        };
        Functions.prototype.lookup = function (lookupValue, lookupVector, resultVector) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Lookup", 0, [lookupValue, lookupVector, resultVector], false, true, null, false));
        };
        Functions.prototype.lower = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Lower", 0, [text], false, true, null, false));
        };
        Functions.prototype.mduration = function (settlement, maturity, coupon, yld, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "MDuration", 0, [settlement, maturity, coupon, yld, frequency, basis], false, true, null, false));
        };
        Functions.prototype.mirr = function (values, financeRate, reinvestRate) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "MIrr", 0, [values, financeRate, reinvestRate], false, true, null, false));
        };
        Functions.prototype.mround = function (number, multiple) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "MRound", 0, [number, multiple], false, true, null, false));
        };
        Functions.prototype.match = function (lookupValue, lookupArray, matchType) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Match", 0, [lookupValue, lookupArray, matchType], false, true, null, false));
        };
        Functions.prototype.max = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Max", 0, [values], false, true, null, false));
        };
        Functions.prototype.maxA = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "MaxA", 0, [values], false, true, null, false));
        };
        Functions.prototype.median = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Median", 0, [values], false, true, null, false));
        };
        Functions.prototype.mid = function (text, startNum, numChars) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Mid", 0, [text, startNum, numChars], false, true, null, false));
        };
        Functions.prototype.midb = function (text, startNum, numBytes) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Midb", 0, [text, startNum, numBytes], false, true, null, false));
        };
        Functions.prototype.min = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Min", 0, [values], false, true, null, false));
        };
        Functions.prototype.minA = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "MinA", 0, [values], false, true, null, false));
        };
        Functions.prototype.minute = function (serialNumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Minute", 0, [serialNumber], false, true, null, false));
        };
        Functions.prototype.mod = function (number, divisor) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Mod", 0, [number, divisor], false, true, null, false));
        };
        Functions.prototype.month = function (serialNumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Month", 0, [serialNumber], false, true, null, false));
        };
        Functions.prototype.multiNomial = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "MultiNomial", 0, [values], false, true, null, false));
        };
        Functions.prototype.n = function (value) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "N", 0, [value], false, true, null, false));
        };
        Functions.prototype.nper = function (rate, pmt, pv, fv, type) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "NPer", 0, [rate, pmt, pv, fv, type], false, true, null, false));
        };
        Functions.prototype.na = function () {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Na", 0, [], false, true, null, false));
        };
        Functions.prototype.negBinom_Dist = function (numberF, numberS, probabilityS, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "NegBinom_Dist", 0, [numberF, numberS, probabilityS, cumulative], false, true, null, false));
        };
        Functions.prototype.networkDays = function (startDate, endDate, holidays) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "NetworkDays", 0, [startDate, endDate, holidays], false, true, null, false));
        };
        Functions.prototype.networkDays_Intl = function (startDate, endDate, weekend, holidays) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "NetworkDays_Intl", 0, [startDate, endDate, weekend, holidays], false, true, null, false));
        };
        Functions.prototype.nominal = function (effectRate, npery) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Nominal", 0, [effectRate, npery], false, true, null, false));
        };
        Functions.prototype.norm_Dist = function (x, mean, standardDev, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Norm_Dist", 0, [x, mean, standardDev, cumulative], false, true, null, false));
        };
        Functions.prototype.norm_Inv = function (probability, mean, standardDev) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Norm_Inv", 0, [probability, mean, standardDev], false, true, null, false));
        };
        Functions.prototype.norm_S_Dist = function (z, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Norm_S_Dist", 0, [z, cumulative], false, true, null, false));
        };
        Functions.prototype.norm_S_Inv = function (probability) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Norm_S_Inv", 0, [probability], false, true, null, false));
        };
        Functions.prototype.not = function (logical) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Not", 0, [logical], false, true, null, false));
        };
        Functions.prototype.now = function () {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Now", 0, [], false, true, null, false));
        };
        Functions.prototype.npv = function (rate) {
            var values = [];
            for (var _a = 1; _a < arguments.length; _a++) {
                values[_a - 1] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Npv", 0, [rate, values], false, true, null, false));
        };
        Functions.prototype.numberValue = function (text, decimalSeparator, groupSeparator) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "NumberValue", 0, [text, decimalSeparator, groupSeparator], false, true, null, false));
        };
        Functions.prototype.oct2Bin = function (number, places) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Oct2Bin", 0, [number, places], false, true, null, false));
        };
        Functions.prototype.oct2Dec = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Oct2Dec", 0, [number], false, true, null, false));
        };
        Functions.prototype.oct2Hex = function (number, places) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Oct2Hex", 0, [number, places], false, true, null, false));
        };
        Functions.prototype.odd = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Odd", 0, [number], false, true, null, false));
        };
        Functions.prototype.oddFPrice = function (settlement, maturity, issue, firstCoupon, rate, yld, redemption, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "OddFPrice", 0, [settlement, maturity, issue, firstCoupon, rate, yld, redemption, frequency, basis], false, true, null, false));
        };
        Functions.prototype.oddFYield = function (settlement, maturity, issue, firstCoupon, rate, pr, redemption, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "OddFYield", 0, [settlement, maturity, issue, firstCoupon, rate, pr, redemption, frequency, basis], false, true, null, false));
        };
        Functions.prototype.oddLPrice = function (settlement, maturity, lastInterest, rate, yld, redemption, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "OddLPrice", 0, [settlement, maturity, lastInterest, rate, yld, redemption, frequency, basis], false, true, null, false));
        };
        Functions.prototype.oddLYield = function (settlement, maturity, lastInterest, rate, pr, redemption, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "OddLYield", 0, [settlement, maturity, lastInterest, rate, pr, redemption, frequency, basis], false, true, null, false));
        };
        Functions.prototype.or = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Or", 0, [values], false, true, null, false));
        };
        Functions.prototype.pduration = function (rate, pv, fv) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "PDuration", 0, [rate, pv, fv], false, true, null, false));
        };
        Functions.prototype.percentRank_Exc = function (array, x, significance) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "PercentRank_Exc", 0, [array, x, significance], false, true, null, false));
        };
        Functions.prototype.percentRank_Inc = function (array, x, significance) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "PercentRank_Inc", 0, [array, x, significance], false, true, null, false));
        };
        Functions.prototype.percentile_Exc = function (array, k) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Percentile_Exc", 0, [array, k], false, true, null, false));
        };
        Functions.prototype.percentile_Inc = function (array, k) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Percentile_Inc", 0, [array, k], false, true, null, false));
        };
        Functions.prototype.permut = function (number, numberChosen) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Permut", 0, [number, numberChosen], false, true, null, false));
        };
        Functions.prototype.permutationa = function (number, numberChosen) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Permutationa", 0, [number, numberChosen], false, true, null, false));
        };
        Functions.prototype.phi = function (x) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Phi", 0, [x], false, true, null, false));
        };
        Functions.prototype.pi = function () {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Pi", 0, [], false, true, null, false));
        };
        Functions.prototype.pmt = function (rate, nper, pv, fv, type) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Pmt", 0, [rate, nper, pv, fv, type], false, true, null, false));
        };
        Functions.prototype.poisson_Dist = function (x, mean, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Poisson_Dist", 0, [x, mean, cumulative], false, true, null, false));
        };
        Functions.prototype.power = function (number, power) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Power", 0, [number, power], false, true, null, false));
        };
        Functions.prototype.ppmt = function (rate, per, nper, pv, fv, type) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Ppmt", 0, [rate, per, nper, pv, fv, type], false, true, null, false));
        };
        Functions.prototype.price = function (settlement, maturity, rate, yld, redemption, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Price", 0, [settlement, maturity, rate, yld, redemption, frequency, basis], false, true, null, false));
        };
        Functions.prototype.priceDisc = function (settlement, maturity, discount, redemption, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "PriceDisc", 0, [settlement, maturity, discount, redemption, basis], false, true, null, false));
        };
        Functions.prototype.priceMat = function (settlement, maturity, issue, rate, yld, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "PriceMat", 0, [settlement, maturity, issue, rate, yld, basis], false, true, null, false));
        };
        Functions.prototype.product = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Product", 0, [values], false, true, null, false));
        };
        Functions.prototype.proper = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Proper", 0, [text], false, true, null, false));
        };
        Functions.prototype.pv = function (rate, nper, pmt, fv, type) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Pv", 0, [rate, nper, pmt, fv, type], false, true, null, false));
        };
        Functions.prototype.quartile_Exc = function (array, quart) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Quartile_Exc", 0, [array, quart], false, true, null, false));
        };
        Functions.prototype.quartile_Inc = function (array, quart) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Quartile_Inc", 0, [array, quart], false, true, null, false));
        };
        Functions.prototype.quotient = function (numerator, denominator) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Quotient", 0, [numerator, denominator], false, true, null, false));
        };
        Functions.prototype.radians = function (angle) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Radians", 0, [angle], false, true, null, false));
        };
        Functions.prototype.rand = function () {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Rand", 0, [], false, true, null, false));
        };
        Functions.prototype.randBetween = function (bottom, top) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "RandBetween", 0, [bottom, top], false, true, null, false));
        };
        Functions.prototype.rank_Avg = function (number, ref, order) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Rank_Avg", 0, [number, ref, order], false, true, null, false));
        };
        Functions.prototype.rank_Eq = function (number, ref, order) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Rank_Eq", 0, [number, ref, order], false, true, null, false));
        };
        Functions.prototype.rate = function (nper, pmt, pv, fv, type, guess) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Rate", 0, [nper, pmt, pv, fv, type, guess], false, true, null, false));
        };
        Functions.prototype.received = function (settlement, maturity, investment, discount, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Received", 0, [settlement, maturity, investment, discount, basis], false, true, null, false));
        };
        Functions.prototype.replace = function (oldText, startNum, numChars, newText) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Replace", 0, [oldText, startNum, numChars, newText], false, true, null, false));
        };
        Functions.prototype.replaceB = function (oldText, startNum, numBytes, newText) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "ReplaceB", 0, [oldText, startNum, numBytes, newText], false, true, null, false));
        };
        Functions.prototype.rept = function (text, numberTimes) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Rept", 0, [text, numberTimes], false, true, null, false));
        };
        Functions.prototype.right = function (text, numChars) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Right", 0, [text, numChars], false, true, null, false));
        };
        Functions.prototype.rightb = function (text, numBytes) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Rightb", 0, [text, numBytes], false, true, null, false));
        };
        Functions.prototype.roman = function (number, form) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Roman", 0, [number, form], false, true, null, false));
        };
        Functions.prototype.round = function (number, numDigits) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Round", 0, [number, numDigits], false, true, null, false));
        };
        Functions.prototype.roundDown = function (number, numDigits) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "RoundDown", 0, [number, numDigits], false, true, null, false));
        };
        Functions.prototype.roundUp = function (number, numDigits) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "RoundUp", 0, [number, numDigits], false, true, null, false));
        };
        Functions.prototype.rows = function (array) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Rows", 0, [array], false, true, null, false));
        };
        Functions.prototype.rri = function (nper, pv, fv) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Rri", 0, [nper, pv, fv], false, true, null, false));
        };
        Functions.prototype.sec = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Sec", 0, [number], false, true, null, false));
        };
        Functions.prototype.sech = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Sech", 0, [number], false, true, null, false));
        };
        Functions.prototype.second = function (serialNumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Second", 0, [serialNumber], false, true, null, false));
        };
        Functions.prototype.seriesSum = function (x, n, m, coefficients) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "SeriesSum", 0, [x, n, m, coefficients], false, true, null, false));
        };
        Functions.prototype.sheet = function (value) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Sheet", 0, [value], false, true, null, false));
        };
        Functions.prototype.sheets = function (reference) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Sheets", 0, [reference], false, true, null, false));
        };
        Functions.prototype.sign = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Sign", 0, [number], false, true, null, false));
        };
        Functions.prototype.sin = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Sin", 0, [number], false, true, null, false));
        };
        Functions.prototype.sinh = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Sinh", 0, [number], false, true, null, false));
        };
        Functions.prototype.skew = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Skew", 0, [values], false, true, null, false));
        };
        Functions.prototype.skew_p = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Skew_p", 0, [values], false, true, null, false));
        };
        Functions.prototype.sln = function (cost, salvage, life) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Sln", 0, [cost, salvage, life], false, true, null, false));
        };
        Functions.prototype.small = function (array, k) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Small", 0, [array, k], false, true, null, false));
        };
        Functions.prototype.sqrt = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Sqrt", 0, [number], false, true, null, false));
        };
        Functions.prototype.sqrtPi = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "SqrtPi", 0, [number], false, true, null, false));
        };
        Functions.prototype.stDevA = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "StDevA", 0, [values], false, true, null, false));
        };
        Functions.prototype.stDevPA = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "StDevPA", 0, [values], false, true, null, false));
        };
        Functions.prototype.stDev_P = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "StDev_P", 0, [values], false, true, null, false));
        };
        Functions.prototype.stDev_S = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "StDev_S", 0, [values], false, true, null, false));
        };
        Functions.prototype.standardize = function (x, mean, standardDev) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Standardize", 0, [x, mean, standardDev], false, true, null, false));
        };
        Functions.prototype.substitute = function (text, oldText, newText, instanceNum) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Substitute", 0, [text, oldText, newText, instanceNum], false, true, null, false));
        };
        Functions.prototype.subtotal = function (functionNum) {
            var values = [];
            for (var _a = 1; _a < arguments.length; _a++) {
                values[_a - 1] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Subtotal", 0, [functionNum, values], false, true, null, false));
        };
        Functions.prototype.sum = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Sum", 0, [values], false, true, null, false));
        };
        Functions.prototype.sumIf = function (range, criteria, sumRange) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "SumIf", 0, [range, criteria, sumRange], false, true, null, false));
        };
        Functions.prototype.sumIfs = function (sumRange) {
            var values = [];
            for (var _a = 1; _a < arguments.length; _a++) {
                values[_a - 1] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "SumIfs", 0, [sumRange, values], false, true, null, false));
        };
        Functions.prototype.sumSq = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "SumSq", 0, [values], false, true, null, false));
        };
        Functions.prototype.syd = function (cost, salvage, life, per) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Syd", 0, [cost, salvage, life, per], false, true, null, false));
        };
        Functions.prototype.t = function (value) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "T", 0, [value], false, true, null, false));
        };
        Functions.prototype.tbillEq = function (settlement, maturity, discount) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "TBillEq", 0, [settlement, maturity, discount], false, true, null, false));
        };
        Functions.prototype.tbillPrice = function (settlement, maturity, discount) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "TBillPrice", 0, [settlement, maturity, discount], false, true, null, false));
        };
        Functions.prototype.tbillYield = function (settlement, maturity, pr) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "TBillYield", 0, [settlement, maturity, pr], false, true, null, false));
        };
        Functions.prototype.t_Dist = function (x, degFreedom, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "T_Dist", 0, [x, degFreedom, cumulative], false, true, null, false));
        };
        Functions.prototype.t_Dist_2T = function (x, degFreedom) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "T_Dist_2T", 0, [x, degFreedom], false, true, null, false));
        };
        Functions.prototype.t_Dist_RT = function (x, degFreedom) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "T_Dist_RT", 0, [x, degFreedom], false, true, null, false));
        };
        Functions.prototype.t_Inv = function (probability, degFreedom) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "T_Inv", 0, [probability, degFreedom], false, true, null, false));
        };
        Functions.prototype.t_Inv_2T = function (probability, degFreedom) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "T_Inv_2T", 0, [probability, degFreedom], false, true, null, false));
        };
        Functions.prototype.tan = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Tan", 0, [number], false, true, null, false));
        };
        Functions.prototype.tanh = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Tanh", 0, [number], false, true, null, false));
        };
        Functions.prototype.text = function (value, formatText) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Text", 0, [value, formatText], false, true, null, false));
        };
        Functions.prototype.time = function (hour, minute, second) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Time", 0, [hour, minute, second], false, true, null, false));
        };
        Functions.prototype.timevalue = function (timeText) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Timevalue", 0, [timeText], false, true, null, false));
        };
        Functions.prototype.today = function () {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Today", 0, [], false, true, null, false));
        };
        Functions.prototype.trim = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Trim", 0, [text], false, true, null, false));
        };
        Functions.prototype.trimMean = function (array, percent) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "TrimMean", 0, [array, percent], false, true, null, false));
        };
        Functions.prototype.true = function () {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "True", 0, [], false, true, null, false));
        };
        Functions.prototype.trunc = function (number, numDigits) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Trunc", 0, [number, numDigits], false, true, null, false));
        };
        Functions.prototype.type = function (value) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Type", 0, [value], false, true, null, false));
        };
        Functions.prototype.usdollar = function (number, decimals) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "USDollar", 0, [number, decimals], false, true, null, false));
        };
        Functions.prototype.unichar = function (number) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Unichar", 0, [number], false, true, null, false));
        };
        Functions.prototype.unicode = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Unicode", 0, [text], false, true, null, false));
        };
        Functions.prototype.upper = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Upper", 0, [text], false, true, null, false));
        };
        Functions.prototype.vlookup = function (lookupValue, tableArray, colIndexNum, rangeLookup) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "VLookup", 0, [lookupValue, tableArray, colIndexNum, rangeLookup], false, true, null, false));
        };
        Functions.prototype.value = function (text) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Value", 0, [text], false, true, null, false));
        };
        Functions.prototype.varA = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "VarA", 0, [values], false, true, null, false));
        };
        Functions.prototype.varPA = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "VarPA", 0, [values], false, true, null, false));
        };
        Functions.prototype.var_P = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Var_P", 0, [values], false, true, null, false));
        };
        Functions.prototype.var_S = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Var_S", 0, [values], false, true, null, false));
        };
        Functions.prototype.vdb = function (cost, salvage, life, startPeriod, endPeriod, factor, noSwitch) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Vdb", 0, [cost, salvage, life, startPeriod, endPeriod, factor, noSwitch], false, true, null, false));
        };
        Functions.prototype.weekNum = function (serialNumber, returnType) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "WeekNum", 0, [serialNumber, returnType], false, true, null, false));
        };
        Functions.prototype.weekday = function (serialNumber, returnType) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Weekday", 0, [serialNumber, returnType], false, true, null, false));
        };
        Functions.prototype.weibull_Dist = function (x, alpha, beta, cumulative) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Weibull_Dist", 0, [x, alpha, beta, cumulative], false, true, null, false));
        };
        Functions.prototype.workDay = function (startDate, days, holidays) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "WorkDay", 0, [startDate, days, holidays], false, true, null, false));
        };
        Functions.prototype.workDay_Intl = function (startDate, days, weekend, holidays) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "WorkDay_Intl", 0, [startDate, days, weekend, holidays], false, true, null, false));
        };
        Functions.prototype.xirr = function (values, dates, guess) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Xirr", 0, [values, dates, guess], false, true, null, false));
        };
        Functions.prototype.xnpv = function (rate, values, dates) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Xnpv", 0, [rate, values, dates], false, true, null, false));
        };
        Functions.prototype.xor = function () {
            var values = [];
            for (var _a = 0; _a < arguments.length; _a++) {
                values[_a] = arguments[_a];
            }
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Xor", 0, [values], false, true, null, false));
        };
        Functions.prototype.year = function (serialNumber) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Year", 0, [serialNumber], false, true, null, false));
        };
        Functions.prototype.yearFrac = function (startDate, endDate, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "YearFrac", 0, [startDate, endDate, basis], false, true, null, false));
        };
        Functions.prototype.yield = function (settlement, maturity, rate, pr, redemption, frequency, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Yield", 0, [settlement, maturity, rate, pr, redemption, frequency, basis], false, true, null, false));
        };
        Functions.prototype.yieldDisc = function (settlement, maturity, pr, redemption, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "YieldDisc", 0, [settlement, maturity, pr, redemption, basis], false, true, null, false));
        };
        Functions.prototype.yieldMat = function (settlement, maturity, issue, rate, pr, basis) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "YieldMat", 0, [settlement, maturity, issue, rate, pr, basis], false, true, null, false));
        };
        Functions.prototype.z_Test = function (array, x, sigma) {
            return new FunctionResult(this.context, _createMethodObjectPath(this.context, this, "Z_Test", 0, [array, x, sigma], false, true, null, false));
        };
        Functions.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
        };
        Functions.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        Functions.prototype.toJSON = function () {
            return _toJson(this, {}, {});
        };
        return Functions;
    }(OfficeExtension.ClientObject));
    Excel.Functions = Functions;
    var _typeCalculatedFieldCollection = "CalculatedFieldCollection";
    var CalculatedFieldCollection = (function (_super) {
        __extends(CalculatedFieldCollection, _super);
        function CalculatedFieldCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(CalculatedFieldCollection.prototype, "_className", {
            get: function () {
                return "CalculatedFieldCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CalculatedFieldCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CalculatedFieldCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typeCalculatedFieldCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        CalculatedFieldCollection.prototype.add = function (Name, Formula, UseStandardFormula) {
            return new Excel.PivotField(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [Name, Formula, UseStandardFormula], false, true, null, false));
        };
        CalculatedFieldCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        CalculatedFieldCollection.prototype.getItem = function (nameOrIndex) {
            return new Excel.PivotField(this.context, _createIndexerObjectPath(this.context, this, [nameOrIndex]));
        };
        CalculatedFieldCollection.prototype.getItemAt = function (index) {
            return new Excel.PivotField(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        CalculatedFieldCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.PivotField(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        CalculatedFieldCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        CalculatedFieldCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        CalculatedFieldCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.PivotField(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        CalculatedFieldCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return CalculatedFieldCollection;
    }(OfficeExtension.ClientObject));
    Excel.CalculatedFieldCollection = CalculatedFieldCollection;
    var _typePivotCache = "PivotCache";
    var PivotCache = (function (_super) {
        __extends(PivotCache, _super);
        function PivotCache() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PivotCache.prototype, "_className", {
            get: function () {
                return "PivotCache";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotCache.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["version", "id", "index", "sourceData"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotCache.prototype, "id", {
            get: function () {
                _throwIfNotLoaded("id", this._I, _typePivotCache, this._isNull);
                return this._I;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotCache.prototype, "index", {
            get: function () {
                _throwIfNotLoaded("index", this._In, _typePivotCache, this._isNull);
                return this._In;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotCache.prototype, "sourceData", {
            get: function () {
                _throwIfNotLoaded("sourceData", this._S, _typePivotCache, this._isNull);
                _throwIfApiNotSupported("PivotCache.sourceData", "Pivot", "1.2", _hostName);
                return this._S;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotCache.prototype, "version", {
            get: function () {
                _throwIfNotLoaded("version", this._V, _typePivotCache, this._isNull);
                return this._V;
            },
            enumerable: true,
            configurable: true
        });
        PivotCache.prototype.refresh = function () {
            _createMethodAction(this.context, this, "Refresh", 0, [], false);
        };
        PivotCache.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Id"])) {
                this._I = obj["Id"];
            }
            if (!_isUndefined(obj["Index"])) {
                this._In = obj["Index"];
            }
            if (!_isUndefined(obj["SourceData"])) {
                this._S = obj["SourceData"];
            }
            if (!_isUndefined(obj["Version"])) {
                this._V = obj["Version"];
            }
        };
        PivotCache.prototype.load = function (option) {
            return _load(this, option);
        };
        PivotCache.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        PivotCache.prototype._handleIdResult = function (value) {
            _super.prototype._handleIdResult.call(this, value);
            if (_isNullOrUndefined(value)) {
                return;
            }
            if (!_isUndefined(value["Id"])) {
                this._I = value["Id"];
            }
        };
        PivotCache.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        PivotCache.prototype.toJSON = function () {
            return _toJson(this, {
                "id": this._I,
                "index": this._In,
                "sourceData": this._S,
                "version": this._V,
            }, {});
        };
        PivotCache.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return PivotCache;
    }(OfficeExtension.ClientObject));
    Excel.PivotCache = PivotCache;
    var _typePivotCacheCollection = "PivotCacheCollection";
    var PivotCacheCollection = (function (_super) {
        __extends(PivotCacheCollection, _super);
        function PivotCacheCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PivotCacheCollection.prototype, "_className", {
            get: function () {
                return "PivotCacheCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotCacheCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotCacheCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typePivotCacheCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        PivotCacheCollection.prototype.add = function (sourceType, address) {
            return new Excel.PivotCache(this.context, _createMethodObjectPath(this.context, this, "Add", 0, [sourceType, address], false, true, null, false));
        };
        PivotCacheCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        PivotCacheCollection.prototype.getItem = function (index) {
            return new Excel.PivotCache(this.context, _createIndexerObjectPath(this.context, this, [index]));
        };
        PivotCacheCollection.prototype.getItemAt = function (index) {
            return new Excel.PivotCache(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        PivotCacheCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.PivotCache(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        PivotCacheCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        PivotCacheCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        PivotCacheCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.PivotCache(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        PivotCacheCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return PivotCacheCollection;
    }(OfficeExtension.ClientObject));
    Excel.PivotCacheCollection = PivotCacheCollection;
    var _typePivotField = "PivotField";
    var PivotField = (function (_super) {
        __extends(PivotField, _super);
        function PivotField() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PivotField.prototype, "_className", {
            get: function () {
                return "PivotField";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["name", "position", "orientation", "caption", "numberFormat", "formula", "calculation", "showDetail", "sourceName", "dataType", "aggregationFunction", "calculated", "autoSortOrder", "autoSortField", "drilledDown", "enableMultiplePageItems", "allItemsVisible", "subtotals"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, true, true, true, false, false, true, false, false, false, true, true, false, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["visiblePivotItems", "hiddenItems", "pivotItems", "currentPage"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "currentPage", {
            get: function () {
                if (!this._Cu) {
                    this._Cu = new Excel.PivotItem(this.context, _createPropertyObjectPath(this.context, this, "CurrentPage", false, false, false));
                }
                return this._Cu;
            },
            set: function (value) {
                this._Cu = value;
                _createSetPropertyAction(this.context, this, "CurrentPage", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "hiddenItems", {
            get: function () {
                if (!this._H) {
                    this._H = new Excel.PivotItemCollection(this.context, _createPropertyObjectPath(this.context, this, "HiddenItems", true, false, false));
                }
                return this._H;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "pivotItems", {
            get: function () {
                if (!this._P) {
                    this._P = new Excel.PivotItemCollection(this.context, _createPropertyObjectPath(this.context, this, "PivotItems", true, false, false));
                }
                return this._P;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "visiblePivotItems", {
            get: function () {
                if (!this._V) {
                    this._V = new Excel.PivotItemCollection(this.context, _createPropertyObjectPath(this.context, this, "VisiblePivotItems", true, false, false));
                }
                return this._V;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "aggregationFunction", {
            get: function () {
                _throwIfNotLoaded("aggregationFunction", this._A, _typePivotField, this._isNull);
                return this._A;
            },
            set: function (value) {
                this._A = value;
                _createSetPropertyAction(this.context, this, "AggregationFunction", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "allItemsVisible", {
            get: function () {
                _throwIfNotLoaded("allItemsVisible", this._Al, _typePivotField, this._isNull);
                return this._Al;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "autoSortField", {
            get: function () {
                _throwIfNotLoaded("autoSortField", this._Au, _typePivotField, this._isNull);
                return this._Au;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "autoSortOrder", {
            get: function () {
                _throwIfNotLoaded("autoSortOrder", this._Aut, _typePivotField, this._isNull);
                return this._Aut;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "calculated", {
            get: function () {
                _throwIfNotLoaded("calculated", this._C, _typePivotField, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "calculation", {
            get: function () {
                _throwIfNotLoaded("calculation", this._Ca, _typePivotField, this._isNull);
                return this._Ca;
            },
            set: function (value) {
                this._Ca = value;
                _createSetPropertyAction(this.context, this, "Calculation", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "caption", {
            get: function () {
                _throwIfNotLoaded("caption", this._Cap, _typePivotField, this._isNull);
                return this._Cap;
            },
            set: function (value) {
                this._Cap = value;
                _createSetPropertyAction(this.context, this, "Caption", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "dataType", {
            get: function () {
                _throwIfNotLoaded("dataType", this._D, _typePivotField, this._isNull);
                return this._D;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "drilledDown", {
            get: function () {
                _throwIfNotLoaded("drilledDown", this._Dr, _typePivotField, this._isNull);
                return this._Dr;
            },
            set: function (value) {
                this._Dr = value;
                _createSetPropertyAction(this.context, this, "DrilledDown", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "enableMultiplePageItems", {
            get: function () {
                _throwIfNotLoaded("enableMultiplePageItems", this._E, _typePivotField, this._isNull);
                return this._E;
            },
            set: function (value) {
                this._E = value;
                _createSetPropertyAction(this.context, this, "EnableMultiplePageItems", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "formula", {
            get: function () {
                _throwIfNotLoaded("formula", this._F, _typePivotField, this._isNull);
                return this._F;
            },
            set: function (value) {
                this._F = value;
                _createSetPropertyAction(this.context, this, "Formula", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typePivotField, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "Name", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "numberFormat", {
            get: function () {
                _throwIfNotLoaded("numberFormat", this._Nu, _typePivotField, this._isNull);
                return this._Nu;
            },
            set: function (value) {
                this._Nu = value;
                _createSetPropertyAction(this.context, this, "NumberFormat", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "orientation", {
            get: function () {
                _throwIfNotLoaded("orientation", this._O, _typePivotField, this._isNull);
                return this._O;
            },
            set: function (value) {
                this._O = value;
                _createSetPropertyAction(this.context, this, "Orientation", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "position", {
            get: function () {
                _throwIfNotLoaded("position", this._Po, _typePivotField, this._isNull);
                return this._Po;
            },
            set: function (value) {
                this._Po = value;
                _createSetPropertyAction(this.context, this, "Position", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "showDetail", {
            get: function () {
                _throwIfNotLoaded("showDetail", this._S, _typePivotField, this._isNull);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "ShowDetail", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "sourceName", {
            get: function () {
                _throwIfNotLoaded("sourceName", this._So, _typePivotField, this._isNull);
                return this._So;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotField.prototype, "subtotals", {
            get: function () {
                _throwIfNotLoaded("subtotals", this._Su, _typePivotField, this._isNull);
                return this._Su;
            },
            set: function (value) {
                this._Su = value;
                _createSetPropertyAction(this.context, this, "Subtotals", value);
            },
            enumerable: true,
            configurable: true
        });
        PivotField.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["name", "position", "orientation", "caption", "numberFormat", "formula", "calculation", "showDetail", "aggregationFunction", "drilledDown", "enableMultiplePageItems", "subtotals"], ["currentPage"], [
                "hiddenItems",
                "pivotItems",
                "visiblePivotItems"
            ]);
        };
        PivotField.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        PivotField.prototype.autoGroup = function () {
            _createMethodAction(this.context, this, "AutoGroup", 0, [], false);
        };
        PivotField.prototype.autoSort = function (sortOrder, Field) {
            _createMethodAction(this.context, this, "AutoSort", 0, [sortOrder, Field], false);
        };
        PivotField.prototype.clearAllFilters = function () {
            _createMethodAction(this.context, this, "ClearAllFilters", 0, [], false);
        };
        PivotField.prototype.getChildField = function () {
            return new Excel.PivotField(this.context, _createMethodObjectPath(this.context, this, "GetChildField", 1, [], false, false, null, false));
        };
        PivotField.prototype.getChildItems = function () {
            return new Excel.PivotItemCollection(this.context, _createMethodObjectPath(this.context, this, "GetChildItems", 1, [], true, false, null, false));
        };
        PivotField.prototype.getDataRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetDataRange", 1, [], false, true, null, false));
        };
        PivotField.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["AggregationFunction"])) {
                this._A = obj["AggregationFunction"];
            }
            if (!_isUndefined(obj["AllItemsVisible"])) {
                this._Al = obj["AllItemsVisible"];
            }
            if (!_isUndefined(obj["AutoSortField"])) {
                this._Au = obj["AutoSortField"];
            }
            if (!_isUndefined(obj["AutoSortOrder"])) {
                this._Aut = obj["AutoSortOrder"];
            }
            if (!_isUndefined(obj["Calculated"])) {
                this._C = obj["Calculated"];
            }
            if (!_isUndefined(obj["Calculation"])) {
                this._Ca = obj["Calculation"];
            }
            if (!_isUndefined(obj["Caption"])) {
                this._Cap = obj["Caption"];
            }
            if (!_isUndefined(obj["DataType"])) {
                this._D = obj["DataType"];
            }
            if (!_isUndefined(obj["DrilledDown"])) {
                this._Dr = obj["DrilledDown"];
            }
            if (!_isUndefined(obj["EnableMultiplePageItems"])) {
                this._E = obj["EnableMultiplePageItems"];
            }
            if (!_isUndefined(obj["Formula"])) {
                this._F = obj["Formula"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["NumberFormat"])) {
                this._Nu = obj["NumberFormat"];
            }
            if (!_isUndefined(obj["Orientation"])) {
                this._O = obj["Orientation"];
            }
            if (!_isUndefined(obj["Position"])) {
                this._Po = obj["Position"];
            }
            if (!_isUndefined(obj["ShowDetail"])) {
                this._S = obj["ShowDetail"];
            }
            if (!_isUndefined(obj["SourceName"])) {
                this._So = obj["SourceName"];
            }
            if (!_isUndefined(obj["Subtotals"])) {
                this._Su = obj["Subtotals"];
            }
            _handleNavigationPropertyResults(this, obj, ["currentPage", "CurrentPage", "hiddenItems", "HiddenItems", "pivotItems", "PivotItems", "visiblePivotItems", "VisiblePivotItems"]);
        };
        PivotField.prototype.load = function (option) {
            return _load(this, option);
        };
        PivotField.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        PivotField.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        PivotField.prototype.toJSON = function () {
            return _toJson(this, {
                "aggregationFunction": this._A,
                "allItemsVisible": this._Al,
                "autoSortField": this._Au,
                "autoSortOrder": this._Aut,
                "calculated": this._C,
                "calculation": this._Ca,
                "caption": this._Cap,
                "dataType": this._D,
                "drilledDown": this._Dr,
                "enableMultiplePageItems": this._E,
                "formula": this._F,
                "name": this._N,
                "numberFormat": this._Nu,
                "orientation": this._O,
                "position": this._Po,
                "showDetail": this._S,
                "sourceName": this._So,
                "subtotals": this._Su,
            }, {
                "currentPage": this._Cu,
                "hiddenItems": this._H,
                "pivotItems": this._P,
                "visiblePivotItems": this._V,
            });
        };
        PivotField.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return PivotField;
    }(OfficeExtension.ClientObject));
    Excel.PivotField = PivotField;
    var _typePivotFieldCollection = "PivotFieldCollection";
    var PivotFieldCollection = (function (_super) {
        __extends(PivotFieldCollection, _super);
        function PivotFieldCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PivotFieldCollection.prototype, "_className", {
            get: function () {
                return "PivotFieldCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotFieldCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotFieldCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typePivotFieldCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        PivotFieldCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        PivotFieldCollection.prototype.getItem = function (nameOrIndex) {
            return new Excel.PivotField(this.context, _createIndexerObjectPath(this.context, this, [nameOrIndex]));
        };
        PivotFieldCollection.prototype.getItemAt = function (index) {
            return new Excel.PivotField(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        PivotFieldCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.PivotField(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        PivotFieldCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        PivotFieldCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        PivotFieldCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.PivotField(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        PivotFieldCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return PivotFieldCollection;
    }(OfficeExtension.ClientObject));
    Excel.PivotFieldCollection = PivotFieldCollection;
    var _typePivotItem = "PivotItem";
    var PivotItem = (function (_super) {
        __extends(PivotItem, _super);
        function PivotItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PivotItem.prototype, "_className", {
            get: function () {
                return "PivotItem";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "_scalarPropertyNames", {
            get: function () {
                return ["value", "name", "position", "visible", "showDetail", "sourceName", "recordCount", "calculated", "drilledDown"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "_scalarPropertyUpdateable", {
            get: function () {
                return [true, true, true, true, true, false, false, false, true];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "_navigationPropertyNames", {
            get: function () {
                return ["pivotField"];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "pivotField", {
            get: function () {
                if (!this._P) {
                    this._P = new Excel.PivotField(this.context, _createPropertyObjectPath(this.context, this, "PivotField", false, false, false));
                }
                return this._P;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "calculated", {
            get: function () {
                _throwIfNotLoaded("calculated", this._C, _typePivotItem, this._isNull);
                return this._C;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "drilledDown", {
            get: function () {
                _throwIfNotLoaded("drilledDown", this._D, _typePivotItem, this._isNull);
                return this._D;
            },
            set: function (value) {
                this._D = value;
                _createSetPropertyAction(this.context, this, "DrilledDown", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "name", {
            get: function () {
                _throwIfNotLoaded("name", this._N, _typePivotItem, this._isNull);
                return this._N;
            },
            set: function (value) {
                this._N = value;
                _createSetPropertyAction(this.context, this, "Name", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "position", {
            get: function () {
                _throwIfNotLoaded("position", this._Po, _typePivotItem, this._isNull);
                return this._Po;
            },
            set: function (value) {
                this._Po = value;
                _createSetPropertyAction(this.context, this, "Position", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "recordCount", {
            get: function () {
                _throwIfNotLoaded("recordCount", this._R, _typePivotItem, this._isNull);
                return this._R;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "showDetail", {
            get: function () {
                _throwIfNotLoaded("showDetail", this._S, _typePivotItem, this._isNull);
                return this._S;
            },
            set: function (value) {
                this._S = value;
                _createSetPropertyAction(this.context, this, "ShowDetail", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "sourceName", {
            get: function () {
                _throwIfNotLoaded("sourceName", this._So, _typePivotItem, this._isNull);
                return this._So;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "value", {
            get: function () {
                _throwIfNotLoaded("value", this._V, _typePivotItem, this._isNull);
                return this._V;
            },
            set: function (value) {
                this._V = value;
                _createSetPropertyAction(this.context, this, "Value", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItem.prototype, "visible", {
            get: function () {
                _throwIfNotLoaded("visible", this._Vi, _typePivotItem, this._isNull);
                return this._Vi;
            },
            set: function (value) {
                this._Vi = value;
                _createSetPropertyAction(this.context, this, "Visible", value);
            },
            enumerable: true,
            configurable: true
        });
        PivotItem.prototype.set = function (properties, options) {
            this._recursivelySet(properties, options, ["value", "name", "position", "visible", "showDetail", "drilledDown"], ["pivotField"], []);
        };
        PivotItem.prototype.update = function (properties) {
            this._recursivelyUpdate(properties);
        };
        PivotItem.prototype.getDataRange = function () {
            return new Excel.Range(this.context, _createMethodObjectPath(this.context, this, "GetDataRange", 1, [], false, true, null, false));
        };
        PivotItem.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isUndefined(obj["Calculated"])) {
                this._C = obj["Calculated"];
            }
            if (!_isUndefined(obj["DrilledDown"])) {
                this._D = obj["DrilledDown"];
            }
            if (!_isUndefined(obj["Name"])) {
                this._N = obj["Name"];
            }
            if (!_isUndefined(obj["Position"])) {
                this._Po = obj["Position"];
            }
            if (!_isUndefined(obj["RecordCount"])) {
                this._R = obj["RecordCount"];
            }
            if (!_isUndefined(obj["ShowDetail"])) {
                this._S = obj["ShowDetail"];
            }
            if (!_isUndefined(obj["SourceName"])) {
                this._So = obj["SourceName"];
            }
            if (!_isUndefined(obj["Value"])) {
                this._V = obj["Value"];
            }
            if (!_isUndefined(obj["Visible"])) {
                this._Vi = obj["Visible"];
            }
            _handleNavigationPropertyResults(this, obj, ["pivotField", "PivotField"]);
        };
        PivotItem.prototype.load = function (option) {
            return _load(this, option);
        };
        PivotItem.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        PivotItem.prototype._handleRetrieveResult = function (value, result) {
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result);
        };
        PivotItem.prototype.toJSON = function () {
            return _toJson(this, {
                "calculated": this._C,
                "drilledDown": this._D,
                "name": this._N,
                "position": this._Po,
                "recordCount": this._R,
                "showDetail": this._S,
                "sourceName": this._So,
                "value": this._V,
                "visible": this._Vi,
            }, {
                "pivotField": this._P,
            });
        };
        PivotItem.prototype.ensureUnchanged = function (data) {
            _createEnsureUnchangedAction(this.context, this, data);
            return;
        };
        return PivotItem;
    }(OfficeExtension.ClientObject));
    Excel.PivotItem = PivotItem;
    var _typePivotItemCollection = "PivotItemCollection";
    var PivotItemCollection = (function (_super) {
        __extends(PivotItemCollection, _super);
        function PivotItemCollection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PivotItemCollection.prototype, "_className", {
            get: function () {
                return "PivotItemCollection";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItemCollection.prototype, "_isCollection", {
            get: function () {
                return true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PivotItemCollection.prototype, "items", {
            get: function () {
                _throwIfNotLoaded("items", this.m__items, _typePivotItemCollection, this._isNull);
                return this.m__items;
            },
            enumerable: true,
            configurable: true
        });
        PivotItemCollection.prototype.getCount = function () {
            var action = _createMethodAction(this.context, this, "GetCount", 1, [], false);
            var ret = new OfficeExtension.ClientResult();
            _addActionResultHandler(this, action, ret);
            return ret;
        };
        PivotItemCollection.prototype.getItem = function (nameOrIndex) {
            return new Excel.PivotItem(this.context, _createIndexerObjectPath(this.context, this, [nameOrIndex]));
        };
        PivotItemCollection.prototype.getItemAt = function (index) {
            return new Excel.PivotItem(this.context, _createMethodObjectPath(this.context, this, "GetItemAt", 1, [index], false, false, null, false));
        };
        PivotItemCollection.prototype._handleResult = function (value) {
            _super.prototype._handleResult.call(this, value);
            if (_isNullOrUndefined(value))
                return;
            var obj = value;
            _fixObjectPathIfNecessary(this, obj);
            if (!_isNullOrUndefined(obj[OfficeExtension.Constants.items])) {
                this.m__items = [];
                var _data = obj[OfficeExtension.Constants.items];
                for (var i = 0; i < _data.length; i++) {
                    var _item = new Excel.PivotItem(this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, this.context, this, _data[i], i));
                    _item._handleResult(_data[i]);
                    this.m__items.push(_item);
                }
            }
        };
        PivotItemCollection.prototype.load = function (option) {
            return _load(this, option);
        };
        PivotItemCollection.prototype.retrieve = function (option) {
            return _retrieve(this, option);
        };
        PivotItemCollection.prototype._handleRetrieveResult = function (value, result) {
            var _this = this;
            _super.prototype._handleRetrieveResult.call(this, value, result);
            _processRetrieveResult(this, value, result, function (childItemData, index) { return new Excel.PivotItem(_this.context, _createChildItemObjectPathUsingIndexerOrGetItemAt(true, _this.context, _this, childItemData, index)); });
        };
        PivotItemCollection.prototype.toJSON = function () {
            return _toJson(this, {}, {}, this.m__items);
        };
        return PivotItemCollection;
    }(OfficeExtension.ClientObject));
    Excel.PivotItemCollection = PivotItemCollection;
    var ConsolidationFunction;
    (function (ConsolidationFunction) {
        ConsolidationFunction.varP = "VarP";
        ConsolidationFunction._Var = "Var";
        ConsolidationFunction.sum = "Sum";
        ConsolidationFunction.stDevP = "StDevP";
        ConsolidationFunction.stDev = "StDev";
        ConsolidationFunction.product = "Product";
        ConsolidationFunction.min = "Min";
        ConsolidationFunction.max = "Max";
        ConsolidationFunction.countNums = "CountNums";
        ConsolidationFunction.count = "Count";
        ConsolidationFunction.average = "Average";
        ConsolidationFunction.distinctCount = "DistinctCount";
        ConsolidationFunction.unknown = "Unknown";
    })(ConsolidationFunction = Excel.ConsolidationFunction || (Excel.ConsolidationFunction = {}));
    var PivotFieldCalculation;
    (function (PivotFieldCalculation) {
        PivotFieldCalculation.noAdditionalCalculation = "NoAdditionalCalculation";
        PivotFieldCalculation.differenceFrom = "DifferenceFrom";
        PivotFieldCalculation.percentOf = "PercentOf";
        PivotFieldCalculation.percentDifferenceFrom = "PercentDifferenceFrom";
        PivotFieldCalculation.runningTotal = "RunningTotal";
        PivotFieldCalculation.percentOfRow = "PercentOfRow";
        PivotFieldCalculation.percentOfColumn = "PercentOfColumn";
        PivotFieldCalculation.percentOfTotal = "PercentOfTotal";
        PivotFieldCalculation.index = "Index";
        PivotFieldCalculation.percentOfParentRow = "PercentOfParentRow";
        PivotFieldCalculation.percentOfParentColumn = "PercentOfParentColumn";
        PivotFieldCalculation.percentOfParent = "PercentOfParent";
        PivotFieldCalculation.percentRunningTotal = "PercentRunningTotal";
        PivotFieldCalculation.rankAscending = "RankAscending";
        PivotFieldCalculation.rankDecending = "RankDecending";
    })(PivotFieldCalculation = Excel.PivotFieldCalculation || (Excel.PivotFieldCalculation = {}));
    var PivotFieldDataType;
    (function (PivotFieldDataType) {
        PivotFieldDataType.text = "Text";
        PivotFieldDataType.number = "Number";
        PivotFieldDataType.date = "Date";
    })(PivotFieldDataType = Excel.PivotFieldDataType || (Excel.PivotFieldDataType = {}));
    var PivotFieldOrientation;
    (function (PivotFieldOrientation) {
        PivotFieldOrientation.hidden = "Hidden";
        PivotFieldOrientation.rowField = "RowField";
        PivotFieldOrientation.columnField = "ColumnField";
        PivotFieldOrientation.pageField = "PageField";
        PivotFieldOrientation.dataField = "DataField";
    })(PivotFieldOrientation = Excel.PivotFieldOrientation || (Excel.PivotFieldOrientation = {}));
    var PivotFieldRepeatLabels;
    (function (PivotFieldRepeatLabels) {
        PivotFieldRepeatLabels.doNotRepeatLabels = "DoNotRepeatLabels";
        PivotFieldRepeatLabels.repeatLabels = "RepeatLabels";
    })(PivotFieldRepeatLabels = Excel.PivotFieldRepeatLabels || (Excel.PivotFieldRepeatLabels = {}));
    var PivotTableSourceType;
    (function (PivotTableSourceType) {
        PivotTableSourceType.database = "Database";
        PivotTableSourceType.external = "External";
        PivotTableSourceType.consolidation = "Consolidation";
        PivotTableSourceType.scenario = "Scenario";
    })(PivotTableSourceType = Excel.PivotTableSourceType || (Excel.PivotTableSourceType = {}));
    var PivotTableVersion;
    (function (PivotTableVersion) {
        PivotTableVersion.pivotTableVersionCurrent = "PivotTableVersionCurrent";
        PivotTableVersion.pivotTableVersion2000 = "PivotTableVersion2000";
        PivotTableVersion.pivotTableVersion10 = "PivotTableVersion10";
        PivotTableVersion.pivotTableVersion11 = "PivotTableVersion11";
        PivotTableVersion.pivotTableVersion12 = "PivotTableVersion12";
        PivotTableVersion.pivotTableVersion14 = "PivotTableVersion14";
        PivotTableVersion.pivotTableVersion15 = "PivotTableVersion15";
    })(PivotTableVersion = Excel.PivotTableVersion || (Excel.PivotTableVersion = {}));
    var PivotTableSelectionMode;
    (function (PivotTableSelectionMode) {
        PivotTableSelectionMode.dataAndLabel = "DataAndLabel";
        PivotTableSelectionMode.labelOnly = "LabelOnly";
        PivotTableSelectionMode.dataOnly = "DataOnly";
        PivotTableSelectionMode.origin = "Origin";
        PivotTableSelectionMode.blanks = "Blanks";
        PivotTableSelectionMode.button = "Button";
        PivotTableSelectionMode.firstRow = "FirstRow";
    })(PivotTableSelectionMode = Excel.PivotTableSelectionMode || (Excel.PivotTableSelectionMode = {}));
    var SortOrder;
    (function (SortOrder) {
        SortOrder.ascending = "Ascending";
        SortOrder.descending = "Descending";
    })(SortOrder = Excel.SortOrder || (Excel.SortOrder = {}));
    var ErrorCodes;
    (function (ErrorCodes) {
        ErrorCodes.accessDenied = "AccessDenied";
        ErrorCodes.apiNotFound = "ApiNotFound";
        ErrorCodes.conflict = "Conflict";
        ErrorCodes.generalException = "GeneralException";
        ErrorCodes.insertDeleteConflict = "InsertDeleteConflict";
        ErrorCodes.invalidArgument = "InvalidArgument";
        ErrorCodes.invalidBinding = "InvalidBinding";
        ErrorCodes.invalidOperation = "InvalidOperation";
        ErrorCodes.invalidReference = "InvalidReference";
        ErrorCodes.invalidSelection = "InvalidSelection";
        ErrorCodes.itemAlreadyExists = "ItemAlreadyExists";
        ErrorCodes.itemNotFound = "ItemNotFound";
        ErrorCodes.notImplemented = "NotImplemented";
        ErrorCodes.unsupportedOperation = "UnsupportedOperation";
        ErrorCodes.invalidOperationInCellEditMode = "InvalidOperationInCellEditMode";
    })(ErrorCodes = Excel.ErrorCodes || (Excel.ErrorCodes = {}));
})(Excel || (Excel = {}));
﻿
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingAddColumns;
		Excel._V1Api.prototype.bindingAddColumns = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingAddFromNamedItem;
		Excel._V1Api.prototype.bindingAddFromNamedItem = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingAddFromPrompt;
		Excel._V1Api.prototype.bindingAddFromPrompt = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingAddFromSelection;
		Excel._V1Api.prototype.bindingAddFromSelection = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingAddRows;
		Excel._V1Api.prototype.bindingAddRows = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingClearFormats;
		Excel._V1Api.prototype.bindingClearFormats = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingDeleteAllDataValues;
		Excel._V1Api.prototype.bindingDeleteAllDataValues = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingGetAll;
		Excel._V1Api.prototype.bindingGetAll = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingGetById;
		Excel._V1Api.prototype.bindingGetById = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingGetData;
		Excel._V1Api.prototype.bindingGetData = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingReleaseById;
		Excel._V1Api.prototype.bindingReleaseById = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingSetData;
		Excel._V1Api.prototype.bindingSetData = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingSetFormats;
		Excel._V1Api.prototype.bindingSetFormats = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.bindingSetTableOptions;
		Excel._V1Api.prototype.bindingSetTableOptions = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.getFilePropertiesAsync;
		Excel._V1Api.prototype.getFilePropertiesAsync = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.getSelectedData;
		Excel._V1Api.prototype.getSelectedData = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.gotoById;
		Excel._V1Api.prototype.gotoById = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel._V1Api) {
	(function () {
		var oldMethod = Excel._V1Api.prototype.setSelectedData;
		Excel._V1Api.prototype.setSelectedData = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}

if (Excel.Application) {
	Object.defineProperty(Excel.Application.prototype, "calculationMode", {
		get: function () {
			this.load("calculationMode");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.AreaCollection) {
	(function () {
		var oldMethod = Excel.AreaCollection.prototype.getCount;
		Excel.AreaCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.AreaCollection) {
	Object.defineProperty(Excel.AreaCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Binding) {
	Object.defineProperty(Excel.Binding.prototype, "id", {
		get: function () {
			this.load("id");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Binding) {
	Object.defineProperty(Excel.Binding.prototype, "type", {
		get: function () {
			this.load("type");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.Binding) {
	(function () {
		var oldMethod = Excel.Binding.prototype.getText;
		Excel.Binding.prototype.getText = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}

if (Excel.BindingCollection) {
	Object.defineProperty(Excel.BindingCollection.prototype, "count", {
		get: function () {
			this.load("count");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.BindingCollection) {
	(function () {
		var oldMethod = Excel.BindingCollection.prototype.getCount;
		Excel.BindingCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.BindingCollection) {
	Object.defineProperty(Excel.BindingCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.CalculatedFieldCollection) {
	(function () {
		var oldMethod = Excel.CalculatedFieldCollection.prototype.getCount;
		Excel.CalculatedFieldCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.CalculatedFieldCollection) {
	Object.defineProperty(Excel.CalculatedFieldCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CellValueConditionalFormat) {
	Object.defineProperty(Excel.CellValueConditionalFormat.prototype, "rule", {
		get: function () {
			this.load("rule");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Chart) {
	Object.defineProperty(Excel.Chart.prototype, "chartType", {
		get: function () {
			this.load("chartType");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Chart) {
	Object.defineProperty(Excel.Chart.prototype, "height", {
		get: function () {
			this.load("height");
			this.context.syncSynchronous();
			return this._H;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Chart) {
	Object.defineProperty(Excel.Chart.prototype, "id", {
		get: function () {
			this.load("id");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Chart) {
	Object.defineProperty(Excel.Chart.prototype, "left", {
		get: function () {
			this.load("left");
			this.context.syncSynchronous();
			return this._L;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Chart) {
	Object.defineProperty(Excel.Chart.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Chart) {
	Object.defineProperty(Excel.Chart.prototype, "showAllFieldButtons", {
		get: function () {
			this.load("showAllFieldButtons");
			this.context.syncSynchronous();
			return this._Sh;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Chart) {
	Object.defineProperty(Excel.Chart.prototype, "top", {
		get: function () {
			this.load("top");
			this.context.syncSynchronous();
			return this._To;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Chart) {
	Object.defineProperty(Excel.Chart.prototype, "width", {
		get: function () {
			this.load("width");
			this.context.syncSynchronous();
			return this._W;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.Chart) {
	(function () {
		var oldMethod = Excel.Chart.prototype.getImage;
		Excel.Chart.prototype.getImage = function (arg0, arg1, arg2) {
			var result = oldMethod.call(this, arg0, arg1, arg2);
			this.context.syncSynchronous();
			return result;
		}
	})();
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "axisBetweenCategories", {
		get: function () {
			this.load("axisBetweenCategories");
			this.context.syncSynchronous();
			return this._A;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "axisGroup", {
		get: function () {
			this.load("axisGroup");
			this.context.syncSynchronous();
			return this._Ax;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "baseTimeUnit", {
		get: function () {
			this.load("baseTimeUnit");
			this.context.syncSynchronous();
			return this._B;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "categoryType", {
		get: function () {
			this.load("categoryType");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "crosses", {
		get: function () {
			this.load("crosses");
			this.context.syncSynchronous();
			return this._Cr;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "crossesAt", {
		get: function () {
			this.load("crossesAt");
			this.context.syncSynchronous();
			return this._Cro;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "customDisplayUnit", {
		get: function () {
			this.load("customDisplayUnit");
			this.context.syncSynchronous();
			return this._Cu;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "displayUnit", {
		get: function () {
			this.load("displayUnit");
			this.context.syncSynchronous();
			return this._D;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "height", {
		get: function () {
			this.load("height");
			this.context.syncSynchronous();
			return this._H;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "left", {
		get: function () {
			this.load("left");
			this.context.syncSynchronous();
			return this._L;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "logBase", {
		get: function () {
			this.load("logBase");
			this.context.syncSynchronous();
			return this._Lo;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "majorTickMark", {
		get: function () {
			this.load("majorTickMark");
			this.context.syncSynchronous();
			return this._Ma;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "majorTimeUnitScale", {
		get: function () {
			this.load("majorTimeUnitScale");
			this.context.syncSynchronous();
			return this._Maj;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "majorUnit", {
		get: function () {
			this.load("majorUnit");
			this.context.syncSynchronous();
			return this._Majo;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "maximum", {
		get: function () {
			this.load("maximum");
			this.context.syncSynchronous();
			return this._Max;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "minimum", {
		get: function () {
			this.load("minimum");
			this.context.syncSynchronous();
			return this._Mi;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "minorTickMark", {
		get: function () {
			this.load("minorTickMark");
			this.context.syncSynchronous();
			return this._Mino;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "minorTimeUnitScale", {
		get: function () {
			this.load("minorTimeUnitScale");
			this.context.syncSynchronous();
			return this._Minor;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "minorUnit", {
		get: function () {
			this.load("minorUnit");
			this.context.syncSynchronous();
			return this._MinorU;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "reversePlotOrder", {
		get: function () {
			this.load("reversePlotOrder");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "scaleType", {
		get: function () {
			this.load("scaleType");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "showDisplayUnitLabel", {
		get: function () {
			this.load("showDisplayUnitLabel");
			this.context.syncSynchronous();
			return this._Sh;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "tickLabelPosition", {
		get: function () {
			this.load("tickLabelPosition");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "tickLabelSpacing", {
		get: function () {
			this.load("tickLabelSpacing");
			this.context.syncSynchronous();
			return this._Ti;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "tickMarkSpacing", {
		get: function () {
			this.load("tickMarkSpacing");
			this.context.syncSynchronous();
			return this._Tic;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "top", {
		get: function () {
			this.load("top");
			this.context.syncSynchronous();
			return this._To;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "type", {
		get: function () {
			this.load("type");
			this.context.syncSynchronous();
			return this._Ty;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "visible", {
		get: function () {
			this.load("visible");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxis) {
	Object.defineProperty(Excel.ChartAxis.prototype, "width", {
		get: function () {
			this.load("width");
			this.context.syncSynchronous();
			return this._W;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxisTitle) {
	Object.defineProperty(Excel.ChartAxisTitle.prototype, "text", {
		get: function () {
			this.load("text");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartAxisTitle) {
	Object.defineProperty(Excel.ChartAxisTitle.prototype, "visible", {
		get: function () {
			this.load("visible");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartBorder) {
	Object.defineProperty(Excel.ChartBorder.prototype, "color", {
		get: function () {
			this.load("color");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartBorder) {
	Object.defineProperty(Excel.ChartBorder.prototype, "lineStyle", {
		get: function () {
			this.load("lineStyle");
			this.context.syncSynchronous();
			return this._L;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartBorder) {
	Object.defineProperty(Excel.ChartBorder.prototype, "weight", {
		get: function () {
			this.load("weight");
			this.context.syncSynchronous();
			return this._W;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartCollection) {
	Object.defineProperty(Excel.ChartCollection.prototype, "count", {
		get: function () {
			this.load("count");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.ChartCollection) {
	(function () {
		var oldMethod = Excel.ChartCollection.prototype.getCount;
		Excel.ChartCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.ChartCollection) {
	Object.defineProperty(Excel.ChartCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabel) {
	Object.defineProperty(Excel.ChartDataLabel.prototype, "position", {
		get: function () {
			this.load("position");
			this.context.syncSynchronous();
			return this._P;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabel) {
	Object.defineProperty(Excel.ChartDataLabel.prototype, "separator", {
		get: function () {
			this.load("separator");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabel) {
	Object.defineProperty(Excel.ChartDataLabel.prototype, "showBubbleSize", {
		get: function () {
			this.load("showBubbleSize");
			this.context.syncSynchronous();
			return this._Sh;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabel) {
	Object.defineProperty(Excel.ChartDataLabel.prototype, "showCategoryName", {
		get: function () {
			this.load("showCategoryName");
			this.context.syncSynchronous();
			return this._Sho;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabel) {
	Object.defineProperty(Excel.ChartDataLabel.prototype, "showLegendKey", {
		get: function () {
			this.load("showLegendKey");
			this.context.syncSynchronous();
			return this._Show;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabel) {
	Object.defineProperty(Excel.ChartDataLabel.prototype, "showPercentage", {
		get: function () {
			this.load("showPercentage");
			this.context.syncSynchronous();
			return this._ShowP;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabel) {
	Object.defineProperty(Excel.ChartDataLabel.prototype, "showSeriesName", {
		get: function () {
			this.load("showSeriesName");
			this.context.syncSynchronous();
			return this._ShowS;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabel) {
	Object.defineProperty(Excel.ChartDataLabel.prototype, "showValue", {
		get: function () {
			this.load("showValue");
			this.context.syncSynchronous();
			return this._ShowV;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabels) {
	Object.defineProperty(Excel.ChartDataLabels.prototype, "position", {
		get: function () {
			this.load("position");
			this.context.syncSynchronous();
			return this._P;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabels) {
	Object.defineProperty(Excel.ChartDataLabels.prototype, "separator", {
		get: function () {
			this.load("separator");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabels) {
	Object.defineProperty(Excel.ChartDataLabels.prototype, "showBubbleSize", {
		get: function () {
			this.load("showBubbleSize");
			this.context.syncSynchronous();
			return this._Sh;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabels) {
	Object.defineProperty(Excel.ChartDataLabels.prototype, "showCategoryName", {
		get: function () {
			this.load("showCategoryName");
			this.context.syncSynchronous();
			return this._Sho;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabels) {
	Object.defineProperty(Excel.ChartDataLabels.prototype, "showLegendKey", {
		get: function () {
			this.load("showLegendKey");
			this.context.syncSynchronous();
			return this._Show;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabels) {
	Object.defineProperty(Excel.ChartDataLabels.prototype, "showPercentage", {
		get: function () {
			this.load("showPercentage");
			this.context.syncSynchronous();
			return this._ShowP;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabels) {
	Object.defineProperty(Excel.ChartDataLabels.prototype, "showSeriesName", {
		get: function () {
			this.load("showSeriesName");
			this.context.syncSynchronous();
			return this._ShowS;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartDataLabels) {
	Object.defineProperty(Excel.ChartDataLabels.prototype, "showValue", {
		get: function () {
			this.load("showValue");
			this.context.syncSynchronous();
			return this._ShowV;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartFont) {
	Object.defineProperty(Excel.ChartFont.prototype, "bold", {
		get: function () {
			this.load("bold");
			this.context.syncSynchronous();
			return this._B;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartFont) {
	Object.defineProperty(Excel.ChartFont.prototype, "color", {
		get: function () {
			this.load("color");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartFont) {
	Object.defineProperty(Excel.ChartFont.prototype, "italic", {
		get: function () {
			this.load("italic");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartFont) {
	Object.defineProperty(Excel.ChartFont.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartFont) {
	Object.defineProperty(Excel.ChartFont.prototype, "size", {
		get: function () {
			this.load("size");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartFont) {
	Object.defineProperty(Excel.ChartFont.prototype, "underline", {
		get: function () {
			this.load("underline");
			this.context.syncSynchronous();
			return this._U;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartGridlines) {
	Object.defineProperty(Excel.ChartGridlines.prototype, "visible", {
		get: function () {
			this.load("visible");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartLegend) {
	Object.defineProperty(Excel.ChartLegend.prototype, "height", {
		get: function () {
			this.load("height");
			this.context.syncSynchronous();
			return this._H;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartLegend) {
	Object.defineProperty(Excel.ChartLegend.prototype, "left", {
		get: function () {
			this.load("left");
			this.context.syncSynchronous();
			return this._L;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartLegend) {
	Object.defineProperty(Excel.ChartLegend.prototype, "overlay", {
		get: function () {
			this.load("overlay");
			this.context.syncSynchronous();
			return this._O;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartLegend) {
	Object.defineProperty(Excel.ChartLegend.prototype, "position", {
		get: function () {
			this.load("position");
			this.context.syncSynchronous();
			return this._P;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartLegend) {
	Object.defineProperty(Excel.ChartLegend.prototype, "showShadow", {
		get: function () {
			this.load("showShadow");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartLegend) {
	Object.defineProperty(Excel.ChartLegend.prototype, "top", {
		get: function () {
			this.load("top");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartLegend) {
	Object.defineProperty(Excel.ChartLegend.prototype, "visible", {
		get: function () {
			this.load("visible");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartLegend) {
	Object.defineProperty(Excel.ChartLegend.prototype, "width", {
		get: function () {
			this.load("width");
			this.context.syncSynchronous();
			return this._W;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartLegendEntry) {
	Object.defineProperty(Excel.ChartLegendEntry.prototype, "visible", {
		get: function () {
			this.load("visible");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.ChartLegendEntryCollection) {
	(function () {
		var oldMethod = Excel.ChartLegendEntryCollection.prototype.getCount;
		Excel.ChartLegendEntryCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.ChartLegendEntryCollection) {
	Object.defineProperty(Excel.ChartLegendEntryCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartLineFormat) {
	Object.defineProperty(Excel.ChartLineFormat.prototype, "color", {
		get: function () {
			this.load("color");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartLineFormat) {
	Object.defineProperty(Excel.ChartLineFormat.prototype, "lineStyle", {
		get: function () {
			this.load("lineStyle");
			this.context.syncSynchronous();
			return this._L;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartLineFormat) {
	Object.defineProperty(Excel.ChartLineFormat.prototype, "weight", {
		get: function () {
			this.load("weight");
			this.context.syncSynchronous();
			return this._W;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartPoint) {
	Object.defineProperty(Excel.ChartPoint.prototype, "hasDataLabel", {
		get: function () {
			this.load("hasDataLabel");
			this.context.syncSynchronous();
			return this._H;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartPoint) {
	Object.defineProperty(Excel.ChartPoint.prototype, "markerBackgroundColor", {
		get: function () {
			this.load("markerBackgroundColor");
			this.context.syncSynchronous();
			return this._M;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartPoint) {
	Object.defineProperty(Excel.ChartPoint.prototype, "markerForegroundColor", {
		get: function () {
			this.load("markerForegroundColor");
			this.context.syncSynchronous();
			return this._Ma;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartPoint) {
	Object.defineProperty(Excel.ChartPoint.prototype, "markerSize", {
		get: function () {
			this.load("markerSize");
			this.context.syncSynchronous();
			return this._Mar;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartPoint) {
	Object.defineProperty(Excel.ChartPoint.prototype, "markerStyle", {
		get: function () {
			this.load("markerStyle");
			this.context.syncSynchronous();
			return this._Mark;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartPoint) {
	Object.defineProperty(Excel.ChartPoint.prototype, "value", {
		get: function () {
			this.load("value");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartPointsCollection) {
	Object.defineProperty(Excel.ChartPointsCollection.prototype, "count", {
		get: function () {
			this.load("count");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.ChartPointsCollection) {
	(function () {
		var oldMethod = Excel.ChartPointsCollection.prototype.getCount;
		Excel.ChartPointsCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.ChartPointsCollection) {
	Object.defineProperty(Excel.ChartPointsCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "chartType", {
		get: function () {
			this.load("chartType");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "doughnutHoleSize", {
		get: function () {
			this.load("doughnutHoleSize");
			this.context.syncSynchronous();
			return this._D;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "filtered", {
		get: function () {
			this.load("filtered");
			this.context.syncSynchronous();
			return this._F;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "gapWidth", {
		get: function () {
			this.load("gapWidth");
			this.context.syncSynchronous();
			return this._G;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "hasDataLabels", {
		get: function () {
			this.load("hasDataLabels");
			this.context.syncSynchronous();
			return this._H;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "markerBackgroundColor", {
		get: function () {
			this.load("markerBackgroundColor");
			this.context.syncSynchronous();
			return this._M;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "markerForegroundColor", {
		get: function () {
			this.load("markerForegroundColor");
			this.context.syncSynchronous();
			return this._Ma;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "markerSize", {
		get: function () {
			this.load("markerSize");
			this.context.syncSynchronous();
			return this._Mar;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "markerStyle", {
		get: function () {
			this.load("markerStyle");
			this.context.syncSynchronous();
			return this._Mark;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "plotOrder", {
		get: function () {
			this.load("plotOrder");
			this.context.syncSynchronous();
			return this._P;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "showShadow", {
		get: function () {
			this.load("showShadow");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeries) {
	Object.defineProperty(Excel.ChartSeries.prototype, "smooth", {
		get: function () {
			this.load("smooth");
			this.context.syncSynchronous();
			return this._Sm;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartSeriesCollection) {
	Object.defineProperty(Excel.ChartSeriesCollection.prototype, "count", {
		get: function () {
			this.load("count");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.ChartSeriesCollection) {
	(function () {
		var oldMethod = Excel.ChartSeriesCollection.prototype.getCount;
		Excel.ChartSeriesCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.ChartSeriesCollection) {
	Object.defineProperty(Excel.ChartSeriesCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTitle) {
	Object.defineProperty(Excel.ChartTitle.prototype, "height", {
		get: function () {
			this.load("height");
			this.context.syncSynchronous();
			return this._H;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTitle) {
	Object.defineProperty(Excel.ChartTitle.prototype, "horizontalAlignment", {
		get: function () {
			this.load("horizontalAlignment");
			this.context.syncSynchronous();
			return this._Ho;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTitle) {
	Object.defineProperty(Excel.ChartTitle.prototype, "left", {
		get: function () {
			this.load("left");
			this.context.syncSynchronous();
			return this._L;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTitle) {
	Object.defineProperty(Excel.ChartTitle.prototype, "overlay", {
		get: function () {
			this.load("overlay");
			this.context.syncSynchronous();
			return this._O;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTitle) {
	Object.defineProperty(Excel.ChartTitle.prototype, "position", {
		get: function () {
			this.load("position");
			this.context.syncSynchronous();
			return this._P;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTitle) {
	Object.defineProperty(Excel.ChartTitle.prototype, "showShadow", {
		get: function () {
			this.load("showShadow");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTitle) {
	Object.defineProperty(Excel.ChartTitle.prototype, "text", {
		get: function () {
			this.load("text");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTitle) {
	Object.defineProperty(Excel.ChartTitle.prototype, "textOrientation", {
		get: function () {
			this.load("textOrientation");
			this.context.syncSynchronous();
			return this._Te;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTitle) {
	Object.defineProperty(Excel.ChartTitle.prototype, "top", {
		get: function () {
			this.load("top");
			this.context.syncSynchronous();
			return this._To;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTitle) {
	Object.defineProperty(Excel.ChartTitle.prototype, "verticalAlignment", {
		get: function () {
			this.load("verticalAlignment");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTitle) {
	Object.defineProperty(Excel.ChartTitle.prototype, "visible", {
		get: function () {
			this.load("visible");
			this.context.syncSynchronous();
			return this._Vi;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTitle) {
	Object.defineProperty(Excel.ChartTitle.prototype, "width", {
		get: function () {
			this.load("width");
			this.context.syncSynchronous();
			return this._W;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTrendline) {
	Object.defineProperty(Excel.ChartTrendline.prototype, "backward", {
		get: function () {
			this.load("backward");
			this.context.syncSynchronous();
			return this._B;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTrendline) {
	Object.defineProperty(Excel.ChartTrendline.prototype, "displayEquation", {
		get: function () {
			this.load("displayEquation");
			this.context.syncSynchronous();
			return this._D;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTrendline) {
	Object.defineProperty(Excel.ChartTrendline.prototype, "displayRSquared", {
		get: function () {
			this.load("displayRSquared");
			this.context.syncSynchronous();
			return this._Di;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTrendline) {
	Object.defineProperty(Excel.ChartTrendline.prototype, "forward", {
		get: function () {
			this.load("forward");
			this.context.syncSynchronous();
			return this._Fo;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTrendline) {
	Object.defineProperty(Excel.ChartTrendline.prototype, "intercept", {
		get: function () {
			this.load("intercept");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTrendline) {
	Object.defineProperty(Excel.ChartTrendline.prototype, "movingAveragePeriod", {
		get: function () {
			this.load("movingAveragePeriod");
			this.context.syncSynchronous();
			return this._M;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTrendline) {
	Object.defineProperty(Excel.ChartTrendline.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTrendline) {
	Object.defineProperty(Excel.ChartTrendline.prototype, "polynomialOrder", {
		get: function () {
			this.load("polynomialOrder");
			this.context.syncSynchronous();
			return this._P;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTrendline) {
	Object.defineProperty(Excel.ChartTrendline.prototype, "type", {
		get: function () {
			this.load("type");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ChartTrendline) {
	Object.defineProperty(Excel.ChartTrendline.prototype, "_Id", {
		get: function () {
			this.load("_Id");
			this.context.syncSynchronous();
			return this.__I;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.ChartTrendlineCollection) {
	(function () {
		var oldMethod = Excel.ChartTrendlineCollection.prototype.getCount;
		Excel.ChartTrendlineCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.ChartTrendlineCollection) {
	Object.defineProperty(Excel.ChartTrendlineCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ColorScaleConditionalFormat) {
	Object.defineProperty(Excel.ColorScaleConditionalFormat.prototype, "criteria", {
		get: function () {
			this.load("criteria");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ColorScaleConditionalFormat) {
	Object.defineProperty(Excel.ColorScaleConditionalFormat.prototype, "threeColorScale", {
		get: function () {
			this.load("threeColorScale");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalDataBarNegativeFormat) {
	Object.defineProperty(Excel.ConditionalDataBarNegativeFormat.prototype, "borderColor", {
		get: function () {
			this.load("borderColor");
			this.context.syncSynchronous();
			return this._B;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalDataBarNegativeFormat) {
	Object.defineProperty(Excel.ConditionalDataBarNegativeFormat.prototype, "fillColor", {
		get: function () {
			this.load("fillColor");
			this.context.syncSynchronous();
			return this._F;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalDataBarNegativeFormat) {
	Object.defineProperty(Excel.ConditionalDataBarNegativeFormat.prototype, "matchPositiveBorderColor", {
		get: function () {
			this.load("matchPositiveBorderColor");
			this.context.syncSynchronous();
			return this._M;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalDataBarNegativeFormat) {
	Object.defineProperty(Excel.ConditionalDataBarNegativeFormat.prototype, "matchPositiveFillColor", {
		get: function () {
			this.load("matchPositiveFillColor");
			this.context.syncSynchronous();
			return this._Ma;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalDataBarPositiveFormat) {
	Object.defineProperty(Excel.ConditionalDataBarPositiveFormat.prototype, "borderColor", {
		get: function () {
			this.load("borderColor");
			this.context.syncSynchronous();
			return this._B;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalDataBarPositiveFormat) {
	Object.defineProperty(Excel.ConditionalDataBarPositiveFormat.prototype, "fillColor", {
		get: function () {
			this.load("fillColor");
			this.context.syncSynchronous();
			return this._F;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalDataBarPositiveFormat) {
	Object.defineProperty(Excel.ConditionalDataBarPositiveFormat.prototype, "gradientFill", {
		get: function () {
			this.load("gradientFill");
			this.context.syncSynchronous();
			return this._G;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalFormat) {
	Object.defineProperty(Excel.ConditionalFormat.prototype, "id", {
		get: function () {
			this.load("id");
			this.context.syncSynchronous();
			return this._Id0;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalFormat) {
	Object.defineProperty(Excel.ConditionalFormat.prototype, "priority", {
		get: function () {
			this.load("priority");
			this.context.syncSynchronous();
			return this._Pri;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalFormat) {
	Object.defineProperty(Excel.ConditionalFormat.prototype, "stopIfTrue", {
		get: function () {
			this.load("stopIfTrue");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalFormat) {
	Object.defineProperty(Excel.ConditionalFormat.prototype, "type", {
		get: function () {
			this.load("type");
			this.context.syncSynchronous();
			return this._Ty;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.ConditionalFormatCollection) {
	(function () {
		var oldMethod = Excel.ConditionalFormatCollection.prototype.getCount;
		Excel.ConditionalFormatCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.ConditionalFormatCollection) {
	Object.defineProperty(Excel.ConditionalFormatCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalFormatRule) {
	Object.defineProperty(Excel.ConditionalFormatRule.prototype, "formula", {
		get: function () {
			this.load("formula");
			this.context.syncSynchronous();
			return this._F;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalFormatRule) {
	Object.defineProperty(Excel.ConditionalFormatRule.prototype, "formulaLocal", {
		get: function () {
			this.load("formulaLocal");
			this.context.syncSynchronous();
			return this._Fo;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalFormatRule) {
	Object.defineProperty(Excel.ConditionalFormatRule.prototype, "formulaR1C1", {
		get: function () {
			this.load("formulaR1C1");
			this.context.syncSynchronous();
			return this._For;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalRangeBorder) {
	Object.defineProperty(Excel.ConditionalRangeBorder.prototype, "color", {
		get: function () {
			this.load("color");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalRangeBorder) {
	Object.defineProperty(Excel.ConditionalRangeBorder.prototype, "sideIndex", {
		get: function () {
			this.load("sideIndex");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalRangeBorder) {
	Object.defineProperty(Excel.ConditionalRangeBorder.prototype, "style", {
		get: function () {
			this.load("style");
			this.context.syncSynchronous();
			return this._St;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalRangeBorderCollection) {
	Object.defineProperty(Excel.ConditionalRangeBorderCollection.prototype, "count", {
		get: function () {
			this.load("count");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.ConditionalRangeBorderCollection) {
	Object.defineProperty(Excel.ConditionalRangeBorderCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalRangeFill) {
	Object.defineProperty(Excel.ConditionalRangeFill.prototype, "color", {
		get: function () {
			this.load("color");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalRangeFont) {
	Object.defineProperty(Excel.ConditionalRangeFont.prototype, "bold", {
		get: function () {
			this.load("bold");
			this.context.syncSynchronous();
			return this._B;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalRangeFont) {
	Object.defineProperty(Excel.ConditionalRangeFont.prototype, "color", {
		get: function () {
			this.load("color");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalRangeFont) {
	Object.defineProperty(Excel.ConditionalRangeFont.prototype, "italic", {
		get: function () {
			this.load("italic");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalRangeFont) {
	Object.defineProperty(Excel.ConditionalRangeFont.prototype, "strikethrough", {
		get: function () {
			this.load("strikethrough");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalRangeFont) {
	Object.defineProperty(Excel.ConditionalRangeFont.prototype, "underline", {
		get: function () {
			this.load("underline");
			this.context.syncSynchronous();
			return this._U;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.ConditionalRangeFormat) {
	Object.defineProperty(Excel.ConditionalRangeFormat.prototype, "numberFormat", {
		get: function () {
			this.load("numberFormat");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomFunction) {
	Object.defineProperty(Excel.CustomFunction.prototype, "batching", {
		get: function () {
			this.load("batching");
			this.context.syncSynchronous();
			return this._B;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomFunction) {
	Object.defineProperty(Excel.CustomFunction.prototype, "cancelable", {
		get: function () {
			this.load("cancelable");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomFunction) {
	Object.defineProperty(Excel.CustomFunction.prototype, "description", {
		get: function () {
			this.load("description");
			this.context.syncSynchronous();
			return this._D;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomFunction) {
	Object.defineProperty(Excel.CustomFunction.prototype, "id", {
		get: function () {
			this.load("id");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomFunction) {
	Object.defineProperty(Excel.CustomFunction.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomFunction) {
	Object.defineProperty(Excel.CustomFunction.prototype, "parameters", {
		get: function () {
			this.load("parameters");
			this.context.syncSynchronous();
			return this._P;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomFunction) {
	Object.defineProperty(Excel.CustomFunction.prototype, "resultDimensionality", {
		get: function () {
			this.load("resultDimensionality");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomFunction) {
	Object.defineProperty(Excel.CustomFunction.prototype, "resultType", {
		get: function () {
			this.load("resultType");
			this.context.syncSynchronous();
			return this._Re;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomFunction) {
	Object.defineProperty(Excel.CustomFunction.prototype, "streaming", {
		get: function () {
			this.load("streaming");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomFunction) {
	Object.defineProperty(Excel.CustomFunction.prototype, "type", {
		get: function () {
			this.load("type");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.CustomFunctionCollection) {
	(function () {
		var oldMethod = Excel.CustomFunctionCollection.prototype.getCount;
		Excel.CustomFunctionCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.CustomFunctionCollection) {
	Object.defineProperty(Excel.CustomFunctionCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomProperty) {
	Object.defineProperty(Excel.CustomProperty.prototype, "key", {
		get: function () {
			this.load("key");
			this.context.syncSynchronous();
			return this._K;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomProperty) {
	Object.defineProperty(Excel.CustomProperty.prototype, "type", {
		get: function () {
			this.load("type");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomProperty) {
	Object.defineProperty(Excel.CustomProperty.prototype, "value", {
		get: function () {
			this.load("value");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.CustomPropertyCollection) {
	(function () {
		var oldMethod = Excel.CustomPropertyCollection.prototype.getCount;
		Excel.CustomPropertyCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.CustomPropertyCollection) {
	Object.defineProperty(Excel.CustomPropertyCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomXmlPart) {
	Object.defineProperty(Excel.CustomXmlPart.prototype, "id", {
		get: function () {
			this.load("id");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.CustomXmlPart) {
	Object.defineProperty(Excel.CustomXmlPart.prototype, "namespaceUri", {
		get: function () {
			this.load("namespaceUri");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.CustomXmlPart) {
	(function () {
		var oldMethod = Excel.CustomXmlPart.prototype.getXml;
		Excel.CustomXmlPart.prototype.getXml = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.CustomXmlPartCollection) {
	(function () {
		var oldMethod = Excel.CustomXmlPartCollection.prototype.getCount;
		Excel.CustomXmlPartCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.CustomXmlPartCollection) {
	Object.defineProperty(Excel.CustomXmlPartCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.CustomXmlPartScopedCollection) {
	(function () {
		var oldMethod = Excel.CustomXmlPartScopedCollection.prototype.getCount;
		Excel.CustomXmlPartScopedCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.CustomXmlPartScopedCollection) {
	Object.defineProperty(Excel.CustomXmlPartScopedCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DataBarConditionalFormat) {
	Object.defineProperty(Excel.DataBarConditionalFormat.prototype, "axisColor", {
		get: function () {
			this.load("axisColor");
			this.context.syncSynchronous();
			return this._A;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DataBarConditionalFormat) {
	Object.defineProperty(Excel.DataBarConditionalFormat.prototype, "axisFormat", {
		get: function () {
			this.load("axisFormat");
			this.context.syncSynchronous();
			return this._Ax;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DataBarConditionalFormat) {
	Object.defineProperty(Excel.DataBarConditionalFormat.prototype, "barDirection", {
		get: function () {
			this.load("barDirection");
			this.context.syncSynchronous();
			return this._B;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DataBarConditionalFormat) {
	Object.defineProperty(Excel.DataBarConditionalFormat.prototype, "lowerBoundRule", {
		get: function () {
			this.load("lowerBoundRule");
			this.context.syncSynchronous();
			return this._L;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DataBarConditionalFormat) {
	Object.defineProperty(Excel.DataBarConditionalFormat.prototype, "showDataBarOnly", {
		get: function () {
			this.load("showDataBarOnly");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DataBarConditionalFormat) {
	Object.defineProperty(Excel.DataBarConditionalFormat.prototype, "upperBoundRule", {
		get: function () {
			this.load("upperBoundRule");
			this.context.syncSynchronous();
			return this._U;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DataValidation) {
	Object.defineProperty(Excel.DataValidation.prototype, "errorAlert", {
		get: function () {
			this.load("errorAlert");
			this.context.syncSynchronous();
			return this._E;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DataValidation) {
	Object.defineProperty(Excel.DataValidation.prototype, "ignoreBlanks", {
		get: function () {
			this.load("ignoreBlanks");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DataValidation) {
	Object.defineProperty(Excel.DataValidation.prototype, "prompt", {
		get: function () {
			this.load("prompt");
			this.context.syncSynchronous();
			return this._P;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DataValidation) {
	Object.defineProperty(Excel.DataValidation.prototype, "rule", {
		get: function () {
			this.load("rule");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DataValidation) {
	Object.defineProperty(Excel.DataValidation.prototype, "type", {
		get: function () {
			this.load("type");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DocumentProperties) {
	Object.defineProperty(Excel.DocumentProperties.prototype, "author", {
		get: function () {
			this.load("author");
			this.context.syncSynchronous();
			return this._A;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DocumentProperties) {
	Object.defineProperty(Excel.DocumentProperties.prototype, "category", {
		get: function () {
			this.load("category");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DocumentProperties) {
	Object.defineProperty(Excel.DocumentProperties.prototype, "comments", {
		get: function () {
			this.load("comments");
			this.context.syncSynchronous();
			return this._Co;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DocumentProperties) {
	Object.defineProperty(Excel.DocumentProperties.prototype, "company", {
		get: function () {
			this.load("company");
			this.context.syncSynchronous();
			return this._Com;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DocumentProperties) {
	Object.defineProperty(Excel.DocumentProperties.prototype, "creationDate", {
		get: function () {
			this.load("creationDate");
			this.context.syncSynchronous();
			return this._Cr;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DocumentProperties) {
	Object.defineProperty(Excel.DocumentProperties.prototype, "keywords", {
		get: function () {
			this.load("keywords");
			this.context.syncSynchronous();
			return this._K;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DocumentProperties) {
	Object.defineProperty(Excel.DocumentProperties.prototype, "lastAuthor", {
		get: function () {
			this.load("lastAuthor");
			this.context.syncSynchronous();
			return this._L;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DocumentProperties) {
	Object.defineProperty(Excel.DocumentProperties.prototype, "manager", {
		get: function () {
			this.load("manager");
			this.context.syncSynchronous();
			return this._M;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DocumentProperties) {
	Object.defineProperty(Excel.DocumentProperties.prototype, "revisionNumber", {
		get: function () {
			this.load("revisionNumber");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DocumentProperties) {
	Object.defineProperty(Excel.DocumentProperties.prototype, "subject", {
		get: function () {
			this.load("subject");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.DocumentProperties) {
	Object.defineProperty(Excel.DocumentProperties.prototype, "title", {
		get: function () {
			this.load("title");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Filter) {
	Object.defineProperty(Excel.Filter.prototype, "criteria", {
		get: function () {
			this.load("criteria");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.FormatProtection) {
	Object.defineProperty(Excel.FormatProtection.prototype, "formulaHidden", {
		get: function () {
			this.load("formulaHidden");
			this.context.syncSynchronous();
			return this._F;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.FormatProtection) {
	Object.defineProperty(Excel.FormatProtection.prototype, "locked", {
		get: function () {
			this.load("locked");
			this.context.syncSynchronous();
			return this._L;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.FunctionResult) {
	Object.defineProperty(Excel.FunctionResult.prototype, "error", {
		get: function () {
			this.load("error");
			this.context.syncSynchronous();
			return this._E;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.FunctionResult) {
	Object.defineProperty(Excel.FunctionResult.prototype, "value", {
		get: function () {
			this.load("value");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.IconSetConditionalFormat) {
	Object.defineProperty(Excel.IconSetConditionalFormat.prototype, "criteria", {
		get: function () {
			this.load("criteria");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.IconSetConditionalFormat) {
	Object.defineProperty(Excel.IconSetConditionalFormat.prototype, "reverseIconOrder", {
		get: function () {
			this.load("reverseIconOrder");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.IconSetConditionalFormat) {
	Object.defineProperty(Excel.IconSetConditionalFormat.prototype, "showIconOnly", {
		get: function () {
			this.load("showIconOnly");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.IconSetConditionalFormat) {
	Object.defineProperty(Excel.IconSetConditionalFormat.prototype, "style", {
		get: function () {
			this.load("style");
			this.context.syncSynchronous();
			return this._St;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.InternalTest) {
	(function () {
		var oldMethod = Excel.InternalTest.prototype.compareTempFilesAreIdentical;
		Excel.InternalTest.prototype.compareTempFilesAreIdentical = function (arg0, arg1) {
			var result = oldMethod.call(this, arg0, arg1);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.InternalTest) {
	(function () {
		var oldMethod = Excel.InternalTest.prototype.delay;
		Excel.InternalTest.prototype.delay = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.InternalTest) {
	(function () {
		var oldMethod = Excel.InternalTest.prototype.serializeCustomFunctions;
		Excel.InternalTest.prototype.serializeCustomFunctions = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}

if (Excel.NamedItem) {
	Object.defineProperty(Excel.NamedItem.prototype, "comment", {
		get: function () {
			this.load("comment");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.NamedItem) {
	Object.defineProperty(Excel.NamedItem.prototype, "formula", {
		get: function () {
			this.load("formula");
			this.context.syncSynchronous();
			return this._F;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.NamedItem) {
	Object.defineProperty(Excel.NamedItem.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.NamedItem) {
	Object.defineProperty(Excel.NamedItem.prototype, "scope", {
		get: function () {
			this.load("scope");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.NamedItem) {
	Object.defineProperty(Excel.NamedItem.prototype, "type", {
		get: function () {
			this.load("type");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.NamedItem) {
	Object.defineProperty(Excel.NamedItem.prototype, "value", {
		get: function () {
			this.load("value");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.NamedItem) {
	Object.defineProperty(Excel.NamedItem.prototype, "visible", {
		get: function () {
			this.load("visible");
			this.context.syncSynchronous();
			return this._Vi;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.NamedItem) {
	Object.defineProperty(Excel.NamedItem.prototype, "_Id", {
		get: function () {
			this.load("_Id");
			this.context.syncSynchronous();
			return this.__I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.NamedItemArrayValues) {
	Object.defineProperty(Excel.NamedItemArrayValues.prototype, "types", {
		get: function () {
			this.load("types");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.NamedItemArrayValues) {
	Object.defineProperty(Excel.NamedItemArrayValues.prototype, "values", {
		get: function () {
			this.load("values");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.NamedItemCollection) {
	(function () {
		var oldMethod = Excel.NamedItemCollection.prototype.getCount;
		Excel.NamedItemCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.NamedItemCollection) {
	Object.defineProperty(Excel.NamedItemCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PageLayout) {
	Object.defineProperty(Excel.PageLayout.prototype, "blackAndWhite", {
		get: function () {
			this.load("blackAndWhite");
			this.context.syncSynchronous();
			return this._B;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PageLayout) {
	Object.defineProperty(Excel.PageLayout.prototype, "orientation", {
		get: function () {
			this.load("orientation");
			this.context.syncSynchronous();
			return this._O;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PageLayout) {
	Object.defineProperty(Excel.PageLayout.prototype, "paperSize", {
		get: function () {
			this.load("paperSize");
			this.context.syncSynchronous();
			return this._P;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PageLayout) {
	Object.defineProperty(Excel.PageLayout.prototype, "printErrors", {
		get: function () {
			this.load("printErrors");
			this.context.syncSynchronous();
			return this._Pr;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotCache) {
	Object.defineProperty(Excel.PivotCache.prototype, "id", {
		get: function () {
			this.load("id");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotCache) {
	Object.defineProperty(Excel.PivotCache.prototype, "index", {
		get: function () {
			this.load("index");
			this.context.syncSynchronous();
			return this._In;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotCache) {
	Object.defineProperty(Excel.PivotCache.prototype, "sourceData", {
		get: function () {
			this.load("sourceData");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotCache) {
	Object.defineProperty(Excel.PivotCache.prototype, "version", {
		get: function () {
			this.load("version");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.PivotCacheCollection) {
	(function () {
		var oldMethod = Excel.PivotCacheCollection.prototype.getCount;
		Excel.PivotCacheCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.PivotCacheCollection) {
	Object.defineProperty(Excel.PivotCacheCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "aggregationFunction", {
		get: function () {
			this.load("aggregationFunction");
			this.context.syncSynchronous();
			return this._A;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "allItemsVisible", {
		get: function () {
			this.load("allItemsVisible");
			this.context.syncSynchronous();
			return this._Al;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "autoSortField", {
		get: function () {
			this.load("autoSortField");
			this.context.syncSynchronous();
			return this._Au;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "autoSortOrder", {
		get: function () {
			this.load("autoSortOrder");
			this.context.syncSynchronous();
			return this._Aut;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "calculated", {
		get: function () {
			this.load("calculated");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "calculation", {
		get: function () {
			this.load("calculation");
			this.context.syncSynchronous();
			return this._Ca;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "caption", {
		get: function () {
			this.load("caption");
			this.context.syncSynchronous();
			return this._Cap;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "dataType", {
		get: function () {
			this.load("dataType");
			this.context.syncSynchronous();
			return this._D;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "drilledDown", {
		get: function () {
			this.load("drilledDown");
			this.context.syncSynchronous();
			return this._Dr;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "enableMultiplePageItems", {
		get: function () {
			this.load("enableMultiplePageItems");
			this.context.syncSynchronous();
			return this._E;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "formula", {
		get: function () {
			this.load("formula");
			this.context.syncSynchronous();
			return this._F;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "numberFormat", {
		get: function () {
			this.load("numberFormat");
			this.context.syncSynchronous();
			return this._Nu;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "orientation", {
		get: function () {
			this.load("orientation");
			this.context.syncSynchronous();
			return this._O;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "position", {
		get: function () {
			this.load("position");
			this.context.syncSynchronous();
			return this._Po;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "showDetail", {
		get: function () {
			this.load("showDetail");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "sourceName", {
		get: function () {
			this.load("sourceName");
			this.context.syncSynchronous();
			return this._So;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotField) {
	Object.defineProperty(Excel.PivotField.prototype, "subtotals", {
		get: function () {
			this.load("subtotals");
			this.context.syncSynchronous();
			return this._Su;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.PivotFieldCollection) {
	(function () {
		var oldMethod = Excel.PivotFieldCollection.prototype.getCount;
		Excel.PivotFieldCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.PivotFieldCollection) {
	Object.defineProperty(Excel.PivotFieldCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotItem) {
	Object.defineProperty(Excel.PivotItem.prototype, "calculated", {
		get: function () {
			this.load("calculated");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotItem) {
	Object.defineProperty(Excel.PivotItem.prototype, "drilledDown", {
		get: function () {
			this.load("drilledDown");
			this.context.syncSynchronous();
			return this._D;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotItem) {
	Object.defineProperty(Excel.PivotItem.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotItem) {
	Object.defineProperty(Excel.PivotItem.prototype, "position", {
		get: function () {
			this.load("position");
			this.context.syncSynchronous();
			return this._Po;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotItem) {
	Object.defineProperty(Excel.PivotItem.prototype, "recordCount", {
		get: function () {
			this.load("recordCount");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotItem) {
	Object.defineProperty(Excel.PivotItem.prototype, "showDetail", {
		get: function () {
			this.load("showDetail");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotItem) {
	Object.defineProperty(Excel.PivotItem.prototype, "sourceName", {
		get: function () {
			this.load("sourceName");
			this.context.syncSynchronous();
			return this._So;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotItem) {
	Object.defineProperty(Excel.PivotItem.prototype, "value", {
		get: function () {
			this.load("value");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotItem) {
	Object.defineProperty(Excel.PivotItem.prototype, "visible", {
		get: function () {
			this.load("visible");
			this.context.syncSynchronous();
			return this._Vi;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.PivotItemCollection) {
	(function () {
		var oldMethod = Excel.PivotItemCollection.prototype.getCount;
		Excel.PivotItemCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.PivotItemCollection) {
	Object.defineProperty(Excel.PivotItemCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "columnGrandTotals", {
		get: function () {
			this.load("columnGrandTotals");
			this.context.syncSynchronous();
			return this._Co;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "id", {
		get: function () {
			this.load("id");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "rowGrandTotals", {
		get: function () {
			this.load("rowGrandTotals");
			this.context.syncSynchronous();
			return this._Ro;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "allowMultipleFilters", {
		get: function () {
			this.load("allowMultipleFilters");
			this.context.syncSynchronous();
			return this._A;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "alternativeText", {
		get: function () {
			this.load("alternativeText");
			this.context.syncSynchronous();
			return this._Al;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "compactLayoutColumnHeader", {
		get: function () {
			this.load("compactLayoutColumnHeader");
			this.context.syncSynchronous();
			return this._Com;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "compactLayoutRowHeader", {
		get: function () {
			this.load("compactLayoutRowHeader");
			this.context.syncSynchronous();
			return this._Comp;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "compactRowIndent", {
		get: function () {
			this.load("compactRowIndent");
			this.context.syncSynchronous();
			return this._Compa;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "displayContextTooltips", {
		get: function () {
			this.load("displayContextTooltips");
			this.context.syncSynchronous();
			return this._Di;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "displayEmptyColumn", {
		get: function () {
			this.load("displayEmptyColumn");
			this.context.syncSynchronous();
			return this._Dis;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "displayEmptyRow", {
		get: function () {
			this.load("displayEmptyRow");
			this.context.syncSynchronous();
			return this._Disp;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "displayErrorString", {
		get: function () {
			this.load("displayErrorString");
			this.context.syncSynchronous();
			return this._Displ;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "displayFieldCaptions", {
		get: function () {
			this.load("displayFieldCaptions");
			this.context.syncSynchronous();
			return this._Displa;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "displayNullString", {
		get: function () {
			this.load("displayNullString");
			this.context.syncSynchronous();
			return this._Display;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "enableDataValueEditing", {
		get: function () {
			this.load("enableDataValueEditing");
			this.context.syncSynchronous();
			return this._E;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "enableDrilldown", {
		get: function () {
			this.load("enableDrilldown");
			this.context.syncSynchronous();
			return this._En;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "enableFieldDialog", {
		get: function () {
			this.load("enableFieldDialog");
			this.context.syncSynchronous();
			return this._Ena;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "enableFieldList", {
		get: function () {
			this.load("enableFieldList");
			this.context.syncSynchronous();
			return this._Enab;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "enableWizard", {
		get: function () {
			this.load("enableWizard");
			this.context.syncSynchronous();
			return this._Enabl;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "errorString", {
		get: function () {
			this.load("errorString");
			this.context.syncSynchronous();
			return this._Er;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "fieldListSortAscending", {
		get: function () {
			this.load("fieldListSortAscending");
			this.context.syncSynchronous();
			return this._F;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "grandTotalName", {
		get: function () {
			this.load("grandTotalName");
			this.context.syncSynchronous();
			return this._G;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "hasAutoFormat", {
		get: function () {
			this.load("hasAutoFormat");
			this.context.syncSynchronous();
			return this._H;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "hidden", {
		get: function () {
			this.load("hidden");
			this.context.syncSynchronous();
			return this._Hi;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "inGridDropZones", {
		get: function () {
			this.load("inGridDropZones");
			this.context.syncSynchronous();
			return this._In;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "innerDetail", {
		get: function () {
			this.load("innerDetail");
			this.context.syncSynchronous();
			return this._Inn;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "manualUpdate", {
		get: function () {
			this.load("manualUpdate");
			this.context.syncSynchronous();
			return this._M;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "nullString", {
		get: function () {
			this.load("nullString");
			this.context.syncSynchronous();
			return this._Nu;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "preserveFormatting", {
		get: function () {
			this.load("preserveFormatting");
			this.context.syncSynchronous();
			return this._Pr;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "printDrillIndicators", {
		get: function () {
			this.load("printDrillIndicators");
			this.context.syncSynchronous();
			return this._Pri;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "printTitles", {
		get: function () {
			this.load("printTitles");
			this.context.syncSynchronous();
			return this._Prin;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "refreshDate", {
		get: function () {
			this.load("refreshDate");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "refreshName", {
		get: function () {
			this.load("refreshName");
			this.context.syncSynchronous();
			return this._Re;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "repeatItemsOnEachPrintedPage", {
		get: function () {
			this.load("repeatItemsOnEachPrintedPage");
			this.context.syncSynchronous();
			return this._Rep;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "saveData", {
		get: function () {
			this.load("saveData");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "showDrillIndicators", {
		get: function () {
			this.load("showDrillIndicators");
			this.context.syncSynchronous();
			return this._Sh;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "showPageMultipleItemLabel", {
		get: function () {
			this.load("showPageMultipleItemLabel");
			this.context.syncSynchronous();
			return this._Sho;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "showTableStyleColumnHeaders", {
		get: function () {
			this.load("showTableStyleColumnHeaders");
			this.context.syncSynchronous();
			return this._Show;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "showTableStyleColumnStripes", {
		get: function () {
			this.load("showTableStyleColumnStripes");
			this.context.syncSynchronous();
			return this._ShowT;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "showTableStyleLastColumn", {
		get: function () {
			this.load("showTableStyleLastColumn");
			this.context.syncSynchronous();
			return this._ShowTa;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "showTableStyleRowHeaders", {
		get: function () {
			this.load("showTableStyleRowHeaders");
			this.context.syncSynchronous();
			return this._ShowTab;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "showTableStyleRowStripes", {
		get: function () {
			this.load("showTableStyleRowStripes");
			this.context.syncSynchronous();
			return this._ShowTabl;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "showValuesRow", {
		get: function () {
			this.load("showValuesRow");
			this.context.syncSynchronous();
			return this._ShowV;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "smallGrid", {
		get: function () {
			this.load("smallGrid");
			this.context.syncSynchronous();
			return this._Sm;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "sortUsingCustomLists", {
		get: function () {
			this.load("sortUsingCustomLists");
			this.context.syncSynchronous();
			return this._So;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "subtotalHiddenPageItems", {
		get: function () {
			this.load("subtotalHiddenPageItems");
			this.context.syncSynchronous();
			return this._Su;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "summary", {
		get: function () {
			this.load("summary");
			this.context.syncSynchronous();
			return this._Sum;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "tag", {
		get: function () {
			this.load("tag");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "totalsAnnotation", {
		get: function () {
			this.load("totalsAnnotation");
			this.context.syncSynchronous();
			return this._To;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "vacatedStyle", {
		get: function () {
			this.load("vacatedStyle");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "value", {
		get: function () {
			this.load("value");
			this.context.syncSynchronous();
			return this._Va;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PivotTable) {
	Object.defineProperty(Excel.PivotTable.prototype, "version", {
		get: function () {
			this.load("version");
			this.context.syncSynchronous();
			return this._Ve;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.PivotTable) {
	(function () {
		var oldMethod = Excel.PivotTable.prototype.refreshTable;
		Excel.PivotTable.prototype.refreshTable = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.PivotTableCollection) {
	(function () {
		var oldMethod = Excel.PivotTableCollection.prototype.getCount;
		Excel.PivotTableCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.PivotTableCollection) {
	Object.defineProperty(Excel.PivotTableCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.PresetCriteriaConditionalFormat) {
	Object.defineProperty(Excel.PresetCriteriaConditionalFormat.prototype, "rule", {
		get: function () {
			this.load("rule");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "address", {
		get: function () {
			this.load("address");
			this.context.syncSynchronous();
			return this._A;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "addressLocal", {
		get: function () {
			this.load("addressLocal");
			this.context.syncSynchronous();
			return this._Ad;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "cellCount", {
		get: function () {
			this.load("cellCount");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "columnCount", {
		get: function () {
			this.load("columnCount");
			this.context.syncSynchronous();
			return this._Co;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "columnHidden", {
		get: function () {
			this.load("columnHidden");
			this.context.syncSynchronous();
			return this._Col;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "columnIndex", {
		get: function () {
			this.load("columnIndex");
			this.context.syncSynchronous();
			return this._Colu;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "formulas", {
		get: function () {
			this.load("formulas");
			this.context.syncSynchronous();
			return this.m_formulas;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "formulasLocal", {
		get: function () {
			this.load("formulasLocal");
			this.context.syncSynchronous();
			return this.m_formulasLocal;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "formulasR1C1", {
		get: function () {
			this.load("formulasR1C1");
			this.context.syncSynchronous();
			return this.m_formulasR1C1;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "hidden", {
		get: function () {
			this.load("hidden");
			this.context.syncSynchronous();
			return this._H;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "hyperlink", {
		get: function () {
			this.load("hyperlink");
			this.context.syncSynchronous();
			return this._Hy;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "numberFormat", {
		get: function () {
			this.load("numberFormat");
			this.context.syncSynchronous();
			return this.m_numberFormat;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "numberFormatLocal", {
		get: function () {
			this.load("numberFormatLocal");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "rowCount", {
		get: function () {
			this.load("rowCount");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "rowHidden", {
		get: function () {
			this.load("rowHidden");
			this.context.syncSynchronous();
			return this._Ro;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "rowIndex", {
		get: function () {
			this.load("rowIndex");
			this.context.syncSynchronous();
			return this._Row;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "style", {
		get: function () {
			this.load("style");
			this.context.syncSynchronous();
			return this._St;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "text", {
		get: function () {
			this.load("text");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "valueTypes", {
		get: function () {
			this.load("valueTypes");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "values", {
		get: function () {
			this.load("values");
			this.context.syncSynchronous();
			return this.m_values;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "isEntireColumn", {
		get: function () {
			this.load("isEntireColumn");
			this.context.syncSynchronous();
			return this._i;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Range) {
	Object.defineProperty(Excel.Range.prototype, "isEntireRow", {
		get: function () {
			this.load("isEntireRow");
			this.context.syncSynchronous();
			return this._is;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.Range) {
	(function () {
		var oldMethod = Excel.Range.prototype.getImage;
		Excel.Range.prototype.getImage = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}

if (Excel.RangeBorder) {
	Object.defineProperty(Excel.RangeBorder.prototype, "color", {
		get: function () {
			this.load("color");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeBorder) {
	Object.defineProperty(Excel.RangeBorder.prototype, "sideIndex", {
		get: function () {
			this.load("sideIndex");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeBorder) {
	Object.defineProperty(Excel.RangeBorder.prototype, "style", {
		get: function () {
			this.load("style");
			this.context.syncSynchronous();
			return this._St;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeBorder) {
	Object.defineProperty(Excel.RangeBorder.prototype, "weight", {
		get: function () {
			this.load("weight");
			this.context.syncSynchronous();
			return this._W;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeBorderCollection) {
	Object.defineProperty(Excel.RangeBorderCollection.prototype, "count", {
		get: function () {
			this.load("count");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.RangeBorderCollection) {
	Object.defineProperty(Excel.RangeBorderCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFill) {
	Object.defineProperty(Excel.RangeFill.prototype, "color", {
		get: function () {
			this.load("color");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFont) {
	Object.defineProperty(Excel.RangeFont.prototype, "bold", {
		get: function () {
			this.load("bold");
			this.context.syncSynchronous();
			return this._B;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFont) {
	Object.defineProperty(Excel.RangeFont.prototype, "color", {
		get: function () {
			this.load("color");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFont) {
	Object.defineProperty(Excel.RangeFont.prototype, "italic", {
		get: function () {
			this.load("italic");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFont) {
	Object.defineProperty(Excel.RangeFont.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFont) {
	Object.defineProperty(Excel.RangeFont.prototype, "size", {
		get: function () {
			this.load("size");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFont) {
	Object.defineProperty(Excel.RangeFont.prototype, "underline", {
		get: function () {
			this.load("underline");
			this.context.syncSynchronous();
			return this._U;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFormat) {
	Object.defineProperty(Excel.RangeFormat.prototype, "columnWidth", {
		get: function () {
			this.load("columnWidth");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFormat) {
	Object.defineProperty(Excel.RangeFormat.prototype, "horizontalAlignment", {
		get: function () {
			this.load("horizontalAlignment");
			this.context.syncSynchronous();
			return this._H;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFormat) {
	Object.defineProperty(Excel.RangeFormat.prototype, "rowHeight", {
		get: function () {
			this.load("rowHeight");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFormat) {
	Object.defineProperty(Excel.RangeFormat.prototype, "textOrientation", {
		get: function () {
			this.load("textOrientation");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFormat) {
	Object.defineProperty(Excel.RangeFormat.prototype, "useStandardHeight", {
		get: function () {
			this.load("useStandardHeight");
			this.context.syncSynchronous();
			return this._U;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFormat) {
	Object.defineProperty(Excel.RangeFormat.prototype, "useStandardWidth", {
		get: function () {
			this.load("useStandardWidth");
			this.context.syncSynchronous();
			return this._Us;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFormat) {
	Object.defineProperty(Excel.RangeFormat.prototype, "verticalAlignment", {
		get: function () {
			this.load("verticalAlignment");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeFormat) {
	Object.defineProperty(Excel.RangeFormat.prototype, "wrapText", {
		get: function () {
			this.load("wrapText");
			this.context.syncSynchronous();
			return this._W;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeView) {
	Object.defineProperty(Excel.RangeView.prototype, "cellAddresses", {
		get: function () {
			this.load("cellAddresses");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeView) {
	Object.defineProperty(Excel.RangeView.prototype, "columnCount", {
		get: function () {
			this.load("columnCount");
			this.context.syncSynchronous();
			return this._Co;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeView) {
	Object.defineProperty(Excel.RangeView.prototype, "formulas", {
		get: function () {
			this.load("formulas");
			this.context.syncSynchronous();
			return this._F;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeView) {
	Object.defineProperty(Excel.RangeView.prototype, "formulasLocal", {
		get: function () {
			this.load("formulasLocal");
			this.context.syncSynchronous();
			return this._Fo;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeView) {
	Object.defineProperty(Excel.RangeView.prototype, "formulasR1C1", {
		get: function () {
			this.load("formulasR1C1");
			this.context.syncSynchronous();
			return this._For;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeView) {
	Object.defineProperty(Excel.RangeView.prototype, "index", {
		get: function () {
			this.load("index");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeView) {
	Object.defineProperty(Excel.RangeView.prototype, "numberFormat", {
		get: function () {
			this.load("numberFormat");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeView) {
	Object.defineProperty(Excel.RangeView.prototype, "rowCount", {
		get: function () {
			this.load("rowCount");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeView) {
	Object.defineProperty(Excel.RangeView.prototype, "text", {
		get: function () {
			this.load("text");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeView) {
	Object.defineProperty(Excel.RangeView.prototype, "valueTypes", {
		get: function () {
			this.load("valueTypes");
			this.context.syncSynchronous();
			return this._Va;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.RangeView) {
	Object.defineProperty(Excel.RangeView.prototype, "values", {
		get: function () {
			this.load("values");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.RangeViewCollection) {
	(function () {
		var oldMethod = Excel.RangeViewCollection.prototype.getCount;
		Excel.RangeViewCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.RangeViewCollection) {
	Object.defineProperty(Excel.RangeViewCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Runtime) {
	Object.defineProperty(Excel.Runtime.prototype, "enableEvents", {
		get: function () {
			this.load("enableEvents");
			this.context.syncSynchronous();
			return this._E;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Setting) {
	Object.defineProperty(Excel.Setting.prototype, "key", {
		get: function () {
			this.load("key");
			this.context.syncSynchronous();
			return this._K;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Setting) {
	Object.defineProperty(Excel.Setting.prototype, "value", {
		get: function () {
			this.load("value");
			this.context.syncSynchronous();
			return this.m_value;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.SettingCollection) {
	(function () {
		var oldMethod = Excel.SettingCollection.prototype.getCount;
		Excel.SettingCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.SettingCollection) {
	Object.defineProperty(Excel.SettingCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "addIndent", {
		get: function () {
			this.load("addIndent");
			this.context.syncSynchronous();
			return this._A;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "builtIn", {
		get: function () {
			this.load("builtIn");
			this.context.syncSynchronous();
			return this._Bu;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "formulaHidden", {
		get: function () {
			this.load("formulaHidden");
			this.context.syncSynchronous();
			return this._For;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "horizontalAlignment", {
		get: function () {
			this.load("horizontalAlignment");
			this.context.syncSynchronous();
			return this._H;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "includeAlignment", {
		get: function () {
			this.load("includeAlignment");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "includeBorder", {
		get: function () {
			this.load("includeBorder");
			this.context.syncSynchronous();
			return this._In;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "includeFont", {
		get: function () {
			this.load("includeFont");
			this.context.syncSynchronous();
			return this._Inc;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "includeNumber", {
		get: function () {
			this.load("includeNumber");
			this.context.syncSynchronous();
			return this._Incl;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "includePatterns", {
		get: function () {
			this.load("includePatterns");
			this.context.syncSynchronous();
			return this._Inclu;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "includeProtection", {
		get: function () {
			this.load("includeProtection");
			this.context.syncSynchronous();
			return this._Includ;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "indentLevel", {
		get: function () {
			this.load("indentLevel");
			this.context.syncSynchronous();
			return this._Ind;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "locked", {
		get: function () {
			this.load("locked");
			this.context.syncSynchronous();
			return this._L;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "numberFormat", {
		get: function () {
			this.load("numberFormat");
			this.context.syncSynchronous();
			return this._Nu;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "numberFormatLocal", {
		get: function () {
			this.load("numberFormatLocal");
			this.context.syncSynchronous();
			return this._Num;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "orientation", {
		get: function () {
			this.load("orientation");
			this.context.syncSynchronous();
			return this._O;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "readingOrder", {
		get: function () {
			this.load("readingOrder");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "shrinkToFit", {
		get: function () {
			this.load("shrinkToFit");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "verticalAlignment", {
		get: function () {
			this.load("verticalAlignment");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Style) {
	Object.defineProperty(Excel.Style.prototype, "wrapText", {
		get: function () {
			this.load("wrapText");
			this.context.syncSynchronous();
			return this._W;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.StyleCollection) {
	Object.defineProperty(Excel.StyleCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Table) {
	Object.defineProperty(Excel.Table.prototype, "highlightFirstColumn", {
		get: function () {
			this.load("highlightFirstColumn");
			this.context.syncSynchronous();
			return this._H;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Table) {
	Object.defineProperty(Excel.Table.prototype, "highlightLastColumn", {
		get: function () {
			this.load("highlightLastColumn");
			this.context.syncSynchronous();
			return this._Hi;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Table) {
	Object.defineProperty(Excel.Table.prototype, "id", {
		get: function () {
			this.load("id");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Table) {
	Object.defineProperty(Excel.Table.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Table) {
	Object.defineProperty(Excel.Table.prototype, "showBandedColumns", {
		get: function () {
			this.load("showBandedColumns");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Table) {
	Object.defineProperty(Excel.Table.prototype, "showBandedRows", {
		get: function () {
			this.load("showBandedRows");
			this.context.syncSynchronous();
			return this._Sh;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Table) {
	Object.defineProperty(Excel.Table.prototype, "showFilterButton", {
		get: function () {
			this.load("showFilterButton");
			this.context.syncSynchronous();
			return this._Sho;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Table) {
	Object.defineProperty(Excel.Table.prototype, "showHeaders", {
		get: function () {
			this.load("showHeaders");
			this.context.syncSynchronous();
			return this._Show;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Table) {
	Object.defineProperty(Excel.Table.prototype, "showTotals", {
		get: function () {
			this.load("showTotals");
			this.context.syncSynchronous();
			return this._ShowT;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Table) {
	Object.defineProperty(Excel.Table.prototype, "style", {
		get: function () {
			this.load("style");
			this.context.syncSynchronous();
			return this._St;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TableCollection) {
	Object.defineProperty(Excel.TableCollection.prototype, "count", {
		get: function () {
			this.load("count");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.TableCollection) {
	(function () {
		var oldMethod = Excel.TableCollection.prototype.getCount;
		Excel.TableCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.TableCollection) {
	Object.defineProperty(Excel.TableCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TableColumn) {
	Object.defineProperty(Excel.TableColumn.prototype, "id", {
		get: function () {
			this.load("id");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TableColumn) {
	Object.defineProperty(Excel.TableColumn.prototype, "index", {
		get: function () {
			this.load("index");
			this.context.syncSynchronous();
			return this._In;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TableColumn) {
	Object.defineProperty(Excel.TableColumn.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TableColumn) {
	Object.defineProperty(Excel.TableColumn.prototype, "values", {
		get: function () {
			this.load("values");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TableColumnCollection) {
	Object.defineProperty(Excel.TableColumnCollection.prototype, "count", {
		get: function () {
			this.load("count");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.TableColumnCollection) {
	(function () {
		var oldMethod = Excel.TableColumnCollection.prototype.getCount;
		Excel.TableColumnCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.TableColumnCollection) {
	Object.defineProperty(Excel.TableColumnCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TableRow) {
	Object.defineProperty(Excel.TableRow.prototype, "index", {
		get: function () {
			this.load("index");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TableRow) {
	Object.defineProperty(Excel.TableRow.prototype, "values", {
		get: function () {
			this.load("values");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TableRowCollection) {
	Object.defineProperty(Excel.TableRowCollection.prototype, "count", {
		get: function () {
			this.load("count");
			this.context.syncSynchronous();
			return this._C;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.TableRowCollection) {
	(function () {
		var oldMethod = Excel.TableRowCollection.prototype.getCount;
		Excel.TableRowCollection.prototype.getCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.TableRowCollection) {
	Object.defineProperty(Excel.TableRowCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TableSort) {
	Object.defineProperty(Excel.TableSort.prototype, "fields", {
		get: function () {
			this.load("fields");
			this.context.syncSynchronous();
			return this._F;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TableSort) {
	Object.defineProperty(Excel.TableSort.prototype, "matchCase", {
		get: function () {
			this.load("matchCase");
			this.context.syncSynchronous();
			return this._M;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TableSort) {
	Object.defineProperty(Excel.TableSort.prototype, "method", {
		get: function () {
			this.load("method");
			this.context.syncSynchronous();
			return this._Me;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TextConditionalFormat) {
	Object.defineProperty(Excel.TextConditionalFormat.prototype, "rule", {
		get: function () {
			this.load("rule");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.TopBottomConditionalFormat) {
	Object.defineProperty(Excel.TopBottomConditionalFormat.prototype, "rule", {
		get: function () {
			this.load("rule");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Visual) {
	Object.defineProperty(Excel.Visual.prototype, "id", {
		get: function () {
			this.load("id");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.VisualCollection) {
	(function () {
		var oldMethod = Excel.VisualCollection.prototype.getDefinitions;
		Excel.VisualCollection.prototype.getDefinitions = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.VisualCollection) {
	(function () {
		var oldMethod = Excel.VisualCollection.prototype.getPreview;
		Excel.VisualCollection.prototype.getPreview = function (arg0, arg1, arg2, arg3) {
			var result = oldMethod.call(this, arg0, arg1, arg2, arg3);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.VisualCollection) {
	Object.defineProperty(Excel.VisualCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Workbook) {
	Object.defineProperty(Excel.Workbook.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Workbook) {
	Object.defineProperty(Excel.Workbook.prototype, "readOnly", {
		get: function () {
			this.load("readOnly");
			this.context.syncSynchronous();
			return this._R;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Workbook) {
	Object.defineProperty(Excel.Workbook.prototype, "saved", {
		get: function () {
			this.load("saved");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.Workbook) {
	(function () {
		var oldMethod = Excel.Workbook.prototype._GetObjectByReferenceId;
		Excel.Workbook.prototype._GetObjectByReferenceId = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.Workbook) {
	(function () {
		var oldMethod = Excel.Workbook.prototype._GetObjectTypeNameByReferenceId;
		Excel.Workbook.prototype._GetObjectTypeNameByReferenceId = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.Workbook) {
	(function () {
		var oldMethod = Excel.Workbook.prototype._GetReferenceCount;
		Excel.Workbook.prototype._GetReferenceCount = function () {
			var result = oldMethod.call(this);
			this.context.syncSynchronous();
			return result;
		}
	})();
}

if (Excel.WorkbookProtection) {
	Object.defineProperty(Excel.WorkbookProtection.prototype, "protected", {
		get: function () {
			this.load("protected");
			this.context.syncSynchronous();
			return this._P;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Worksheet) {
	Object.defineProperty(Excel.Worksheet.prototype, "gridlines", {
		get: function () {
			this.load("gridlines");
			this.context.syncSynchronous();
			return this._G;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Worksheet) {
	Object.defineProperty(Excel.Worksheet.prototype, "headings", {
		get: function () {
			this.load("headings");
			this.context.syncSynchronous();
			return this._H;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Worksheet) {
	Object.defineProperty(Excel.Worksheet.prototype, "id", {
		get: function () {
			this.load("id");
			this.context.syncSynchronous();
			return this._I;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Worksheet) {
	Object.defineProperty(Excel.Worksheet.prototype, "name", {
		get: function () {
			this.load("name");
			this.context.syncSynchronous();
			return this._N;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Worksheet) {
	Object.defineProperty(Excel.Worksheet.prototype, "position", {
		get: function () {
			this.load("position");
			this.context.syncSynchronous();
			return this._Po;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Worksheet) {
	Object.defineProperty(Excel.Worksheet.prototype, "standardHeight", {
		get: function () {
			this.load("standardHeight");
			this.context.syncSynchronous();
			return this._S;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Worksheet) {
	Object.defineProperty(Excel.Worksheet.prototype, "standardWidth", {
		get: function () {
			this.load("standardWidth");
			this.context.syncSynchronous();
			return this._St;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Worksheet) {
	Object.defineProperty(Excel.Worksheet.prototype, "tabColor", {
		get: function () {
			this.load("tabColor");
			this.context.syncSynchronous();
			return this._T;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.Worksheet) {
	Object.defineProperty(Excel.Worksheet.prototype, "visibility", {
		get: function () {
			this.load("visibility");
			this.context.syncSynchronous();
			return this._V;
		},
		enumerable: true,
		configurable: true
	});
}
if (Excel.WorksheetCollection) {
	(function () {
		var oldMethod = Excel.WorksheetCollection.prototype.getCount;
		Excel.WorksheetCollection.prototype.getCount = function (arg0) {
			var result = oldMethod.call(this, arg0);
			this.context.syncSynchronous();
			return result;
		}
	})();
}
if (Excel.WorksheetCollection) {
	Object.defineProperty(Excel.WorksheetCollection.prototype, "items", {
		get: function () {
			this.load("$none");
			this.context.syncSynchronous();
			return this.m__items;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.WorksheetProtection) {
	Object.defineProperty(Excel.WorksheetProtection.prototype, "options", {
		get: function () {
			this.load("options");
			this.context.syncSynchronous();
			return this._O;
		},
		enumerable: true,
		configurable: true
	});
}

if (Excel.WorksheetProtection) {
	Object.defineProperty(Excel.WorksheetProtection.prototype, "protected", {
		get: function () {
			this.load("protected");
			this.context.syncSynchronous();
			return this._P;
		},
		enumerable: true,
		configurable: true
	});
}

